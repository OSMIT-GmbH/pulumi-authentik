// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { BlueprintArgs, BlueprintState } from "./blueprint";
export type Blueprint = import("./blueprint").Blueprint;
export const Blueprint: typeof import("./blueprint").Blueprint = null as any;
utilities.lazyLoad(exports, ["Blueprint"], () => require("./blueprint"));

export { CertificateKeyPairArgs, CertificateKeyPairState } from "./certificateKeyPair";
export type CertificateKeyPair = import("./certificateKeyPair").CertificateKeyPair;
export const CertificateKeyPair: typeof import("./certificateKeyPair").CertificateKeyPair = null as any;
utilities.lazyLoad(exports, ["CertificateKeyPair"], () => require("./certificateKeyPair"));

export { EnterpriseLicenseArgs, EnterpriseLicenseState } from "./enterpriseLicense";
export type EnterpriseLicense = import("./enterpriseLicense").EnterpriseLicense;
export const EnterpriseLicense: typeof import("./enterpriseLicense").EnterpriseLicense = null as any;
utilities.lazyLoad(exports, ["EnterpriseLicense"], () => require("./enterpriseLicense"));

export { EventRuleArgs, EventRuleState } from "./eventRule";
export type EventRule = import("./eventRule").EventRule;
export const EventRule: typeof import("./eventRule").EventRule = null as any;
utilities.lazyLoad(exports, ["EventRule"], () => require("./eventRule"));

export { EventTransportArgs, EventTransportState } from "./eventTransport";
export type EventTransport = import("./eventTransport").EventTransport;
export const EventTransport: typeof import("./eventTransport").EventTransport = null as any;
utilities.lazyLoad(exports, ["EventTransport"], () => require("./eventTransport"));

export { FlowArgs, FlowState } from "./flow";
export type Flow = import("./flow").Flow;
export const Flow: typeof import("./flow").Flow = null as any;
utilities.lazyLoad(exports, ["Flow"], () => require("./flow"));

export { FlowStageBindingArgs, FlowStageBindingState } from "./flowStageBinding";
export type FlowStageBinding = import("./flowStageBinding").FlowStageBinding;
export const FlowStageBinding: typeof import("./flowStageBinding").FlowStageBinding = null as any;
utilities.lazyLoad(exports, ["FlowStageBinding"], () => require("./flowStageBinding"));

export { GetCertificateKeyPairArgs, GetCertificateKeyPairResult, GetCertificateKeyPairOutputArgs } from "./getCertificateKeyPair";
export const getCertificateKeyPair: typeof import("./getCertificateKeyPair").getCertificateKeyPair = null as any;
export const getCertificateKeyPairOutput: typeof import("./getCertificateKeyPair").getCertificateKeyPairOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateKeyPair","getCertificateKeyPairOutput"], () => require("./getCertificateKeyPair"));

export { GetFlowArgs, GetFlowResult, GetFlowOutputArgs } from "./getFlow";
export const getFlow: typeof import("./getFlow").getFlow = null as any;
export const getFlowOutput: typeof import("./getFlow").getFlowOutput = null as any;
utilities.lazyLoad(exports, ["getFlow","getFlowOutput"], () => require("./getFlow"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetPropertyMappingLdapArgs, GetPropertyMappingLdapResult, GetPropertyMappingLdapOutputArgs } from "./getPropertyMappingLdap";
export const getPropertyMappingLdap: typeof import("./getPropertyMappingLdap").getPropertyMappingLdap = null as any;
export const getPropertyMappingLdapOutput: typeof import("./getPropertyMappingLdap").getPropertyMappingLdapOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyMappingLdap","getPropertyMappingLdapOutput"], () => require("./getPropertyMappingLdap"));

export { GetPropertyMappingSamlArgs, GetPropertyMappingSamlResult, GetPropertyMappingSamlOutputArgs } from "./getPropertyMappingSaml";
export const getPropertyMappingSaml: typeof import("./getPropertyMappingSaml").getPropertyMappingSaml = null as any;
export const getPropertyMappingSamlOutput: typeof import("./getPropertyMappingSaml").getPropertyMappingSamlOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyMappingSaml","getPropertyMappingSamlOutput"], () => require("./getPropertyMappingSaml"));

export { GetPropertyMappingScimArgs, GetPropertyMappingScimResult, GetPropertyMappingScimOutputArgs } from "./getPropertyMappingScim";
export const getPropertyMappingScim: typeof import("./getPropertyMappingScim").getPropertyMappingScim = null as any;
export const getPropertyMappingScimOutput: typeof import("./getPropertyMappingScim").getPropertyMappingScimOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyMappingScim","getPropertyMappingScimOutput"], () => require("./getPropertyMappingScim"));

export { GetProviderOauth2ConfigArgs, GetProviderOauth2ConfigResult, GetProviderOauth2ConfigOutputArgs } from "./getProviderOauth2Config";
export const getProviderOauth2Config: typeof import("./getProviderOauth2Config").getProviderOauth2Config = null as any;
export const getProviderOauth2ConfigOutput: typeof import("./getProviderOauth2Config").getProviderOauth2ConfigOutput = null as any;
utilities.lazyLoad(exports, ["getProviderOauth2Config","getProviderOauth2ConfigOutput"], () => require("./getProviderOauth2Config"));

export { GetProviderSamlMetadataArgs, GetProviderSamlMetadataResult, GetProviderSamlMetadataOutputArgs } from "./getProviderSamlMetadata";
export const getProviderSamlMetadata: typeof import("./getProviderSamlMetadata").getProviderSamlMetadata = null as any;
export const getProviderSamlMetadataOutput: typeof import("./getProviderSamlMetadata").getProviderSamlMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getProviderSamlMetadata","getProviderSamlMetadataOutput"], () => require("./getProviderSamlMetadata"));

export { GetScopeMappingArgs, GetScopeMappingResult, GetScopeMappingOutputArgs } from "./getScopeMapping";
export const getScopeMapping: typeof import("./getScopeMapping").getScopeMapping = null as any;
export const getScopeMappingOutput: typeof import("./getScopeMapping").getScopeMappingOutput = null as any;
utilities.lazyLoad(exports, ["getScopeMapping","getScopeMappingOutput"], () => require("./getScopeMapping"));

export { GetSourceArgs, GetSourceResult, GetSourceOutputArgs } from "./getSource";
export const getSource: typeof import("./getSource").getSource = null as any;
export const getSourceOutput: typeof import("./getSource").getSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSource","getSourceOutput"], () => require("./getSource"));

export { GetStageArgs, GetStageResult, GetStageOutputArgs } from "./getStage";
export const getStage: typeof import("./getStage").getStage = null as any;
export const getStageOutput: typeof import("./getStage").getStageOutput = null as any;
utilities.lazyLoad(exports, ["getStage","getStageOutput"], () => require("./getStage"));

export { GetTenantArgs, GetTenantResult, GetTenantOutputArgs } from "./getTenant";
export const getTenant: typeof import("./getTenant").getTenant = null as any;
export const getTenantOutput: typeof import("./getTenant").getTenantOutput = null as any;
utilities.lazyLoad(exports, ["getTenant","getTenantOutput"], () => require("./getTenant"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { OutpostArgs, OutpostState } from "./outpost";
export type Outpost = import("./outpost").Outpost;
export const Outpost: typeof import("./outpost").Outpost = null as any;
utilities.lazyLoad(exports, ["Outpost"], () => require("./outpost"));

export { PolicyBindingArgs, PolicyBindingState } from "./policyBinding";
export type PolicyBinding = import("./policyBinding").PolicyBinding;
export const PolicyBinding: typeof import("./policyBinding").PolicyBinding = null as any;
utilities.lazyLoad(exports, ["PolicyBinding"], () => require("./policyBinding"));

export { PolicyDummyArgs, PolicyDummyState } from "./policyDummy";
export type PolicyDummy = import("./policyDummy").PolicyDummy;
export const PolicyDummy: typeof import("./policyDummy").PolicyDummy = null as any;
utilities.lazyLoad(exports, ["PolicyDummy"], () => require("./policyDummy"));

export { PolicyEventMatcherArgs, PolicyEventMatcherState } from "./policyEventMatcher";
export type PolicyEventMatcher = import("./policyEventMatcher").PolicyEventMatcher;
export const PolicyEventMatcher: typeof import("./policyEventMatcher").PolicyEventMatcher = null as any;
utilities.lazyLoad(exports, ["PolicyEventMatcher"], () => require("./policyEventMatcher"));

export { PolicyExpiryArgs, PolicyExpiryState } from "./policyExpiry";
export type PolicyExpiry = import("./policyExpiry").PolicyExpiry;
export const PolicyExpiry: typeof import("./policyExpiry").PolicyExpiry = null as any;
utilities.lazyLoad(exports, ["PolicyExpiry"], () => require("./policyExpiry"));

export { PolicyExpressionArgs, PolicyExpressionState } from "./policyExpression";
export type PolicyExpression = import("./policyExpression").PolicyExpression;
export const PolicyExpression: typeof import("./policyExpression").PolicyExpression = null as any;
utilities.lazyLoad(exports, ["PolicyExpression"], () => require("./policyExpression"));

export { PolicyPasswordArgs, PolicyPasswordState } from "./policyPassword";
export type PolicyPassword = import("./policyPassword").PolicyPassword;
export const PolicyPassword: typeof import("./policyPassword").PolicyPassword = null as any;
utilities.lazyLoad(exports, ["PolicyPassword"], () => require("./policyPassword"));

export { PolicyReputationArgs, PolicyReputationState } from "./policyReputation";
export type PolicyReputation = import("./policyReputation").PolicyReputation;
export const PolicyReputation: typeof import("./policyReputation").PolicyReputation = null as any;
utilities.lazyLoad(exports, ["PolicyReputation"], () => require("./policyReputation"));

export { PropertyMappingLdapArgs, PropertyMappingLdapState } from "./propertyMappingLdap";
export type PropertyMappingLdap = import("./propertyMappingLdap").PropertyMappingLdap;
export const PropertyMappingLdap: typeof import("./propertyMappingLdap").PropertyMappingLdap = null as any;
utilities.lazyLoad(exports, ["PropertyMappingLdap"], () => require("./propertyMappingLdap"));

export { PropertyMappingNotificationArgs, PropertyMappingNotificationState } from "./propertyMappingNotification";
export type PropertyMappingNotification = import("./propertyMappingNotification").PropertyMappingNotification;
export const PropertyMappingNotification: typeof import("./propertyMappingNotification").PropertyMappingNotification = null as any;
utilities.lazyLoad(exports, ["PropertyMappingNotification"], () => require("./propertyMappingNotification"));

export { PropertyMappingSamlArgs, PropertyMappingSamlState } from "./propertyMappingSaml";
export type PropertyMappingSaml = import("./propertyMappingSaml").PropertyMappingSaml;
export const PropertyMappingSaml: typeof import("./propertyMappingSaml").PropertyMappingSaml = null as any;
utilities.lazyLoad(exports, ["PropertyMappingSaml"], () => require("./propertyMappingSaml"));

export { PropertyMappingScimArgs, PropertyMappingScimState } from "./propertyMappingScim";
export type PropertyMappingScim = import("./propertyMappingScim").PropertyMappingScim;
export const PropertyMappingScim: typeof import("./propertyMappingScim").PropertyMappingScim = null as any;
utilities.lazyLoad(exports, ["PropertyMappingScim"], () => require("./propertyMappingScim"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ProviderLdapArgs, ProviderLdapState } from "./providerLdap";
export type ProviderLdap = import("./providerLdap").ProviderLdap;
export const ProviderLdap: typeof import("./providerLdap").ProviderLdap = null as any;
utilities.lazyLoad(exports, ["ProviderLdap"], () => require("./providerLdap"));

export { ProviderOauth2Args, ProviderOauth2State } from "./providerOauth2";
export type ProviderOauth2 = import("./providerOauth2").ProviderOauth2;
export const ProviderOauth2: typeof import("./providerOauth2").ProviderOauth2 = null as any;
utilities.lazyLoad(exports, ["ProviderOauth2"], () => require("./providerOauth2"));

export { ProviderProxyArgs, ProviderProxyState } from "./providerProxy";
export type ProviderProxy = import("./providerProxy").ProviderProxy;
export const ProviderProxy: typeof import("./providerProxy").ProviderProxy = null as any;
utilities.lazyLoad(exports, ["ProviderProxy"], () => require("./providerProxy"));

export { ProviderRadiusArgs, ProviderRadiusState } from "./providerRadius";
export type ProviderRadius = import("./providerRadius").ProviderRadius;
export const ProviderRadius: typeof import("./providerRadius").ProviderRadius = null as any;
utilities.lazyLoad(exports, ["ProviderRadius"], () => require("./providerRadius"));

export { ProviderSamlArgs, ProviderSamlState } from "./providerSaml";
export type ProviderSaml = import("./providerSaml").ProviderSaml;
export const ProviderSaml: typeof import("./providerSaml").ProviderSaml = null as any;
utilities.lazyLoad(exports, ["ProviderSaml"], () => require("./providerSaml"));

export { ProviderScimArgs, ProviderScimState } from "./providerScim";
export type ProviderScim = import("./providerScim").ProviderScim;
export const ProviderScim: typeof import("./providerScim").ProviderScim = null as any;
utilities.lazyLoad(exports, ["ProviderScim"], () => require("./providerScim"));

export { ScopeMappingArgs, ScopeMappingState } from "./scopeMapping";
export type ScopeMapping = import("./scopeMapping").ScopeMapping;
export const ScopeMapping: typeof import("./scopeMapping").ScopeMapping = null as any;
utilities.lazyLoad(exports, ["ScopeMapping"], () => require("./scopeMapping"));

export { ServiceConnectionDockerArgs, ServiceConnectionDockerState } from "./serviceConnectionDocker";
export type ServiceConnectionDocker = import("./serviceConnectionDocker").ServiceConnectionDocker;
export const ServiceConnectionDocker: typeof import("./serviceConnectionDocker").ServiceConnectionDocker = null as any;
utilities.lazyLoad(exports, ["ServiceConnectionDocker"], () => require("./serviceConnectionDocker"));

export { ServiceConnectionKubernetesArgs, ServiceConnectionKubernetesState } from "./serviceConnectionKubernetes";
export type ServiceConnectionKubernetes = import("./serviceConnectionKubernetes").ServiceConnectionKubernetes;
export const ServiceConnectionKubernetes: typeof import("./serviceConnectionKubernetes").ServiceConnectionKubernetes = null as any;
utilities.lazyLoad(exports, ["ServiceConnectionKubernetes"], () => require("./serviceConnectionKubernetes"));

export { SourceLdapArgs, SourceLdapState } from "./sourceLdap";
export type SourceLdap = import("./sourceLdap").SourceLdap;
export const SourceLdap: typeof import("./sourceLdap").SourceLdap = null as any;
utilities.lazyLoad(exports, ["SourceLdap"], () => require("./sourceLdap"));

export { SourceOauthArgs, SourceOauthState } from "./sourceOauth";
export type SourceOauth = import("./sourceOauth").SourceOauth;
export const SourceOauth: typeof import("./sourceOauth").SourceOauth = null as any;
utilities.lazyLoad(exports, ["SourceOauth"], () => require("./sourceOauth"));

export { SourcePlexArgs, SourcePlexState } from "./sourcePlex";
export type SourcePlex = import("./sourcePlex").SourcePlex;
export const SourcePlex: typeof import("./sourcePlex").SourcePlex = null as any;
utilities.lazyLoad(exports, ["SourcePlex"], () => require("./sourcePlex"));

export { SourceSamlArgs, SourceSamlState } from "./sourceSaml";
export type SourceSaml = import("./sourceSaml").SourceSaml;
export const SourceSaml: typeof import("./sourceSaml").SourceSaml = null as any;
utilities.lazyLoad(exports, ["SourceSaml"], () => require("./sourceSaml"));

export { StageAuthenticatorDuoArgs, StageAuthenticatorDuoState } from "./stageAuthenticatorDuo";
export type StageAuthenticatorDuo = import("./stageAuthenticatorDuo").StageAuthenticatorDuo;
export const StageAuthenticatorDuo: typeof import("./stageAuthenticatorDuo").StageAuthenticatorDuo = null as any;
utilities.lazyLoad(exports, ["StageAuthenticatorDuo"], () => require("./stageAuthenticatorDuo"));

export { StageAuthenticatorSmsArgs, StageAuthenticatorSmsState } from "./stageAuthenticatorSms";
export type StageAuthenticatorSms = import("./stageAuthenticatorSms").StageAuthenticatorSms;
export const StageAuthenticatorSms: typeof import("./stageAuthenticatorSms").StageAuthenticatorSms = null as any;
utilities.lazyLoad(exports, ["StageAuthenticatorSms"], () => require("./stageAuthenticatorSms"));

export { StageAuthenticatorStaticArgs, StageAuthenticatorStaticState } from "./stageAuthenticatorStatic";
export type StageAuthenticatorStatic = import("./stageAuthenticatorStatic").StageAuthenticatorStatic;
export const StageAuthenticatorStatic: typeof import("./stageAuthenticatorStatic").StageAuthenticatorStatic = null as any;
utilities.lazyLoad(exports, ["StageAuthenticatorStatic"], () => require("./stageAuthenticatorStatic"));

export { StageAuthenticatorTotpArgs, StageAuthenticatorTotpState } from "./stageAuthenticatorTotp";
export type StageAuthenticatorTotp = import("./stageAuthenticatorTotp").StageAuthenticatorTotp;
export const StageAuthenticatorTotp: typeof import("./stageAuthenticatorTotp").StageAuthenticatorTotp = null as any;
utilities.lazyLoad(exports, ["StageAuthenticatorTotp"], () => require("./stageAuthenticatorTotp"));

export { StageAuthenticatorValidateArgs, StageAuthenticatorValidateState } from "./stageAuthenticatorValidate";
export type StageAuthenticatorValidate = import("./stageAuthenticatorValidate").StageAuthenticatorValidate;
export const StageAuthenticatorValidate: typeof import("./stageAuthenticatorValidate").StageAuthenticatorValidate = null as any;
utilities.lazyLoad(exports, ["StageAuthenticatorValidate"], () => require("./stageAuthenticatorValidate"));

export { StageAuthenticatorWebauthnArgs, StageAuthenticatorWebauthnState } from "./stageAuthenticatorWebauthn";
export type StageAuthenticatorWebauthn = import("./stageAuthenticatorWebauthn").StageAuthenticatorWebauthn;
export const StageAuthenticatorWebauthn: typeof import("./stageAuthenticatorWebauthn").StageAuthenticatorWebauthn = null as any;
utilities.lazyLoad(exports, ["StageAuthenticatorWebauthn"], () => require("./stageAuthenticatorWebauthn"));

export { StageCaptchaArgs, StageCaptchaState } from "./stageCaptcha";
export type StageCaptcha = import("./stageCaptcha").StageCaptcha;
export const StageCaptcha: typeof import("./stageCaptcha").StageCaptcha = null as any;
utilities.lazyLoad(exports, ["StageCaptcha"], () => require("./stageCaptcha"));

export { StageConsentArgs, StageConsentState } from "./stageConsent";
export type StageConsent = import("./stageConsent").StageConsent;
export const StageConsent: typeof import("./stageConsent").StageConsent = null as any;
utilities.lazyLoad(exports, ["StageConsent"], () => require("./stageConsent"));

export { StageDenyArgs, StageDenyState } from "./stageDeny";
export type StageDeny = import("./stageDeny").StageDeny;
export const StageDeny: typeof import("./stageDeny").StageDeny = null as any;
utilities.lazyLoad(exports, ["StageDeny"], () => require("./stageDeny"));

export { StageDummyArgs, StageDummyState } from "./stageDummy";
export type StageDummy = import("./stageDummy").StageDummy;
export const StageDummy: typeof import("./stageDummy").StageDummy = null as any;
utilities.lazyLoad(exports, ["StageDummy"], () => require("./stageDummy"));

export { StageEmailArgs, StageEmailState } from "./stageEmail";
export type StageEmail = import("./stageEmail").StageEmail;
export const StageEmail: typeof import("./stageEmail").StageEmail = null as any;
utilities.lazyLoad(exports, ["StageEmail"], () => require("./stageEmail"));

export { StageIdentificationArgs, StageIdentificationState } from "./stageIdentification";
export type StageIdentification = import("./stageIdentification").StageIdentification;
export const StageIdentification: typeof import("./stageIdentification").StageIdentification = null as any;
utilities.lazyLoad(exports, ["StageIdentification"], () => require("./stageIdentification"));

export { StageInvitationArgs, StageInvitationState } from "./stageInvitation";
export type StageInvitation = import("./stageInvitation").StageInvitation;
export const StageInvitation: typeof import("./stageInvitation").StageInvitation = null as any;
utilities.lazyLoad(exports, ["StageInvitation"], () => require("./stageInvitation"));

export { StagePasswordArgs, StagePasswordState } from "./stagePassword";
export type StagePassword = import("./stagePassword").StagePassword;
export const StagePassword: typeof import("./stagePassword").StagePassword = null as any;
utilities.lazyLoad(exports, ["StagePassword"], () => require("./stagePassword"));

export { StagePromptArgs, StagePromptState } from "./stagePrompt";
export type StagePrompt = import("./stagePrompt").StagePrompt;
export const StagePrompt: typeof import("./stagePrompt").StagePrompt = null as any;
utilities.lazyLoad(exports, ["StagePrompt"], () => require("./stagePrompt"));

export { StagePromptFieldArgs, StagePromptFieldState } from "./stagePromptField";
export type StagePromptField = import("./stagePromptField").StagePromptField;
export const StagePromptField: typeof import("./stagePromptField").StagePromptField = null as any;
utilities.lazyLoad(exports, ["StagePromptField"], () => require("./stagePromptField"));

export { StageUserDeleteArgs, StageUserDeleteState } from "./stageUserDelete";
export type StageUserDelete = import("./stageUserDelete").StageUserDelete;
export const StageUserDelete: typeof import("./stageUserDelete").StageUserDelete = null as any;
utilities.lazyLoad(exports, ["StageUserDelete"], () => require("./stageUserDelete"));

export { StageUserLoginArgs, StageUserLoginState } from "./stageUserLogin";
export type StageUserLogin = import("./stageUserLogin").StageUserLogin;
export const StageUserLogin: typeof import("./stageUserLogin").StageUserLogin = null as any;
utilities.lazyLoad(exports, ["StageUserLogin"], () => require("./stageUserLogin"));

export { StageUserLogoutArgs, StageUserLogoutState } from "./stageUserLogout";
export type StageUserLogout = import("./stageUserLogout").StageUserLogout;
export const StageUserLogout: typeof import("./stageUserLogout").StageUserLogout = null as any;
utilities.lazyLoad(exports, ["StageUserLogout"], () => require("./stageUserLogout"));

export { StageUserWriteArgs, StageUserWriteState } from "./stageUserWrite";
export type StageUserWrite = import("./stageUserWrite").StageUserWrite;
export const StageUserWrite: typeof import("./stageUserWrite").StageUserWrite = null as any;
utilities.lazyLoad(exports, ["StageUserWrite"], () => require("./stageUserWrite"));

export { TenantArgs, TenantState } from "./tenant";
export type Tenant = import("./tenant").Tenant;
export const Tenant: typeof import("./tenant").Tenant = null as any;
utilities.lazyLoad(exports, ["Tenant"], () => require("./tenant"));

export { TokenArgs, TokenState } from "./token";
export type Token = import("./token").Token;
export const Token: typeof import("./token").Token = null as any;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "authentik:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "authentik:index/blueprint:Blueprint":
                return new Blueprint(name, <any>undefined, { urn })
            case "authentik:index/certificateKeyPair:CertificateKeyPair":
                return new CertificateKeyPair(name, <any>undefined, { urn })
            case "authentik:index/enterpriseLicense:EnterpriseLicense":
                return new EnterpriseLicense(name, <any>undefined, { urn })
            case "authentik:index/eventRule:EventRule":
                return new EventRule(name, <any>undefined, { urn })
            case "authentik:index/eventTransport:EventTransport":
                return new EventTransport(name, <any>undefined, { urn })
            case "authentik:index/flow:Flow":
                return new Flow(name, <any>undefined, { urn })
            case "authentik:index/flowStageBinding:FlowStageBinding":
                return new FlowStageBinding(name, <any>undefined, { urn })
            case "authentik:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "authentik:index/outpost:Outpost":
                return new Outpost(name, <any>undefined, { urn })
            case "authentik:index/policyBinding:PolicyBinding":
                return new PolicyBinding(name, <any>undefined, { urn })
            case "authentik:index/policyDummy:PolicyDummy":
                return new PolicyDummy(name, <any>undefined, { urn })
            case "authentik:index/policyEventMatcher:PolicyEventMatcher":
                return new PolicyEventMatcher(name, <any>undefined, { urn })
            case "authentik:index/policyExpiry:PolicyExpiry":
                return new PolicyExpiry(name, <any>undefined, { urn })
            case "authentik:index/policyExpression:PolicyExpression":
                return new PolicyExpression(name, <any>undefined, { urn })
            case "authentik:index/policyPassword:PolicyPassword":
                return new PolicyPassword(name, <any>undefined, { urn })
            case "authentik:index/policyReputation:PolicyReputation":
                return new PolicyReputation(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingLdap:PropertyMappingLdap":
                return new PropertyMappingLdap(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingNotification:PropertyMappingNotification":
                return new PropertyMappingNotification(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingSaml:PropertyMappingSaml":
                return new PropertyMappingSaml(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingScim:PropertyMappingScim":
                return new PropertyMappingScim(name, <any>undefined, { urn })
            case "authentik:index/providerLdap:ProviderLdap":
                return new ProviderLdap(name, <any>undefined, { urn })
            case "authentik:index/providerOauth2:ProviderOauth2":
                return new ProviderOauth2(name, <any>undefined, { urn })
            case "authentik:index/providerProxy:ProviderProxy":
                return new ProviderProxy(name, <any>undefined, { urn })
            case "authentik:index/providerRadius:ProviderRadius":
                return new ProviderRadius(name, <any>undefined, { urn })
            case "authentik:index/providerSaml:ProviderSaml":
                return new ProviderSaml(name, <any>undefined, { urn })
            case "authentik:index/providerScim:ProviderScim":
                return new ProviderScim(name, <any>undefined, { urn })
            case "authentik:index/scopeMapping:ScopeMapping":
                return new ScopeMapping(name, <any>undefined, { urn })
            case "authentik:index/serviceConnectionDocker:ServiceConnectionDocker":
                return new ServiceConnectionDocker(name, <any>undefined, { urn })
            case "authentik:index/serviceConnectionKubernetes:ServiceConnectionKubernetes":
                return new ServiceConnectionKubernetes(name, <any>undefined, { urn })
            case "authentik:index/sourceLdap:SourceLdap":
                return new SourceLdap(name, <any>undefined, { urn })
            case "authentik:index/sourceOauth:SourceOauth":
                return new SourceOauth(name, <any>undefined, { urn })
            case "authentik:index/sourcePlex:SourcePlex":
                return new SourcePlex(name, <any>undefined, { urn })
            case "authentik:index/sourceSaml:SourceSaml":
                return new SourceSaml(name, <any>undefined, { urn })
            case "authentik:index/stageAuthenticatorDuo:StageAuthenticatorDuo":
                return new StageAuthenticatorDuo(name, <any>undefined, { urn })
            case "authentik:index/stageAuthenticatorSms:StageAuthenticatorSms":
                return new StageAuthenticatorSms(name, <any>undefined, { urn })
            case "authentik:index/stageAuthenticatorStatic:StageAuthenticatorStatic":
                return new StageAuthenticatorStatic(name, <any>undefined, { urn })
            case "authentik:index/stageAuthenticatorTotp:StageAuthenticatorTotp":
                return new StageAuthenticatorTotp(name, <any>undefined, { urn })
            case "authentik:index/stageAuthenticatorValidate:StageAuthenticatorValidate":
                return new StageAuthenticatorValidate(name, <any>undefined, { urn })
            case "authentik:index/stageAuthenticatorWebauthn:StageAuthenticatorWebauthn":
                return new StageAuthenticatorWebauthn(name, <any>undefined, { urn })
            case "authentik:index/stageCaptcha:StageCaptcha":
                return new StageCaptcha(name, <any>undefined, { urn })
            case "authentik:index/stageConsent:StageConsent":
                return new StageConsent(name, <any>undefined, { urn })
            case "authentik:index/stageDeny:StageDeny":
                return new StageDeny(name, <any>undefined, { urn })
            case "authentik:index/stageDummy:StageDummy":
                return new StageDummy(name, <any>undefined, { urn })
            case "authentik:index/stageEmail:StageEmail":
                return new StageEmail(name, <any>undefined, { urn })
            case "authentik:index/stageIdentification:StageIdentification":
                return new StageIdentification(name, <any>undefined, { urn })
            case "authentik:index/stageInvitation:StageInvitation":
                return new StageInvitation(name, <any>undefined, { urn })
            case "authentik:index/stagePassword:StagePassword":
                return new StagePassword(name, <any>undefined, { urn })
            case "authentik:index/stagePrompt:StagePrompt":
                return new StagePrompt(name, <any>undefined, { urn })
            case "authentik:index/stagePromptField:StagePromptField":
                return new StagePromptField(name, <any>undefined, { urn })
            case "authentik:index/stageUserDelete:StageUserDelete":
                return new StageUserDelete(name, <any>undefined, { urn })
            case "authentik:index/stageUserLogin:StageUserLogin":
                return new StageUserLogin(name, <any>undefined, { urn })
            case "authentik:index/stageUserLogout:StageUserLogout":
                return new StageUserLogout(name, <any>undefined, { urn })
            case "authentik:index/stageUserWrite:StageUserWrite":
                return new StageUserWrite(name, <any>undefined, { urn })
            case "authentik:index/tenant:Tenant":
                return new Tenant(name, <any>undefined, { urn })
            case "authentik:index/token:Token":
                return new Token(name, <any>undefined, { urn })
            case "authentik:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("authentik", "index/application", _module)
pulumi.runtime.registerResourceModule("authentik", "index/blueprint", _module)
pulumi.runtime.registerResourceModule("authentik", "index/certificateKeyPair", _module)
pulumi.runtime.registerResourceModule("authentik", "index/enterpriseLicense", _module)
pulumi.runtime.registerResourceModule("authentik", "index/eventRule", _module)
pulumi.runtime.registerResourceModule("authentik", "index/eventTransport", _module)
pulumi.runtime.registerResourceModule("authentik", "index/flow", _module)
pulumi.runtime.registerResourceModule("authentik", "index/flowStageBinding", _module)
pulumi.runtime.registerResourceModule("authentik", "index/group", _module)
pulumi.runtime.registerResourceModule("authentik", "index/outpost", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyBinding", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyDummy", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyEventMatcher", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyExpiry", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyExpression", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyPassword", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyReputation", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingLdap", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingNotification", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSaml", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingScim", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerLdap", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerOauth2", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerProxy", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerRadius", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerSaml", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerScim", _module)
pulumi.runtime.registerResourceModule("authentik", "index/scopeMapping", _module)
pulumi.runtime.registerResourceModule("authentik", "index/serviceConnectionDocker", _module)
pulumi.runtime.registerResourceModule("authentik", "index/serviceConnectionKubernetes", _module)
pulumi.runtime.registerResourceModule("authentik", "index/sourceLdap", _module)
pulumi.runtime.registerResourceModule("authentik", "index/sourceOauth", _module)
pulumi.runtime.registerResourceModule("authentik", "index/sourcePlex", _module)
pulumi.runtime.registerResourceModule("authentik", "index/sourceSaml", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorDuo", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorSms", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorStatic", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorTotp", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorValidate", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorWebauthn", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageCaptcha", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageConsent", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageDeny", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageDummy", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageEmail", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageIdentification", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageInvitation", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stagePassword", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stagePrompt", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stagePromptField", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageUserDelete", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageUserLogin", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageUserLogout", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageUserWrite", _module)
pulumi.runtime.registerResourceModule("authentik", "index/tenant", _module)
pulumi.runtime.registerResourceModule("authentik", "index/token", _module)
pulumi.runtime.registerResourceModule("authentik", "index/user", _module)
pulumi.runtime.registerResourcePackage("authentik", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:authentik") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
