// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as authentik from "@osmit-gmbh/pulumi-authentik";
 * import * as authentik from "@pulumi/authentik";
 *
 * const default-authorization-flow = authentik.getFlow({
 *     slug: "default-provider-authorization-implicit-consent",
 * });
 * const nameSourceOauth = new authentik.SourceOauth("nameSourceOauth", {
 *     slug: "test",
 *     authenticationFlow: default_authorization_flow.then(default_authorization_flow => default_authorization_flow.id),
 *     enrollmentFlow: default_authorization_flow.then(default_authorization_flow => default_authorization_flow.id),
 *     providerType: "discord",
 *     consumerKey: "foo",
 *     consumerSecret: "bar",
 * });
 * const nameStagePassword = new authentik.StagePassword("nameStagePassword", {backends: ["authentik.core.auth.InbuiltBackend"]});
 * const nameStageIdentification = new authentik.StageIdentification("nameStageIdentification", {
 *     userFields: ["username"],
 *     sources: [nameSourceOauth.uuid],
 *     passwordStage: nameStagePassword.id,
 * });
 * ```
 */
export class StageIdentification extends pulumi.CustomResource {
    /**
     * Get an existing StageIdentification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StageIdentificationState, opts?: pulumi.CustomResourceOptions): StageIdentification {
        return new StageIdentification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/stageIdentification:StageIdentification';

    /**
     * Returns true if the given object is an instance of StageIdentification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StageIdentification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StageIdentification.__pulumiType;
    }

    public readonly caseInsensitiveMatching!: pulumi.Output<boolean | undefined>;
    public readonly enrollmentFlow!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly passwordStage!: pulumi.Output<string | undefined>;
    public readonly passwordlessFlow!: pulumi.Output<string | undefined>;
    public readonly recoveryFlow!: pulumi.Output<string | undefined>;
    /**
     * Defaults to `true`.
     */
    public readonly showMatchedUser!: pulumi.Output<boolean | undefined>;
    /**
     * Defaults to `false`.
     */
    public readonly showSourceLabels!: pulumi.Output<boolean | undefined>;
    public readonly sources!: pulumi.Output<string[] | undefined>;
    public readonly userFields!: pulumi.Output<string[] | undefined>;

    /**
     * Create a StageIdentification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StageIdentificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StageIdentificationArgs | StageIdentificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StageIdentificationState | undefined;
            resourceInputs["caseInsensitiveMatching"] = state ? state.caseInsensitiveMatching : undefined;
            resourceInputs["enrollmentFlow"] = state ? state.enrollmentFlow : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passwordStage"] = state ? state.passwordStage : undefined;
            resourceInputs["passwordlessFlow"] = state ? state.passwordlessFlow : undefined;
            resourceInputs["recoveryFlow"] = state ? state.recoveryFlow : undefined;
            resourceInputs["showMatchedUser"] = state ? state.showMatchedUser : undefined;
            resourceInputs["showSourceLabels"] = state ? state.showSourceLabels : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["userFields"] = state ? state.userFields : undefined;
        } else {
            const args = argsOrState as StageIdentificationArgs | undefined;
            resourceInputs["caseInsensitiveMatching"] = args ? args.caseInsensitiveMatching : undefined;
            resourceInputs["enrollmentFlow"] = args ? args.enrollmentFlow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passwordStage"] = args ? args.passwordStage : undefined;
            resourceInputs["passwordlessFlow"] = args ? args.passwordlessFlow : undefined;
            resourceInputs["recoveryFlow"] = args ? args.recoveryFlow : undefined;
            resourceInputs["showMatchedUser"] = args ? args.showMatchedUser : undefined;
            resourceInputs["showSourceLabels"] = args ? args.showSourceLabels : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["userFields"] = args ? args.userFields : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StageIdentification.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StageIdentification resources.
 */
export interface StageIdentificationState {
    caseInsensitiveMatching?: pulumi.Input<boolean>;
    enrollmentFlow?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    passwordStage?: pulumi.Input<string>;
    passwordlessFlow?: pulumi.Input<string>;
    recoveryFlow?: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    showMatchedUser?: pulumi.Input<boolean>;
    /**
     * Defaults to `false`.
     */
    showSourceLabels?: pulumi.Input<boolean>;
    sources?: pulumi.Input<pulumi.Input<string>[]>;
    userFields?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a StageIdentification resource.
 */
export interface StageIdentificationArgs {
    caseInsensitiveMatching?: pulumi.Input<boolean>;
    enrollmentFlow?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    passwordStage?: pulumi.Input<string>;
    passwordlessFlow?: pulumi.Input<string>;
    recoveryFlow?: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    showMatchedUser?: pulumi.Input<boolean>;
    /**
     * Defaults to `false`.
     */
    showSourceLabels?: pulumi.Input<boolean>;
    sources?: pulumi.Input<pulumi.Input<string>[]>;
    userFields?: pulumi.Input<pulumi.Input<string>[]>;
}
