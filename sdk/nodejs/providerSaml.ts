// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ProviderSaml extends pulumi.CustomResource {
    /**
     * Get an existing ProviderSaml resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProviderSamlState, opts?: pulumi.CustomResourceOptions): ProviderSaml {
        return new ProviderSaml(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/providerSaml:ProviderSaml';

    /**
     * Returns true if the given object is an instance of ProviderSaml.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProviderSaml {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderSaml.__pulumiType;
    }

    public readonly acsUrl!: pulumi.Output<string>;
    public readonly assertionValidNotBefore!: pulumi.Output<string | undefined>;
    public readonly assertionValidNotOnOrAfter!: pulumi.Output<string | undefined>;
    public readonly audience!: pulumi.Output<string | undefined>;
    public readonly authenticationFlow!: pulumi.Output<string | undefined>;
    public readonly authorizationFlow!: pulumi.Output<string>;
    public readonly digestAlgorithm!: pulumi.Output<string | undefined>;
    public readonly issuer!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameIdMapping!: pulumi.Output<string | undefined>;
    public readonly propertyMappings!: pulumi.Output<string[] | undefined>;
    public readonly sessionValidNotOnOrAfter!: pulumi.Output<string | undefined>;
    public readonly signatureAlgorithm!: pulumi.Output<string | undefined>;
    public readonly signingKp!: pulumi.Output<string | undefined>;
    public readonly spBinding!: pulumi.Output<string | undefined>;
    public readonly urlSloPost!: pulumi.Output<string>;
    public readonly urlSloRedirect!: pulumi.Output<string>;
    public readonly urlSsoInit!: pulumi.Output<string>;
    public readonly urlSsoPost!: pulumi.Output<string>;
    public readonly urlSsoRedirect!: pulumi.Output<string>;
    public readonly verificationKp!: pulumi.Output<string | undefined>;

    /**
     * Create a ProviderSaml resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderSamlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProviderSamlArgs | ProviderSamlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProviderSamlState | undefined;
            resourceInputs["acsUrl"] = state ? state.acsUrl : undefined;
            resourceInputs["assertionValidNotBefore"] = state ? state.assertionValidNotBefore : undefined;
            resourceInputs["assertionValidNotOnOrAfter"] = state ? state.assertionValidNotOnOrAfter : undefined;
            resourceInputs["audience"] = state ? state.audience : undefined;
            resourceInputs["authenticationFlow"] = state ? state.authenticationFlow : undefined;
            resourceInputs["authorizationFlow"] = state ? state.authorizationFlow : undefined;
            resourceInputs["digestAlgorithm"] = state ? state.digestAlgorithm : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameIdMapping"] = state ? state.nameIdMapping : undefined;
            resourceInputs["propertyMappings"] = state ? state.propertyMappings : undefined;
            resourceInputs["sessionValidNotOnOrAfter"] = state ? state.sessionValidNotOnOrAfter : undefined;
            resourceInputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            resourceInputs["signingKp"] = state ? state.signingKp : undefined;
            resourceInputs["spBinding"] = state ? state.spBinding : undefined;
            resourceInputs["urlSloPost"] = state ? state.urlSloPost : undefined;
            resourceInputs["urlSloRedirect"] = state ? state.urlSloRedirect : undefined;
            resourceInputs["urlSsoInit"] = state ? state.urlSsoInit : undefined;
            resourceInputs["urlSsoPost"] = state ? state.urlSsoPost : undefined;
            resourceInputs["urlSsoRedirect"] = state ? state.urlSsoRedirect : undefined;
            resourceInputs["verificationKp"] = state ? state.verificationKp : undefined;
        } else {
            const args = argsOrState as ProviderSamlArgs | undefined;
            if ((!args || args.acsUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acsUrl'");
            }
            if ((!args || args.authorizationFlow === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizationFlow'");
            }
            resourceInputs["acsUrl"] = args ? args.acsUrl : undefined;
            resourceInputs["assertionValidNotBefore"] = args ? args.assertionValidNotBefore : undefined;
            resourceInputs["assertionValidNotOnOrAfter"] = args ? args.assertionValidNotOnOrAfter : undefined;
            resourceInputs["audience"] = args ? args.audience : undefined;
            resourceInputs["authenticationFlow"] = args ? args.authenticationFlow : undefined;
            resourceInputs["authorizationFlow"] = args ? args.authorizationFlow : undefined;
            resourceInputs["digestAlgorithm"] = args ? args.digestAlgorithm : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameIdMapping"] = args ? args.nameIdMapping : undefined;
            resourceInputs["propertyMappings"] = args ? args.propertyMappings : undefined;
            resourceInputs["sessionValidNotOnOrAfter"] = args ? args.sessionValidNotOnOrAfter : undefined;
            resourceInputs["signatureAlgorithm"] = args ? args.signatureAlgorithm : undefined;
            resourceInputs["signingKp"] = args ? args.signingKp : undefined;
            resourceInputs["spBinding"] = args ? args.spBinding : undefined;
            resourceInputs["urlSloPost"] = args ? args.urlSloPost : undefined;
            resourceInputs["urlSloRedirect"] = args ? args.urlSloRedirect : undefined;
            resourceInputs["urlSsoInit"] = args ? args.urlSsoInit : undefined;
            resourceInputs["urlSsoPost"] = args ? args.urlSsoPost : undefined;
            resourceInputs["urlSsoRedirect"] = args ? args.urlSsoRedirect : undefined;
            resourceInputs["verificationKp"] = args ? args.verificationKp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProviderSaml.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProviderSaml resources.
 */
export interface ProviderSamlState {
    acsUrl?: pulumi.Input<string>;
    assertionValidNotBefore?: pulumi.Input<string>;
    assertionValidNotOnOrAfter?: pulumi.Input<string>;
    audience?: pulumi.Input<string>;
    authenticationFlow?: pulumi.Input<string>;
    authorizationFlow?: pulumi.Input<string>;
    digestAlgorithm?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameIdMapping?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    sessionValidNotOnOrAfter?: pulumi.Input<string>;
    signatureAlgorithm?: pulumi.Input<string>;
    signingKp?: pulumi.Input<string>;
    spBinding?: pulumi.Input<string>;
    urlSloPost?: pulumi.Input<string>;
    urlSloRedirect?: pulumi.Input<string>;
    urlSsoInit?: pulumi.Input<string>;
    urlSsoPost?: pulumi.Input<string>;
    urlSsoRedirect?: pulumi.Input<string>;
    verificationKp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProviderSaml resource.
 */
export interface ProviderSamlArgs {
    acsUrl: pulumi.Input<string>;
    assertionValidNotBefore?: pulumi.Input<string>;
    assertionValidNotOnOrAfter?: pulumi.Input<string>;
    audience?: pulumi.Input<string>;
    authenticationFlow?: pulumi.Input<string>;
    authorizationFlow: pulumi.Input<string>;
    digestAlgorithm?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameIdMapping?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    sessionValidNotOnOrAfter?: pulumi.Input<string>;
    signatureAlgorithm?: pulumi.Input<string>;
    signingKp?: pulumi.Input<string>;
    spBinding?: pulumi.Input<string>;
    urlSloPost?: pulumi.Input<string>;
    urlSloRedirect?: pulumi.Input<string>;
    urlSsoInit?: pulumi.Input<string>;
    urlSsoPost?: pulumi.Input<string>;
    urlSsoRedirect?: pulumi.Input<string>;
    verificationKp?: pulumi.Input<string>;
}
