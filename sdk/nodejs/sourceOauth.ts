// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SourceOauth extends pulumi.CustomResource {
    /**
     * Get an existing SourceOauth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourceOauthState, opts?: pulumi.CustomResourceOptions): SourceOauth {
        return new SourceOauth(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/sourceOauth:SourceOauth';

    /**
     * Returns true if the given object is an instance of SourceOauth.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourceOauth {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceOauth.__pulumiType;
    }

    /**
     * Only required for OAuth1.
     */
    public readonly accessTokenUrl!: pulumi.Output<string | undefined>;
    public readonly additionalScopes!: pulumi.Output<string | undefined>;
    public readonly authenticationFlow!: pulumi.Output<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    public readonly authorizationUrl!: pulumi.Output<string | undefined>;
    public /*out*/ readonly callbackUri!: pulumi.Output<string>;
    public readonly consumerKey!: pulumi.Output<string>;
    public readonly consumerSecret!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly enrollmentFlow!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
     * pass objects.
     */
    public readonly oidcJwks!: pulumi.Output<string>;
    /**
     * Automatically configure JWKS if not specified by `oidc_well_known_url`.
     */
    public readonly oidcJwksUrl!: pulumi.Output<string | undefined>;
    /**
     * Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
     * `.well-known/openid-configuration`.
     */
    public readonly oidcWellKnownUrl!: pulumi.Output<string | undefined>;
    public readonly policyEngineMode!: pulumi.Output<string | undefined>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    public readonly profileUrl!: pulumi.Output<string | undefined>;
    public readonly providerType!: pulumi.Output<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    public readonly requestTokenUrl!: pulumi.Output<string | undefined>;
    public readonly slug!: pulumi.Output<string>;
    public readonly userMatchingMode!: pulumi.Output<string | undefined>;
    public readonly userPathTemplate!: pulumi.Output<string | undefined>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SourceOauth resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourceOauthArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourceOauthArgs | SourceOauthState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourceOauthState | undefined;
            resourceInputs["accessTokenUrl"] = state ? state.accessTokenUrl : undefined;
            resourceInputs["additionalScopes"] = state ? state.additionalScopes : undefined;
            resourceInputs["authenticationFlow"] = state ? state.authenticationFlow : undefined;
            resourceInputs["authorizationUrl"] = state ? state.authorizationUrl : undefined;
            resourceInputs["callbackUri"] = state ? state.callbackUri : undefined;
            resourceInputs["consumerKey"] = state ? state.consumerKey : undefined;
            resourceInputs["consumerSecret"] = state ? state.consumerSecret : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["enrollmentFlow"] = state ? state.enrollmentFlow : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oidcJwks"] = state ? state.oidcJwks : undefined;
            resourceInputs["oidcJwksUrl"] = state ? state.oidcJwksUrl : undefined;
            resourceInputs["oidcWellKnownUrl"] = state ? state.oidcWellKnownUrl : undefined;
            resourceInputs["policyEngineMode"] = state ? state.policyEngineMode : undefined;
            resourceInputs["profileUrl"] = state ? state.profileUrl : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["requestTokenUrl"] = state ? state.requestTokenUrl : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["userMatchingMode"] = state ? state.userMatchingMode : undefined;
            resourceInputs["userPathTemplate"] = state ? state.userPathTemplate : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SourceOauthArgs | undefined;
            if ((!args || args.authenticationFlow === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationFlow'");
            }
            if ((!args || args.consumerKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerKey'");
            }
            if ((!args || args.consumerSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerSecret'");
            }
            if ((!args || args.enrollmentFlow === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enrollmentFlow'");
            }
            if ((!args || args.providerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerType'");
            }
            if ((!args || args.slug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["accessTokenUrl"] = args ? args.accessTokenUrl : undefined;
            resourceInputs["additionalScopes"] = args ? args.additionalScopes : undefined;
            resourceInputs["authenticationFlow"] = args ? args.authenticationFlow : undefined;
            resourceInputs["authorizationUrl"] = args ? args.authorizationUrl : undefined;
            resourceInputs["consumerKey"] = args ? args.consumerKey : undefined;
            resourceInputs["consumerSecret"] = args?.consumerSecret ? pulumi.secret(args.consumerSecret) : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["enrollmentFlow"] = args ? args.enrollmentFlow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oidcJwks"] = args ? args.oidcJwks : undefined;
            resourceInputs["oidcJwksUrl"] = args ? args.oidcJwksUrl : undefined;
            resourceInputs["oidcWellKnownUrl"] = args ? args.oidcWellKnownUrl : undefined;
            resourceInputs["policyEngineMode"] = args ? args.policyEngineMode : undefined;
            resourceInputs["profileUrl"] = args ? args.profileUrl : undefined;
            resourceInputs["providerType"] = args ? args.providerType : undefined;
            resourceInputs["requestTokenUrl"] = args ? args.requestTokenUrl : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["userMatchingMode"] = args ? args.userMatchingMode : undefined;
            resourceInputs["userPathTemplate"] = args ? args.userPathTemplate : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["callbackUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["consumerSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SourceOauth.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SourceOauth resources.
 */
export interface SourceOauthState {
    /**
     * Only required for OAuth1.
     */
    accessTokenUrl?: pulumi.Input<string>;
    additionalScopes?: pulumi.Input<string>;
    authenticationFlow?: pulumi.Input<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    authorizationUrl?: pulumi.Input<string>;
    callbackUri?: pulumi.Input<string>;
    consumerKey?: pulumi.Input<string>;
    consumerSecret?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    enrollmentFlow?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
     * pass objects.
     */
    oidcJwks?: pulumi.Input<string>;
    /**
     * Automatically configure JWKS if not specified by `oidc_well_known_url`.
     */
    oidcJwksUrl?: pulumi.Input<string>;
    /**
     * Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
     * `.well-known/openid-configuration`.
     */
    oidcWellKnownUrl?: pulumi.Input<string>;
    policyEngineMode?: pulumi.Input<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    profileUrl?: pulumi.Input<string>;
    providerType?: pulumi.Input<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    requestTokenUrl?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    userMatchingMode?: pulumi.Input<string>;
    userPathTemplate?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SourceOauth resource.
 */
export interface SourceOauthArgs {
    /**
     * Only required for OAuth1.
     */
    accessTokenUrl?: pulumi.Input<string>;
    additionalScopes?: pulumi.Input<string>;
    authenticationFlow: pulumi.Input<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    authorizationUrl?: pulumi.Input<string>;
    consumerKey: pulumi.Input<string>;
    consumerSecret: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    enrollmentFlow: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
     * pass objects.
     */
    oidcJwks?: pulumi.Input<string>;
    /**
     * Automatically configure JWKS if not specified by `oidc_well_known_url`.
     */
    oidcJwksUrl?: pulumi.Input<string>;
    /**
     * Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
     * `.well-known/openid-configuration`.
     */
    oidcWellKnownUrl?: pulumi.Input<string>;
    policyEngineMode?: pulumi.Input<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    profileUrl?: pulumi.Input<string>;
    providerType: pulumi.Input<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    requestTokenUrl?: pulumi.Input<string>;
    slug: pulumi.Input<string>;
    userMatchingMode?: pulumi.Input<string>;
    userPathTemplate?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
