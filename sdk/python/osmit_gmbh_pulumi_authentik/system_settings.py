# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SystemSettingsArgs', 'SystemSettings']

@pulumi.input_type
class SystemSettingsArgs:
    def __init__(__self__, *,
                 avatars: Optional[pulumi.Input[str]] = None,
                 default_token_duration: Optional[pulumi.Input[str]] = None,
                 default_token_length: Optional[pulumi.Input[int]] = None,
                 default_user_change_email: Optional[pulumi.Input[bool]] = None,
                 default_user_change_name: Optional[pulumi.Input[bool]] = None,
                 default_user_change_username: Optional[pulumi.Input[bool]] = None,
                 event_retention: Optional[pulumi.Input[str]] = None,
                 footer_links: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 gdpr_compliance: Optional[pulumi.Input[bool]] = None,
                 impersonation: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a SystemSettings resource.
        :param pulumi.Input[str] avatars: Defaults to `gravatar,initials`.
        :param pulumi.Input[str] default_token_duration: Defaults to `minutes=30`.
        :param pulumi.Input[int] default_token_length: Defaults to `60`.
        :param pulumi.Input[bool] default_user_change_email: Defaults to `false`.
        :param pulumi.Input[bool] default_user_change_name: Defaults to `true`.
        :param pulumi.Input[bool] default_user_change_username: Defaults to `false`.
        :param pulumi.Input[str] event_retention: Defaults to `days=365`.
        :param pulumi.Input[bool] gdpr_compliance: Defaults to `true`.
        :param pulumi.Input[bool] impersonation: Defaults to `true`.
        """
        if avatars is not None:
            pulumi.set(__self__, "avatars", avatars)
        if default_token_duration is not None:
            pulumi.set(__self__, "default_token_duration", default_token_duration)
        if default_token_length is not None:
            pulumi.set(__self__, "default_token_length", default_token_length)
        if default_user_change_email is not None:
            pulumi.set(__self__, "default_user_change_email", default_user_change_email)
        if default_user_change_name is not None:
            pulumi.set(__self__, "default_user_change_name", default_user_change_name)
        if default_user_change_username is not None:
            pulumi.set(__self__, "default_user_change_username", default_user_change_username)
        if event_retention is not None:
            pulumi.set(__self__, "event_retention", event_retention)
        if footer_links is not None:
            pulumi.set(__self__, "footer_links", footer_links)
        if gdpr_compliance is not None:
            pulumi.set(__self__, "gdpr_compliance", gdpr_compliance)
        if impersonation is not None:
            pulumi.set(__self__, "impersonation", impersonation)

    @property
    @pulumi.getter
    def avatars(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `gravatar,initials`.
        """
        return pulumi.get(self, "avatars")

    @avatars.setter
    def avatars(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatars", value)

    @property
    @pulumi.getter(name="defaultTokenDuration")
    def default_token_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `minutes=30`.
        """
        return pulumi.get(self, "default_token_duration")

    @default_token_duration.setter
    def default_token_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_token_duration", value)

    @property
    @pulumi.getter(name="defaultTokenLength")
    def default_token_length(self) -> Optional[pulumi.Input[int]]:
        """
        Defaults to `60`.
        """
        return pulumi.get(self, "default_token_length")

    @default_token_length.setter
    def default_token_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_token_length", value)

    @property
    @pulumi.getter(name="defaultUserChangeEmail")
    def default_user_change_email(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "default_user_change_email")

    @default_user_change_email.setter
    def default_user_change_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_user_change_email", value)

    @property
    @pulumi.getter(name="defaultUserChangeName")
    def default_user_change_name(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "default_user_change_name")

    @default_user_change_name.setter
    def default_user_change_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_user_change_name", value)

    @property
    @pulumi.getter(name="defaultUserChangeUsername")
    def default_user_change_username(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "default_user_change_username")

    @default_user_change_username.setter
    def default_user_change_username(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_user_change_username", value)

    @property
    @pulumi.getter(name="eventRetention")
    def event_retention(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `days=365`.
        """
        return pulumi.get(self, "event_retention")

    @event_retention.setter
    def event_retention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_retention", value)

    @property
    @pulumi.getter(name="footerLinks")
    def footer_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "footer_links")

    @footer_links.setter
    def footer_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "footer_links", value)

    @property
    @pulumi.getter(name="gdprCompliance")
    def gdpr_compliance(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "gdpr_compliance")

    @gdpr_compliance.setter
    def gdpr_compliance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gdpr_compliance", value)

    @property
    @pulumi.getter
    def impersonation(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "impersonation")

    @impersonation.setter
    def impersonation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonation", value)


@pulumi.input_type
class _SystemSettingsState:
    def __init__(__self__, *,
                 avatars: Optional[pulumi.Input[str]] = None,
                 default_token_duration: Optional[pulumi.Input[str]] = None,
                 default_token_length: Optional[pulumi.Input[int]] = None,
                 default_user_change_email: Optional[pulumi.Input[bool]] = None,
                 default_user_change_name: Optional[pulumi.Input[bool]] = None,
                 default_user_change_username: Optional[pulumi.Input[bool]] = None,
                 event_retention: Optional[pulumi.Input[str]] = None,
                 footer_links: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 gdpr_compliance: Optional[pulumi.Input[bool]] = None,
                 impersonation: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering SystemSettings resources.
        :param pulumi.Input[str] avatars: Defaults to `gravatar,initials`.
        :param pulumi.Input[str] default_token_duration: Defaults to `minutes=30`.
        :param pulumi.Input[int] default_token_length: Defaults to `60`.
        :param pulumi.Input[bool] default_user_change_email: Defaults to `false`.
        :param pulumi.Input[bool] default_user_change_name: Defaults to `true`.
        :param pulumi.Input[bool] default_user_change_username: Defaults to `false`.
        :param pulumi.Input[str] event_retention: Defaults to `days=365`.
        :param pulumi.Input[bool] gdpr_compliance: Defaults to `true`.
        :param pulumi.Input[bool] impersonation: Defaults to `true`.
        """
        if avatars is not None:
            pulumi.set(__self__, "avatars", avatars)
        if default_token_duration is not None:
            pulumi.set(__self__, "default_token_duration", default_token_duration)
        if default_token_length is not None:
            pulumi.set(__self__, "default_token_length", default_token_length)
        if default_user_change_email is not None:
            pulumi.set(__self__, "default_user_change_email", default_user_change_email)
        if default_user_change_name is not None:
            pulumi.set(__self__, "default_user_change_name", default_user_change_name)
        if default_user_change_username is not None:
            pulumi.set(__self__, "default_user_change_username", default_user_change_username)
        if event_retention is not None:
            pulumi.set(__self__, "event_retention", event_retention)
        if footer_links is not None:
            pulumi.set(__self__, "footer_links", footer_links)
        if gdpr_compliance is not None:
            pulumi.set(__self__, "gdpr_compliance", gdpr_compliance)
        if impersonation is not None:
            pulumi.set(__self__, "impersonation", impersonation)

    @property
    @pulumi.getter
    def avatars(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `gravatar,initials`.
        """
        return pulumi.get(self, "avatars")

    @avatars.setter
    def avatars(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatars", value)

    @property
    @pulumi.getter(name="defaultTokenDuration")
    def default_token_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `minutes=30`.
        """
        return pulumi.get(self, "default_token_duration")

    @default_token_duration.setter
    def default_token_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_token_duration", value)

    @property
    @pulumi.getter(name="defaultTokenLength")
    def default_token_length(self) -> Optional[pulumi.Input[int]]:
        """
        Defaults to `60`.
        """
        return pulumi.get(self, "default_token_length")

    @default_token_length.setter
    def default_token_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_token_length", value)

    @property
    @pulumi.getter(name="defaultUserChangeEmail")
    def default_user_change_email(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "default_user_change_email")

    @default_user_change_email.setter
    def default_user_change_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_user_change_email", value)

    @property
    @pulumi.getter(name="defaultUserChangeName")
    def default_user_change_name(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "default_user_change_name")

    @default_user_change_name.setter
    def default_user_change_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_user_change_name", value)

    @property
    @pulumi.getter(name="defaultUserChangeUsername")
    def default_user_change_username(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "default_user_change_username")

    @default_user_change_username.setter
    def default_user_change_username(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_user_change_username", value)

    @property
    @pulumi.getter(name="eventRetention")
    def event_retention(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `days=365`.
        """
        return pulumi.get(self, "event_retention")

    @event_retention.setter
    def event_retention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_retention", value)

    @property
    @pulumi.getter(name="footerLinks")
    def footer_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "footer_links")

    @footer_links.setter
    def footer_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "footer_links", value)

    @property
    @pulumi.getter(name="gdprCompliance")
    def gdpr_compliance(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "gdpr_compliance")

    @gdpr_compliance.setter
    def gdpr_compliance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gdpr_compliance", value)

    @property
    @pulumi.getter
    def impersonation(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "impersonation")

    @impersonation.setter
    def impersonation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonation", value)


class SystemSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 avatars: Optional[pulumi.Input[str]] = None,
                 default_token_duration: Optional[pulumi.Input[str]] = None,
                 default_token_length: Optional[pulumi.Input[int]] = None,
                 default_user_change_email: Optional[pulumi.Input[bool]] = None,
                 default_user_change_name: Optional[pulumi.Input[bool]] = None,
                 default_user_change_username: Optional[pulumi.Input[bool]] = None,
                 event_retention: Optional[pulumi.Input[str]] = None,
                 footer_links: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 gdpr_compliance: Optional[pulumi.Input[bool]] = None,
                 impersonation: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import osmit_gmbh_pulumi_authentik as authentik

        # Configure system settings
        settings = authentik.SystemSettings("settings", default_user_change_username=True)
        ```

        ## Import

        {{codefile "shell" "examples/resources/authentik_system_settings/import.sh"}}

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] avatars: Defaults to `gravatar,initials`.
        :param pulumi.Input[str] default_token_duration: Defaults to `minutes=30`.
        :param pulumi.Input[int] default_token_length: Defaults to `60`.
        :param pulumi.Input[bool] default_user_change_email: Defaults to `false`.
        :param pulumi.Input[bool] default_user_change_name: Defaults to `true`.
        :param pulumi.Input[bool] default_user_change_username: Defaults to `false`.
        :param pulumi.Input[str] event_retention: Defaults to `days=365`.
        :param pulumi.Input[bool] gdpr_compliance: Defaults to `true`.
        :param pulumi.Input[bool] impersonation: Defaults to `true`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import osmit_gmbh_pulumi_authentik as authentik

        # Configure system settings
        settings = authentik.SystemSettings("settings", default_user_change_username=True)
        ```

        ## Import

        {{codefile "shell" "examples/resources/authentik_system_settings/import.sh"}}

        :param str resource_name: The name of the resource.
        :param SystemSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 avatars: Optional[pulumi.Input[str]] = None,
                 default_token_duration: Optional[pulumi.Input[str]] = None,
                 default_token_length: Optional[pulumi.Input[int]] = None,
                 default_user_change_email: Optional[pulumi.Input[bool]] = None,
                 default_user_change_name: Optional[pulumi.Input[bool]] = None,
                 default_user_change_username: Optional[pulumi.Input[bool]] = None,
                 event_retention: Optional[pulumi.Input[str]] = None,
                 footer_links: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 gdpr_compliance: Optional[pulumi.Input[bool]] = None,
                 impersonation: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemSettingsArgs.__new__(SystemSettingsArgs)

            __props__.__dict__["avatars"] = avatars
            __props__.__dict__["default_token_duration"] = default_token_duration
            __props__.__dict__["default_token_length"] = default_token_length
            __props__.__dict__["default_user_change_email"] = default_user_change_email
            __props__.__dict__["default_user_change_name"] = default_user_change_name
            __props__.__dict__["default_user_change_username"] = default_user_change_username
            __props__.__dict__["event_retention"] = event_retention
            __props__.__dict__["footer_links"] = footer_links
            __props__.__dict__["gdpr_compliance"] = gdpr_compliance
            __props__.__dict__["impersonation"] = impersonation
        super(SystemSettings, __self__).__init__(
            'authentik:index/systemSettings:SystemSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            avatars: Optional[pulumi.Input[str]] = None,
            default_token_duration: Optional[pulumi.Input[str]] = None,
            default_token_length: Optional[pulumi.Input[int]] = None,
            default_user_change_email: Optional[pulumi.Input[bool]] = None,
            default_user_change_name: Optional[pulumi.Input[bool]] = None,
            default_user_change_username: Optional[pulumi.Input[bool]] = None,
            event_retention: Optional[pulumi.Input[str]] = None,
            footer_links: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
            gdpr_compliance: Optional[pulumi.Input[bool]] = None,
            impersonation: Optional[pulumi.Input[bool]] = None) -> 'SystemSettings':
        """
        Get an existing SystemSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] avatars: Defaults to `gravatar,initials`.
        :param pulumi.Input[str] default_token_duration: Defaults to `minutes=30`.
        :param pulumi.Input[int] default_token_length: Defaults to `60`.
        :param pulumi.Input[bool] default_user_change_email: Defaults to `false`.
        :param pulumi.Input[bool] default_user_change_name: Defaults to `true`.
        :param pulumi.Input[bool] default_user_change_username: Defaults to `false`.
        :param pulumi.Input[str] event_retention: Defaults to `days=365`.
        :param pulumi.Input[bool] gdpr_compliance: Defaults to `true`.
        :param pulumi.Input[bool] impersonation: Defaults to `true`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemSettingsState.__new__(_SystemSettingsState)

        __props__.__dict__["avatars"] = avatars
        __props__.__dict__["default_token_duration"] = default_token_duration
        __props__.__dict__["default_token_length"] = default_token_length
        __props__.__dict__["default_user_change_email"] = default_user_change_email
        __props__.__dict__["default_user_change_name"] = default_user_change_name
        __props__.__dict__["default_user_change_username"] = default_user_change_username
        __props__.__dict__["event_retention"] = event_retention
        __props__.__dict__["footer_links"] = footer_links
        __props__.__dict__["gdpr_compliance"] = gdpr_compliance
        __props__.__dict__["impersonation"] = impersonation
        return SystemSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def avatars(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to `gravatar,initials`.
        """
        return pulumi.get(self, "avatars")

    @property
    @pulumi.getter(name="defaultTokenDuration")
    def default_token_duration(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to `minutes=30`.
        """
        return pulumi.get(self, "default_token_duration")

    @property
    @pulumi.getter(name="defaultTokenLength")
    def default_token_length(self) -> pulumi.Output[Optional[int]]:
        """
        Defaults to `60`.
        """
        return pulumi.get(self, "default_token_length")

    @property
    @pulumi.getter(name="defaultUserChangeEmail")
    def default_user_change_email(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "default_user_change_email")

    @property
    @pulumi.getter(name="defaultUserChangeName")
    def default_user_change_name(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "default_user_change_name")

    @property
    @pulumi.getter(name="defaultUserChangeUsername")
    def default_user_change_username(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "default_user_change_username")

    @property
    @pulumi.getter(name="eventRetention")
    def event_retention(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to `days=365`.
        """
        return pulumi.get(self, "event_retention")

    @property
    @pulumi.getter(name="footerLinks")
    def footer_links(self) -> pulumi.Output[Optional[Sequence[Mapping[str, str]]]]:
        return pulumi.get(self, "footer_links")

    @property
    @pulumi.getter(name="gdprCompliance")
    def gdpr_compliance(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "gdpr_compliance")

    @property
    @pulumi.getter
    def impersonation(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "impersonation")

