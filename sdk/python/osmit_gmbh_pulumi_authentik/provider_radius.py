# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProviderRadiusArgs', 'ProviderRadius']

@pulumi.input_type
class ProviderRadiusArgs:
    def __init__(__self__, *,
                 authorization_flow: pulumi.Input[str],
                 invalidation_flow: pulumi.Input[str],
                 shared_secret: pulumi.Input[str],
                 client_networks: Optional[pulumi.Input[str]] = None,
                 mfa_support: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ProviderRadius resource.
        :param pulumi.Input[str] client_networks: Defaults to `0.0.0.0/0, ::/0`.
        :param pulumi.Input[bool] mfa_support: Defaults to `true`.
        """
        pulumi.set(__self__, "authorization_flow", authorization_flow)
        pulumi.set(__self__, "invalidation_flow", invalidation_flow)
        pulumi.set(__self__, "shared_secret", shared_secret)
        if client_networks is not None:
            pulumi.set(__self__, "client_networks", client_networks)
        if mfa_support is not None:
            pulumi.set(__self__, "mfa_support", mfa_support)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if property_mappings is not None:
            pulumi.set(__self__, "property_mappings", property_mappings)

    @property
    @pulumi.getter(name="authorizationFlow")
    def authorization_flow(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authorization_flow")

    @authorization_flow.setter
    def authorization_flow(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorization_flow", value)

    @property
    @pulumi.getter(name="invalidationFlow")
    def invalidation_flow(self) -> pulumi.Input[str]:
        return pulumi.get(self, "invalidation_flow")

    @invalidation_flow.setter
    def invalidation_flow(self, value: pulumi.Input[str]):
        pulumi.set(self, "invalidation_flow", value)

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "shared_secret")

    @shared_secret.setter
    def shared_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "shared_secret", value)

    @property
    @pulumi.getter(name="clientNetworks")
    def client_networks(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `0.0.0.0/0, ::/0`.
        """
        return pulumi.get(self, "client_networks")

    @client_networks.setter
    def client_networks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_networks", value)

    @property
    @pulumi.getter(name="mfaSupport")
    def mfa_support(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "mfa_support")

    @mfa_support.setter
    def mfa_support(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mfa_support", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "property_mappings")

    @property_mappings.setter
    def property_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_mappings", value)


@pulumi.input_type
class _ProviderRadiusState:
    def __init__(__self__, *,
                 authorization_flow: Optional[pulumi.Input[str]] = None,
                 client_networks: Optional[pulumi.Input[str]] = None,
                 invalidation_flow: Optional[pulumi.Input[str]] = None,
                 mfa_support: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 shared_secret: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProviderRadius resources.
        :param pulumi.Input[str] client_networks: Defaults to `0.0.0.0/0, ::/0`.
        :param pulumi.Input[bool] mfa_support: Defaults to `true`.
        """
        if authorization_flow is not None:
            pulumi.set(__self__, "authorization_flow", authorization_flow)
        if client_networks is not None:
            pulumi.set(__self__, "client_networks", client_networks)
        if invalidation_flow is not None:
            pulumi.set(__self__, "invalidation_flow", invalidation_flow)
        if mfa_support is not None:
            pulumi.set(__self__, "mfa_support", mfa_support)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if property_mappings is not None:
            pulumi.set(__self__, "property_mappings", property_mappings)
        if shared_secret is not None:
            pulumi.set(__self__, "shared_secret", shared_secret)

    @property
    @pulumi.getter(name="authorizationFlow")
    def authorization_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_flow")

    @authorization_flow.setter
    def authorization_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_flow", value)

    @property
    @pulumi.getter(name="clientNetworks")
    def client_networks(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `0.0.0.0/0, ::/0`.
        """
        return pulumi.get(self, "client_networks")

    @client_networks.setter
    def client_networks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_networks", value)

    @property
    @pulumi.getter(name="invalidationFlow")
    def invalidation_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalidation_flow")

    @invalidation_flow.setter
    def invalidation_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalidation_flow", value)

    @property
    @pulumi.getter(name="mfaSupport")
    def mfa_support(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "mfa_support")

    @mfa_support.setter
    def mfa_support(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mfa_support", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "property_mappings")

    @property_mappings.setter
    def property_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_mappings", value)

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shared_secret")

    @shared_secret.setter
    def shared_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_secret", value)


class ProviderRadius(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorization_flow: Optional[pulumi.Input[str]] = None,
                 client_networks: Optional[pulumi.Input[str]] = None,
                 invalidation_flow: Optional[pulumi.Input[str]] = None,
                 mfa_support: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 shared_secret: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import osmit_gmbh_pulumi_authentik as authentik
        import pulumi_authentik as authentik

        # Create a Radius Provider
        default_authentication_flow = authentik.get_flow(slug="default-authentication-flow")
        name = authentik.ProviderRadius("name",
            name="radius-app",
            authorization_flow=default_authentication_flow.id,
            client_networks="10.10.0.0/24",
            shared_secret="my-shared-secret")
        name_application = authentik.Application("name",
            name="radius-app",
            slug="radius-app",
            protocol_provider=name.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_networks: Defaults to `0.0.0.0/0, ::/0`.
        :param pulumi.Input[bool] mfa_support: Defaults to `true`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderRadiusArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import osmit_gmbh_pulumi_authentik as authentik
        import pulumi_authentik as authentik

        # Create a Radius Provider
        default_authentication_flow = authentik.get_flow(slug="default-authentication-flow")
        name = authentik.ProviderRadius("name",
            name="radius-app",
            authorization_flow=default_authentication_flow.id,
            client_networks="10.10.0.0/24",
            shared_secret="my-shared-secret")
        name_application = authentik.Application("name",
            name="radius-app",
            slug="radius-app",
            protocol_provider=name.id)
        ```

        :param str resource_name: The name of the resource.
        :param ProviderRadiusArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderRadiusArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorization_flow: Optional[pulumi.Input[str]] = None,
                 client_networks: Optional[pulumi.Input[str]] = None,
                 invalidation_flow: Optional[pulumi.Input[str]] = None,
                 mfa_support: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 shared_secret: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderRadiusArgs.__new__(ProviderRadiusArgs)

            if authorization_flow is None and not opts.urn:
                raise TypeError("Missing required property 'authorization_flow'")
            __props__.__dict__["authorization_flow"] = authorization_flow
            __props__.__dict__["client_networks"] = client_networks
            if invalidation_flow is None and not opts.urn:
                raise TypeError("Missing required property 'invalidation_flow'")
            __props__.__dict__["invalidation_flow"] = invalidation_flow
            __props__.__dict__["mfa_support"] = mfa_support
            __props__.__dict__["name"] = name
            __props__.__dict__["property_mappings"] = property_mappings
            if shared_secret is None and not opts.urn:
                raise TypeError("Missing required property 'shared_secret'")
            __props__.__dict__["shared_secret"] = None if shared_secret is None else pulumi.Output.secret(shared_secret)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["sharedSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ProviderRadius, __self__).__init__(
            'authentik:index/providerRadius:ProviderRadius',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authorization_flow: Optional[pulumi.Input[str]] = None,
            client_networks: Optional[pulumi.Input[str]] = None,
            invalidation_flow: Optional[pulumi.Input[str]] = None,
            mfa_support: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            shared_secret: Optional[pulumi.Input[str]] = None) -> 'ProviderRadius':
        """
        Get an existing ProviderRadius resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_networks: Defaults to `0.0.0.0/0, ::/0`.
        :param pulumi.Input[bool] mfa_support: Defaults to `true`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProviderRadiusState.__new__(_ProviderRadiusState)

        __props__.__dict__["authorization_flow"] = authorization_flow
        __props__.__dict__["client_networks"] = client_networks
        __props__.__dict__["invalidation_flow"] = invalidation_flow
        __props__.__dict__["mfa_support"] = mfa_support
        __props__.__dict__["name"] = name
        __props__.__dict__["property_mappings"] = property_mappings
        __props__.__dict__["shared_secret"] = shared_secret
        return ProviderRadius(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authorizationFlow")
    def authorization_flow(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authorization_flow")

    @property
    @pulumi.getter(name="clientNetworks")
    def client_networks(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to `0.0.0.0/0, ::/0`.
        """
        return pulumi.get(self, "client_networks")

    @property
    @pulumi.getter(name="invalidationFlow")
    def invalidation_flow(self) -> pulumi.Output[str]:
        return pulumi.get(self, "invalidation_flow")

    @property
    @pulumi.getter(name="mfaSupport")
    def mfa_support(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "mfa_support")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "property_mappings")

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> pulumi.Output[str]:
        return pulumi.get(self, "shared_secret")

