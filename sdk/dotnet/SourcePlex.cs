// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace OSMIT_GmbH.Authentik
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Authentik = OSMIT_GmbH.Authentik;
    /// using Authentik = Pulumi.Authentik;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var default_authorization_flow = Authentik.GetFlow.Invoke(new()
    ///     {
    ///         Slug = "default-provider-authorization-implicit-consent",
    ///     });
    /// 
    ///     var name = new Authentik.SourcePlex("name", new()
    ///     {
    ///         Slug = "plex",
    ///         AuthenticationFlow = default_authorization_flow.Apply(default_authorization_flow =&gt; default_authorization_flow.Apply(getFlowResult =&gt; getFlowResult.Id)),
    ///         EnrollmentFlow = default_authorization_flow.Apply(default_authorization_flow =&gt; default_authorization_flow.Apply(getFlowResult =&gt; getFlowResult.Id)),
    ///         ClientId = "foo-bar-baz",
    ///         PlexToken = "foo",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AuthentikResourceType("authentik:index/sourcePlex:SourcePlex")]
    public partial class SourcePlex : global::Pulumi.CustomResource
    {
        [Output("allowFriends")]
        public Output<bool?> AllowFriends { get; private set; } = null!;

        [Output("allowedServers")]
        public Output<ImmutableArray<string>> AllowedServers { get; private set; } = null!;

        [Output("authenticationFlow")]
        public Output<string?> AuthenticationFlow { get; private set; } = null!;

        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("enrollmentFlow")]
        public Output<string?> EnrollmentFlow { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `identifier` - `name_link` - `name_deny`
        /// </summary>
        [Output("groupMatchingMode")]
        public Output<string?> GroupMatchingMode { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("plexToken")]
        public Output<string> PlexToken { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `all` - `any`
        /// </summary>
        [Output("policyEngineMode")]
        public Output<string?> PolicyEngineMode { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny`
        /// </summary>
        [Output("userMatchingMode")]
        public Output<string?> UserMatchingMode { get; private set; } = null!;

        [Output("userPathTemplate")]
        public Output<string?> UserPathTemplate { get; private set; } = null!;

        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a SourcePlex resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SourcePlex(string name, SourcePlexArgs args, CustomResourceOptions? options = null)
            : base("authentik:index/sourcePlex:SourcePlex", name, args ?? new SourcePlexArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SourcePlex(string name, Input<string> id, SourcePlexState? state = null, CustomResourceOptions? options = null)
            : base("authentik:index/sourcePlex:SourcePlex", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/OSMIT-GmbH/pulumi-authentik/releases/download/v${VERSION}",
                AdditionalSecretOutputs =
                {
                    "plexToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SourcePlex resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SourcePlex Get(string name, Input<string> id, SourcePlexState? state = null, CustomResourceOptions? options = null)
        {
            return new SourcePlex(name, id, state, options);
        }
    }

    public sealed class SourcePlexArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowFriends")]
        public Input<bool>? AllowFriends { get; set; }

        [Input("allowedServers")]
        private InputList<string>? _allowedServers;
        public InputList<string> AllowedServers
        {
            get => _allowedServers ?? (_allowedServers = new InputList<string>());
            set => _allowedServers = value;
        }

        [Input("authenticationFlow")]
        public Input<string>? AuthenticationFlow { get; set; }

        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("enrollmentFlow")]
        public Input<string>? EnrollmentFlow { get; set; }

        /// <summary>
        /// Allowed values: - `identifier` - `name_link` - `name_deny`
        /// </summary>
        [Input("groupMatchingMode")]
        public Input<string>? GroupMatchingMode { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("plexToken", required: true)]
        private Input<string>? _plexToken;
        public Input<string>? PlexToken
        {
            get => _plexToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _plexToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Allowed values: - `all` - `any`
        /// </summary>
        [Input("policyEngineMode")]
        public Input<string>? PolicyEngineMode { get; set; }

        [Input("slug", required: true)]
        public Input<string> Slug { get; set; } = null!;

        /// <summary>
        /// Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny`
        /// </summary>
        [Input("userMatchingMode")]
        public Input<string>? UserMatchingMode { get; set; }

        [Input("userPathTemplate")]
        public Input<string>? UserPathTemplate { get; set; }

        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public SourcePlexArgs()
        {
        }
        public static new SourcePlexArgs Empty => new SourcePlexArgs();
    }

    public sealed class SourcePlexState : global::Pulumi.ResourceArgs
    {
        [Input("allowFriends")]
        public Input<bool>? AllowFriends { get; set; }

        [Input("allowedServers")]
        private InputList<string>? _allowedServers;
        public InputList<string> AllowedServers
        {
            get => _allowedServers ?? (_allowedServers = new InputList<string>());
            set => _allowedServers = value;
        }

        [Input("authenticationFlow")]
        public Input<string>? AuthenticationFlow { get; set; }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("enrollmentFlow")]
        public Input<string>? EnrollmentFlow { get; set; }

        /// <summary>
        /// Allowed values: - `identifier` - `name_link` - `name_deny`
        /// </summary>
        [Input("groupMatchingMode")]
        public Input<string>? GroupMatchingMode { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("plexToken")]
        private Input<string>? _plexToken;
        public Input<string>? PlexToken
        {
            get => _plexToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _plexToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Allowed values: - `all` - `any`
        /// </summary>
        [Input("policyEngineMode")]
        public Input<string>? PolicyEngineMode { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny`
        /// </summary>
        [Input("userMatchingMode")]
        public Input<string>? UserMatchingMode { get; set; }

        [Input("userPathTemplate")]
        public Input<string>? UserPathTemplate { get; set; }

        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public SourcePlexState()
        {
        }
        public static new SourcePlexState Empty => new SourcePlexState();
    }
}
