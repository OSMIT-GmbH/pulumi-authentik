// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace OSMIT_GmbH.Authentik
{
    public static class GetProviderOauth2Config
    {
        /// <summary>
        /// Get OAuth2 provider config
        /// </summary>
        public static Task<GetProviderOauth2ConfigResult> InvokeAsync(GetProviderOauth2ConfigArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProviderOauth2ConfigResult>("authentik:index/getProviderOauth2Config:getProviderOauth2Config", args ?? new GetProviderOauth2ConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Get OAuth2 provider config
        /// </summary>
        public static Output<GetProviderOauth2ConfigResult> Invoke(GetProviderOauth2ConfigInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProviderOauth2ConfigResult>("authentik:index/getProviderOauth2Config:getProviderOauth2Config", args ?? new GetProviderOauth2ConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProviderOauth2ConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Find provider by name
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Find provider by ID
        /// </summary>
        [Input("providerId")]
        public int? ProviderId { get; set; }

        public GetProviderOauth2ConfigArgs()
        {
        }
        public static new GetProviderOauth2ConfigArgs Empty => new GetProviderOauth2ConfigArgs();
    }

    public sealed class GetProviderOauth2ConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Find provider by name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Find provider by ID
        /// </summary>
        [Input("providerId")]
        public Input<int>? ProviderId { get; set; }

        public GetProviderOauth2ConfigInvokeArgs()
        {
        }
        public static new GetProviderOauth2ConfigInvokeArgs Empty => new GetProviderOauth2ConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetProviderOauth2ConfigResult
    {
        /// <summary>
        /// Generated.
        /// </summary>
        public readonly string AuthorizeUrl;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Generated.
        /// </summary>
        public readonly string IssuerUrl;
        /// <summary>
        /// Generated.
        /// </summary>
        public readonly string JwksUrl;
        /// <summary>
        /// Generated.
        /// </summary>
        public readonly string LogoutUrl;
        /// <summary>
        /// Find provider by name
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Find provider by ID
        /// </summary>
        public readonly int? ProviderId;
        /// <summary>
        /// Generated.
        /// </summary>
        public readonly string ProviderInfoUrl;
        /// <summary>
        /// Generated.
        /// </summary>
        public readonly string TokenUrl;
        /// <summary>
        /// Generated.
        /// </summary>
        public readonly string UserInfoUrl;

        [OutputConstructor]
        private GetProviderOauth2ConfigResult(
            string authorizeUrl,

            string id,

            string issuerUrl,

            string jwksUrl,

            string logoutUrl,

            string? name,

            int? providerId,

            string providerInfoUrl,

            string tokenUrl,

            string userInfoUrl)
        {
            AuthorizeUrl = authorizeUrl;
            Id = id;
            IssuerUrl = issuerUrl;
            JwksUrl = jwksUrl;
            LogoutUrl = logoutUrl;
            Name = name;
            ProviderId = providerId;
            ProviderInfoUrl = providerInfoUrl;
            TokenUrl = tokenUrl;
            UserInfoUrl = userInfoUrl;
        }
    }
}
