// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace OSMIT_GmbH.Authentik
{
    public static class GetGroups
    {
        /// <summary>
        /// Get groups list
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Authentik = Pulumi.Authentik;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // To get the complete groups list
        ///     var all = Authentik.GetGroups.Invoke();
        /// 
        ///     // Or, to filter according to a specific field
        ///     var admins = Authentik.GetGroups.Invoke(new()
        ///     {
        ///         IsSuperuser = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGroupsResult> InvokeAsync(GetGroupsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGroupsResult>("authentik:index/getGroups:getGroups", args ?? new GetGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// Get groups list
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Authentik = Pulumi.Authentik;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // To get the complete groups list
        ///     var all = Authentik.GetGroups.Invoke();
        /// 
        ///     // Or, to filter according to a specific field
        ///     var admins = Authentik.GetGroups.Invoke(new()
        ///     {
        ///         IsSuperuser = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGroupsResult> Invoke(GetGroupsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupsResult>("authentik:index/getGroups:getGroups", args ?? new GetGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupsArgs : global::Pulumi.InvokeArgs
    {
        [Input("attributes")]
        public string? Attributes { get; set; }

        [Input("includeUsers")]
        public bool? IncludeUsers { get; set; }

        [Input("isSuperuser")]
        public bool? IsSuperuser { get; set; }

        [Input("membersByPks")]
        private List<int>? _membersByPks;
        public List<int> MembersByPks
        {
            get => _membersByPks ?? (_membersByPks = new List<int>());
            set => _membersByPks = value;
        }

        [Input("membersByUsernames")]
        private List<string>? _membersByUsernames;
        public List<string> MembersByUsernames
        {
            get => _membersByUsernames ?? (_membersByUsernames = new List<string>());
            set => _membersByUsernames = value;
        }

        [Input("name")]
        public string? Name { get; set; }

        [Input("ordering")]
        public string? Ordering { get; set; }

        [Input("search")]
        public string? Search { get; set; }

        public GetGroupsArgs()
        {
        }
        public static new GetGroupsArgs Empty => new GetGroupsArgs();
    }

    public sealed class GetGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("attributes")]
        public Input<string>? Attributes { get; set; }

        [Input("includeUsers")]
        public Input<bool>? IncludeUsers { get; set; }

        [Input("isSuperuser")]
        public Input<bool>? IsSuperuser { get; set; }

        [Input("membersByPks")]
        private InputList<int>? _membersByPks;
        public InputList<int> MembersByPks
        {
            get => _membersByPks ?? (_membersByPks = new InputList<int>());
            set => _membersByPks = value;
        }

        [Input("membersByUsernames")]
        private InputList<string>? _membersByUsernames;
        public InputList<string> MembersByUsernames
        {
            get => _membersByUsernames ?? (_membersByUsernames = new InputList<string>());
            set => _membersByUsernames = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ordering")]
        public Input<string>? Ordering { get; set; }

        [Input("search")]
        public Input<string>? Search { get; set; }

        public GetGroupsInvokeArgs()
        {
        }
        public static new GetGroupsInvokeArgs Empty => new GetGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupsResult
    {
        public readonly string? Attributes;
        /// <summary>
        /// Generated.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGroupsGroupResult> Groups;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IncludeUsers;
        public readonly bool? IsSuperuser;
        public readonly ImmutableArray<int> MembersByPks;
        public readonly ImmutableArray<string> MembersByUsernames;
        public readonly string? Name;
        public readonly string? Ordering;
        public readonly string? Search;

        [OutputConstructor]
        private GetGroupsResult(
            string? attributes,

            ImmutableArray<Outputs.GetGroupsGroupResult> groups,

            string id,

            bool? includeUsers,

            bool? isSuperuser,

            ImmutableArray<int> membersByPks,

            ImmutableArray<string> membersByUsernames,

            string? name,

            string? ordering,

            string? search)
        {
            Attributes = attributes;
            Groups = groups;
            Id = id;
            IncludeUsers = includeUsers;
            IsSuperuser = isSuperuser;
            MembersByPks = membersByPks;
            MembersByUsernames = membersByUsernames;
            Name = name;
            Ordering = ordering;
            Search = search;
        }
    }
}
