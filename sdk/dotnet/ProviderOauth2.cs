// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace OSMIT_GmbH.Authentik
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Authentik = OSMIT_GmbH.Authentik;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create an OAuth2 Provider
    ///     var name = new Authentik.ProviderOauth2("name", new()
    ///     {
    ///         Name = "grafana",
    ///         ClientId = "grafana",
    ///     });
    /// 
    ///     var nameApplication = new Authentik.Application("name", new()
    ///     {
    ///         Name = "test app",
    ///         Slug = "test-app",
    ///         ProtocolProvider = name.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AuthentikResourceType("authentik:index/providerOauth2:ProviderOauth2")]
    public partial class ProviderOauth2 : global::Pulumi.CustomResource
    {
        [Output("accessCodeValidity")]
        public Output<string?> AccessCodeValidity { get; private set; } = null!;

        [Output("accessTokenValidity")]
        public Output<string?> AccessTokenValidity { get; private set; } = null!;

        [Output("authenticationFlow")]
        public Output<string?> AuthenticationFlow { get; private set; } = null!;

        [Output("authorizationFlow")]
        public Output<string> AuthorizationFlow { get; private set; } = null!;

        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `confidential` - `public`
        /// </summary>
        [Output("clientType")]
        public Output<string?> ClientType { get; private set; } = null!;

        [Output("encryptionKey")]
        public Output<string?> EncryptionKey { get; private set; } = null!;

        [Output("includeClaimsInIdToken")]
        public Output<bool?> IncludeClaimsInIdToken { get; private set; } = null!;

        [Output("invalidationFlow")]
        public Output<string> InvalidationFlow { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `global` - `per_provider`
        /// </summary>
        [Output("issuerMode")]
        public Output<string?> IssuerMode { get; private set; } = null!;

        /// <summary>
        /// JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
        /// </summary>
        [Output("jwksSources")]
        public Output<ImmutableArray<string>> JwksSources { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("propertyMappings")]
        public Output<ImmutableArray<string>> PropertyMappings { get; private set; } = null!;

        [Output("redirectUris")]
        public Output<ImmutableArray<string>> RedirectUris { get; private set; } = null!;

        [Output("refreshTokenValidity")]
        public Output<string?> RefreshTokenValidity { get; private set; } = null!;

        [Output("signingKey")]
        public Output<string?> SigningKey { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `hashed_user_id` - `user_id` - `user_uuid` - `user_username` - `user_email` - `user_upn`
        /// </summary>
        [Output("subMode")]
        public Output<string?> SubMode { get; private set; } = null!;


        /// <summary>
        /// Create a ProviderOauth2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProviderOauth2(string name, ProviderOauth2Args args, CustomResourceOptions? options = null)
            : base("authentik:index/providerOauth2:ProviderOauth2", name, args ?? new ProviderOauth2Args(), MakeResourceOptions(options, ""))
        {
        }

        private ProviderOauth2(string name, Input<string> id, ProviderOauth2State? state = null, CustomResourceOptions? options = null)
            : base("authentik:index/providerOauth2:ProviderOauth2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/OSMIT-GmbH/pulumi-authentik/releases/download/v${VERSION}",
                AdditionalSecretOutputs =
                {
                    "clientSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProviderOauth2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProviderOauth2 Get(string name, Input<string> id, ProviderOauth2State? state = null, CustomResourceOptions? options = null)
        {
            return new ProviderOauth2(name, id, state, options);
        }
    }

    public sealed class ProviderOauth2Args : global::Pulumi.ResourceArgs
    {
        [Input("accessCodeValidity")]
        public Input<string>? AccessCodeValidity { get; set; }

        [Input("accessTokenValidity")]
        public Input<string>? AccessTokenValidity { get; set; }

        [Input("authenticationFlow")]
        public Input<string>? AuthenticationFlow { get; set; }

        [Input("authorizationFlow", required: true)]
        public Input<string> AuthorizationFlow { get; set; } = null!;

        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        [Input("clientSecret")]
        private Input<string>? _clientSecret;
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Allowed values: - `confidential` - `public`
        /// </summary>
        [Input("clientType")]
        public Input<string>? ClientType { get; set; }

        [Input("encryptionKey")]
        public Input<string>? EncryptionKey { get; set; }

        [Input("includeClaimsInIdToken")]
        public Input<bool>? IncludeClaimsInIdToken { get; set; }

        [Input("invalidationFlow", required: true)]
        public Input<string> InvalidationFlow { get; set; } = null!;

        /// <summary>
        /// Allowed values: - `global` - `per_provider`
        /// </summary>
        [Input("issuerMode")]
        public Input<string>? IssuerMode { get; set; }

        [Input("jwksSources")]
        private InputList<string>? _jwksSources;

        /// <summary>
        /// JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
        /// </summary>
        public InputList<string> JwksSources
        {
            get => _jwksSources ?? (_jwksSources = new InputList<string>());
            set => _jwksSources = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("propertyMappings")]
        private InputList<string>? _propertyMappings;
        public InputList<string> PropertyMappings
        {
            get => _propertyMappings ?? (_propertyMappings = new InputList<string>());
            set => _propertyMappings = value;
        }

        [Input("redirectUris")]
        private InputList<string>? _redirectUris;
        public InputList<string> RedirectUris
        {
            get => _redirectUris ?? (_redirectUris = new InputList<string>());
            set => _redirectUris = value;
        }

        [Input("refreshTokenValidity")]
        public Input<string>? RefreshTokenValidity { get; set; }

        [Input("signingKey")]
        public Input<string>? SigningKey { get; set; }

        /// <summary>
        /// Allowed values: - `hashed_user_id` - `user_id` - `user_uuid` - `user_username` - `user_email` - `user_upn`
        /// </summary>
        [Input("subMode")]
        public Input<string>? SubMode { get; set; }

        public ProviderOauth2Args()
        {
        }
        public static new ProviderOauth2Args Empty => new ProviderOauth2Args();
    }

    public sealed class ProviderOauth2State : global::Pulumi.ResourceArgs
    {
        [Input("accessCodeValidity")]
        public Input<string>? AccessCodeValidity { get; set; }

        [Input("accessTokenValidity")]
        public Input<string>? AccessTokenValidity { get; set; }

        [Input("authenticationFlow")]
        public Input<string>? AuthenticationFlow { get; set; }

        [Input("authorizationFlow")]
        public Input<string>? AuthorizationFlow { get; set; }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Allowed values: - `confidential` - `public`
        /// </summary>
        [Input("clientType")]
        public Input<string>? ClientType { get; set; }

        [Input("encryptionKey")]
        public Input<string>? EncryptionKey { get; set; }

        [Input("includeClaimsInIdToken")]
        public Input<bool>? IncludeClaimsInIdToken { get; set; }

        [Input("invalidationFlow")]
        public Input<string>? InvalidationFlow { get; set; }

        /// <summary>
        /// Allowed values: - `global` - `per_provider`
        /// </summary>
        [Input("issuerMode")]
        public Input<string>? IssuerMode { get; set; }

        [Input("jwksSources")]
        private InputList<string>? _jwksSources;

        /// <summary>
        /// JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
        /// </summary>
        public InputList<string> JwksSources
        {
            get => _jwksSources ?? (_jwksSources = new InputList<string>());
            set => _jwksSources = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("propertyMappings")]
        private InputList<string>? _propertyMappings;
        public InputList<string> PropertyMappings
        {
            get => _propertyMappings ?? (_propertyMappings = new InputList<string>());
            set => _propertyMappings = value;
        }

        [Input("redirectUris")]
        private InputList<string>? _redirectUris;
        public InputList<string> RedirectUris
        {
            get => _redirectUris ?? (_redirectUris = new InputList<string>());
            set => _redirectUris = value;
        }

        [Input("refreshTokenValidity")]
        public Input<string>? RefreshTokenValidity { get; set; }

        [Input("signingKey")]
        public Input<string>? SigningKey { get; set; }

        /// <summary>
        /// Allowed values: - `hashed_user_id` - `user_id` - `user_uuid` - `user_username` - `user_email` - `user_upn`
        /// </summary>
        [Input("subMode")]
        public Input<string>? SubMode { get; set; }

        public ProviderOauth2State()
        {
        }
        public static new ProviderOauth2State Empty => new ProviderOauth2State();
    }
}
