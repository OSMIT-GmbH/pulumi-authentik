// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceSaml struct {
	pulumi.CustomResourceState

	AllowIdpInitiated  pulumi.BoolPtrOutput   `pulumi:"allowIdpInitiated"`
	AuthenticationFlow pulumi.StringOutput    `pulumi:"authenticationFlow"`
	BindingType        pulumi.StringPtrOutput `pulumi:"bindingType"`
	DigestAlgorithm    pulumi.StringPtrOutput `pulumi:"digestAlgorithm"`
	Enabled            pulumi.BoolPtrOutput   `pulumi:"enabled"`
	EnrollmentFlow     pulumi.StringOutput    `pulumi:"enrollmentFlow"`
	Issuer             pulumi.StringPtrOutput `pulumi:"issuer"`
	// SAML Metadata
	Metadata                 pulumi.StringOutput    `pulumi:"metadata"`
	Name                     pulumi.StringOutput    `pulumi:"name"`
	NameIdPolicy             pulumi.StringPtrOutput `pulumi:"nameIdPolicy"`
	PolicyEngineMode         pulumi.StringPtrOutput `pulumi:"policyEngineMode"`
	PreAuthenticationFlow    pulumi.StringOutput    `pulumi:"preAuthenticationFlow"`
	SignatureAlgorithm       pulumi.StringPtrOutput `pulumi:"signatureAlgorithm"`
	SigningKp                pulumi.StringPtrOutput `pulumi:"signingKp"`
	SloUrl                   pulumi.StringPtrOutput `pulumi:"sloUrl"`
	Slug                     pulumi.StringOutput    `pulumi:"slug"`
	SsoUrl                   pulumi.StringOutput    `pulumi:"ssoUrl"`
	TemporaryUserDeleteAfter pulumi.StringPtrOutput `pulumi:"temporaryUserDeleteAfter"`
	UserMatchingMode         pulumi.StringPtrOutput `pulumi:"userMatchingMode"`
	UserPathTemplate         pulumi.StringPtrOutput `pulumi:"userPathTemplate"`
	Uuid                     pulumi.StringOutput    `pulumi:"uuid"`
}

// NewSourceSaml registers a new resource with the given unique name, arguments, and options.
func NewSourceSaml(ctx *pulumi.Context,
	name string, args *SourceSamlArgs, opts ...pulumi.ResourceOption) (*SourceSaml, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationFlow == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationFlow'")
	}
	if args.EnrollmentFlow == nil {
		return nil, errors.New("invalid value for required argument 'EnrollmentFlow'")
	}
	if args.PreAuthenticationFlow == nil {
		return nil, errors.New("invalid value for required argument 'PreAuthenticationFlow'")
	}
	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	if args.SsoUrl == nil {
		return nil, errors.New("invalid value for required argument 'SsoUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceSaml
	err := ctx.RegisterResource("authentik:index/sourceSaml:SourceSaml", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceSaml gets an existing SourceSaml resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceSaml(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceSamlState, opts ...pulumi.ResourceOption) (*SourceSaml, error) {
	var resource SourceSaml
	err := ctx.ReadResource("authentik:index/sourceSaml:SourceSaml", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceSaml resources.
type sourceSamlState struct {
	AllowIdpInitiated  *bool   `pulumi:"allowIdpInitiated"`
	AuthenticationFlow *string `pulumi:"authenticationFlow"`
	BindingType        *string `pulumi:"bindingType"`
	DigestAlgorithm    *string `pulumi:"digestAlgorithm"`
	Enabled            *bool   `pulumi:"enabled"`
	EnrollmentFlow     *string `pulumi:"enrollmentFlow"`
	Issuer             *string `pulumi:"issuer"`
	// SAML Metadata
	Metadata                 *string `pulumi:"metadata"`
	Name                     *string `pulumi:"name"`
	NameIdPolicy             *string `pulumi:"nameIdPolicy"`
	PolicyEngineMode         *string `pulumi:"policyEngineMode"`
	PreAuthenticationFlow    *string `pulumi:"preAuthenticationFlow"`
	SignatureAlgorithm       *string `pulumi:"signatureAlgorithm"`
	SigningKp                *string `pulumi:"signingKp"`
	SloUrl                   *string `pulumi:"sloUrl"`
	Slug                     *string `pulumi:"slug"`
	SsoUrl                   *string `pulumi:"ssoUrl"`
	TemporaryUserDeleteAfter *string `pulumi:"temporaryUserDeleteAfter"`
	UserMatchingMode         *string `pulumi:"userMatchingMode"`
	UserPathTemplate         *string `pulumi:"userPathTemplate"`
	Uuid                     *string `pulumi:"uuid"`
}

type SourceSamlState struct {
	AllowIdpInitiated  pulumi.BoolPtrInput
	AuthenticationFlow pulumi.StringPtrInput
	BindingType        pulumi.StringPtrInput
	DigestAlgorithm    pulumi.StringPtrInput
	Enabled            pulumi.BoolPtrInput
	EnrollmentFlow     pulumi.StringPtrInput
	Issuer             pulumi.StringPtrInput
	// SAML Metadata
	Metadata                 pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	NameIdPolicy             pulumi.StringPtrInput
	PolicyEngineMode         pulumi.StringPtrInput
	PreAuthenticationFlow    pulumi.StringPtrInput
	SignatureAlgorithm       pulumi.StringPtrInput
	SigningKp                pulumi.StringPtrInput
	SloUrl                   pulumi.StringPtrInput
	Slug                     pulumi.StringPtrInput
	SsoUrl                   pulumi.StringPtrInput
	TemporaryUserDeleteAfter pulumi.StringPtrInput
	UserMatchingMode         pulumi.StringPtrInput
	UserPathTemplate         pulumi.StringPtrInput
	Uuid                     pulumi.StringPtrInput
}

func (SourceSamlState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceSamlState)(nil)).Elem()
}

type sourceSamlArgs struct {
	AllowIdpInitiated        *bool   `pulumi:"allowIdpInitiated"`
	AuthenticationFlow       string  `pulumi:"authenticationFlow"`
	BindingType              *string `pulumi:"bindingType"`
	DigestAlgorithm          *string `pulumi:"digestAlgorithm"`
	Enabled                  *bool   `pulumi:"enabled"`
	EnrollmentFlow           string  `pulumi:"enrollmentFlow"`
	Issuer                   *string `pulumi:"issuer"`
	Name                     *string `pulumi:"name"`
	NameIdPolicy             *string `pulumi:"nameIdPolicy"`
	PolicyEngineMode         *string `pulumi:"policyEngineMode"`
	PreAuthenticationFlow    string  `pulumi:"preAuthenticationFlow"`
	SignatureAlgorithm       *string `pulumi:"signatureAlgorithm"`
	SigningKp                *string `pulumi:"signingKp"`
	SloUrl                   *string `pulumi:"sloUrl"`
	Slug                     string  `pulumi:"slug"`
	SsoUrl                   string  `pulumi:"ssoUrl"`
	TemporaryUserDeleteAfter *string `pulumi:"temporaryUserDeleteAfter"`
	UserMatchingMode         *string `pulumi:"userMatchingMode"`
	UserPathTemplate         *string `pulumi:"userPathTemplate"`
	Uuid                     *string `pulumi:"uuid"`
}

// The set of arguments for constructing a SourceSaml resource.
type SourceSamlArgs struct {
	AllowIdpInitiated        pulumi.BoolPtrInput
	AuthenticationFlow       pulumi.StringInput
	BindingType              pulumi.StringPtrInput
	DigestAlgorithm          pulumi.StringPtrInput
	Enabled                  pulumi.BoolPtrInput
	EnrollmentFlow           pulumi.StringInput
	Issuer                   pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	NameIdPolicy             pulumi.StringPtrInput
	PolicyEngineMode         pulumi.StringPtrInput
	PreAuthenticationFlow    pulumi.StringInput
	SignatureAlgorithm       pulumi.StringPtrInput
	SigningKp                pulumi.StringPtrInput
	SloUrl                   pulumi.StringPtrInput
	Slug                     pulumi.StringInput
	SsoUrl                   pulumi.StringInput
	TemporaryUserDeleteAfter pulumi.StringPtrInput
	UserMatchingMode         pulumi.StringPtrInput
	UserPathTemplate         pulumi.StringPtrInput
	Uuid                     pulumi.StringPtrInput
}

func (SourceSamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceSamlArgs)(nil)).Elem()
}

type SourceSamlInput interface {
	pulumi.Input

	ToSourceSamlOutput() SourceSamlOutput
	ToSourceSamlOutputWithContext(ctx context.Context) SourceSamlOutput
}

func (*SourceSaml) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceSaml)(nil)).Elem()
}

func (i *SourceSaml) ToSourceSamlOutput() SourceSamlOutput {
	return i.ToSourceSamlOutputWithContext(context.Background())
}

func (i *SourceSaml) ToSourceSamlOutputWithContext(ctx context.Context) SourceSamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSamlOutput)
}

// SourceSamlArrayInput is an input type that accepts SourceSamlArray and SourceSamlArrayOutput values.
// You can construct a concrete instance of `SourceSamlArrayInput` via:
//
//	SourceSamlArray{ SourceSamlArgs{...} }
type SourceSamlArrayInput interface {
	pulumi.Input

	ToSourceSamlArrayOutput() SourceSamlArrayOutput
	ToSourceSamlArrayOutputWithContext(context.Context) SourceSamlArrayOutput
}

type SourceSamlArray []SourceSamlInput

func (SourceSamlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceSaml)(nil)).Elem()
}

func (i SourceSamlArray) ToSourceSamlArrayOutput() SourceSamlArrayOutput {
	return i.ToSourceSamlArrayOutputWithContext(context.Background())
}

func (i SourceSamlArray) ToSourceSamlArrayOutputWithContext(ctx context.Context) SourceSamlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSamlArrayOutput)
}

// SourceSamlMapInput is an input type that accepts SourceSamlMap and SourceSamlMapOutput values.
// You can construct a concrete instance of `SourceSamlMapInput` via:
//
//	SourceSamlMap{ "key": SourceSamlArgs{...} }
type SourceSamlMapInput interface {
	pulumi.Input

	ToSourceSamlMapOutput() SourceSamlMapOutput
	ToSourceSamlMapOutputWithContext(context.Context) SourceSamlMapOutput
}

type SourceSamlMap map[string]SourceSamlInput

func (SourceSamlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceSaml)(nil)).Elem()
}

func (i SourceSamlMap) ToSourceSamlMapOutput() SourceSamlMapOutput {
	return i.ToSourceSamlMapOutputWithContext(context.Background())
}

func (i SourceSamlMap) ToSourceSamlMapOutputWithContext(ctx context.Context) SourceSamlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSamlMapOutput)
}

type SourceSamlOutput struct{ *pulumi.OutputState }

func (SourceSamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceSaml)(nil)).Elem()
}

func (o SourceSamlOutput) ToSourceSamlOutput() SourceSamlOutput {
	return o
}

func (o SourceSamlOutput) ToSourceSamlOutputWithContext(ctx context.Context) SourceSamlOutput {
	return o
}

func (o SourceSamlOutput) AllowIdpInitiated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.BoolPtrOutput { return v.AllowIdpInitiated }).(pulumi.BoolPtrOutput)
}

func (o SourceSamlOutput) AuthenticationFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringOutput { return v.AuthenticationFlow }).(pulumi.StringOutput)
}

func (o SourceSamlOutput) BindingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringPtrOutput { return v.BindingType }).(pulumi.StringPtrOutput)
}

func (o SourceSamlOutput) DigestAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringPtrOutput { return v.DigestAlgorithm }).(pulumi.StringPtrOutput)
}

func (o SourceSamlOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o SourceSamlOutput) EnrollmentFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringOutput { return v.EnrollmentFlow }).(pulumi.StringOutput)
}

func (o SourceSamlOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringPtrOutput { return v.Issuer }).(pulumi.StringPtrOutput)
}

// SAML Metadata
func (o SourceSamlOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

func (o SourceSamlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SourceSamlOutput) NameIdPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringPtrOutput { return v.NameIdPolicy }).(pulumi.StringPtrOutput)
}

func (o SourceSamlOutput) PolicyEngineMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringPtrOutput { return v.PolicyEngineMode }).(pulumi.StringPtrOutput)
}

func (o SourceSamlOutput) PreAuthenticationFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringOutput { return v.PreAuthenticationFlow }).(pulumi.StringOutput)
}

func (o SourceSamlOutput) SignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringPtrOutput { return v.SignatureAlgorithm }).(pulumi.StringPtrOutput)
}

func (o SourceSamlOutput) SigningKp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringPtrOutput { return v.SigningKp }).(pulumi.StringPtrOutput)
}

func (o SourceSamlOutput) SloUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringPtrOutput { return v.SloUrl }).(pulumi.StringPtrOutput)
}

func (o SourceSamlOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o SourceSamlOutput) SsoUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringOutput { return v.SsoUrl }).(pulumi.StringOutput)
}

func (o SourceSamlOutput) TemporaryUserDeleteAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringPtrOutput { return v.TemporaryUserDeleteAfter }).(pulumi.StringPtrOutput)
}

func (o SourceSamlOutput) UserMatchingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringPtrOutput { return v.UserMatchingMode }).(pulumi.StringPtrOutput)
}

func (o SourceSamlOutput) UserPathTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringPtrOutput { return v.UserPathTemplate }).(pulumi.StringPtrOutput)
}

func (o SourceSamlOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceSaml) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type SourceSamlArrayOutput struct{ *pulumi.OutputState }

func (SourceSamlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceSaml)(nil)).Elem()
}

func (o SourceSamlArrayOutput) ToSourceSamlArrayOutput() SourceSamlArrayOutput {
	return o
}

func (o SourceSamlArrayOutput) ToSourceSamlArrayOutputWithContext(ctx context.Context) SourceSamlArrayOutput {
	return o
}

func (o SourceSamlArrayOutput) Index(i pulumi.IntInput) SourceSamlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceSaml {
		return vs[0].([]*SourceSaml)[vs[1].(int)]
	}).(SourceSamlOutput)
}

type SourceSamlMapOutput struct{ *pulumi.OutputState }

func (SourceSamlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceSaml)(nil)).Elem()
}

func (o SourceSamlMapOutput) ToSourceSamlMapOutput() SourceSamlMapOutput {
	return o
}

func (o SourceSamlMapOutput) ToSourceSamlMapOutputWithContext(ctx context.Context) SourceSamlMapOutput {
	return o
}

func (o SourceSamlMapOutput) MapIndex(k pulumi.StringInput) SourceSamlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceSaml {
		return vs[0].(map[string]*SourceSaml)[vs[1].(string)]
	}).(SourceSamlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSamlInput)(nil)).Elem(), &SourceSaml{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSamlArrayInput)(nil)).Elem(), SourceSamlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSamlMapInput)(nil)).Elem(), SourceSamlMap{})
	pulumi.RegisterOutputType(SourceSamlOutput{})
	pulumi.RegisterOutputType(SourceSamlArrayOutput{})
	pulumi.RegisterOutputType(SourceSamlMapOutput{})
}
