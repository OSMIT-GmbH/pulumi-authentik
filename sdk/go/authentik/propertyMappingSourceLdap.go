// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage LDAP Source Property mappings
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a custom LDAP source property mapping
//			_, err := authentik.NewPropertyMappingSourceLdap(ctx, "name", &authentik.PropertyMappingSourceLdapArgs{
//				Name:       pulumi.String("custom-field"),
//				Expression: pulumi.String("return ldap.get('sAMAccountName')"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PropertyMappingSourceLdap struct {
	pulumi.CustomResourceState

	Expression pulumi.StringOutput `pulumi:"expression"`
	Name       pulumi.StringOutput `pulumi:"name"`
}

// NewPropertyMappingSourceLdap registers a new resource with the given unique name, arguments, and options.
func NewPropertyMappingSourceLdap(ctx *pulumi.Context,
	name string, args *PropertyMappingSourceLdapArgs, opts ...pulumi.ResourceOption) (*PropertyMappingSourceLdap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PropertyMappingSourceLdap
	err := ctx.RegisterResource("authentik:index/propertyMappingSourceLdap:PropertyMappingSourceLdap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyMappingSourceLdap gets an existing PropertyMappingSourceLdap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyMappingSourceLdap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyMappingSourceLdapState, opts ...pulumi.ResourceOption) (*PropertyMappingSourceLdap, error) {
	var resource PropertyMappingSourceLdap
	err := ctx.ReadResource("authentik:index/propertyMappingSourceLdap:PropertyMappingSourceLdap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyMappingSourceLdap resources.
type propertyMappingSourceLdapState struct {
	Expression *string `pulumi:"expression"`
	Name       *string `pulumi:"name"`
}

type PropertyMappingSourceLdapState struct {
	Expression pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
}

func (PropertyMappingSourceLdapState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingSourceLdapState)(nil)).Elem()
}

type propertyMappingSourceLdapArgs struct {
	Expression string  `pulumi:"expression"`
	Name       *string `pulumi:"name"`
}

// The set of arguments for constructing a PropertyMappingSourceLdap resource.
type PropertyMappingSourceLdapArgs struct {
	Expression pulumi.StringInput
	Name       pulumi.StringPtrInput
}

func (PropertyMappingSourceLdapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingSourceLdapArgs)(nil)).Elem()
}

type PropertyMappingSourceLdapInput interface {
	pulumi.Input

	ToPropertyMappingSourceLdapOutput() PropertyMappingSourceLdapOutput
	ToPropertyMappingSourceLdapOutputWithContext(ctx context.Context) PropertyMappingSourceLdapOutput
}

func (*PropertyMappingSourceLdap) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingSourceLdap)(nil)).Elem()
}

func (i *PropertyMappingSourceLdap) ToPropertyMappingSourceLdapOutput() PropertyMappingSourceLdapOutput {
	return i.ToPropertyMappingSourceLdapOutputWithContext(context.Background())
}

func (i *PropertyMappingSourceLdap) ToPropertyMappingSourceLdapOutputWithContext(ctx context.Context) PropertyMappingSourceLdapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSourceLdapOutput)
}

// PropertyMappingSourceLdapArrayInput is an input type that accepts PropertyMappingSourceLdapArray and PropertyMappingSourceLdapArrayOutput values.
// You can construct a concrete instance of `PropertyMappingSourceLdapArrayInput` via:
//
//	PropertyMappingSourceLdapArray{ PropertyMappingSourceLdapArgs{...} }
type PropertyMappingSourceLdapArrayInput interface {
	pulumi.Input

	ToPropertyMappingSourceLdapArrayOutput() PropertyMappingSourceLdapArrayOutput
	ToPropertyMappingSourceLdapArrayOutputWithContext(context.Context) PropertyMappingSourceLdapArrayOutput
}

type PropertyMappingSourceLdapArray []PropertyMappingSourceLdapInput

func (PropertyMappingSourceLdapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingSourceLdap)(nil)).Elem()
}

func (i PropertyMappingSourceLdapArray) ToPropertyMappingSourceLdapArrayOutput() PropertyMappingSourceLdapArrayOutput {
	return i.ToPropertyMappingSourceLdapArrayOutputWithContext(context.Background())
}

func (i PropertyMappingSourceLdapArray) ToPropertyMappingSourceLdapArrayOutputWithContext(ctx context.Context) PropertyMappingSourceLdapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSourceLdapArrayOutput)
}

// PropertyMappingSourceLdapMapInput is an input type that accepts PropertyMappingSourceLdapMap and PropertyMappingSourceLdapMapOutput values.
// You can construct a concrete instance of `PropertyMappingSourceLdapMapInput` via:
//
//	PropertyMappingSourceLdapMap{ "key": PropertyMappingSourceLdapArgs{...} }
type PropertyMappingSourceLdapMapInput interface {
	pulumi.Input

	ToPropertyMappingSourceLdapMapOutput() PropertyMappingSourceLdapMapOutput
	ToPropertyMappingSourceLdapMapOutputWithContext(context.Context) PropertyMappingSourceLdapMapOutput
}

type PropertyMappingSourceLdapMap map[string]PropertyMappingSourceLdapInput

func (PropertyMappingSourceLdapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingSourceLdap)(nil)).Elem()
}

func (i PropertyMappingSourceLdapMap) ToPropertyMappingSourceLdapMapOutput() PropertyMappingSourceLdapMapOutput {
	return i.ToPropertyMappingSourceLdapMapOutputWithContext(context.Background())
}

func (i PropertyMappingSourceLdapMap) ToPropertyMappingSourceLdapMapOutputWithContext(ctx context.Context) PropertyMappingSourceLdapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSourceLdapMapOutput)
}

type PropertyMappingSourceLdapOutput struct{ *pulumi.OutputState }

func (PropertyMappingSourceLdapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingSourceLdap)(nil)).Elem()
}

func (o PropertyMappingSourceLdapOutput) ToPropertyMappingSourceLdapOutput() PropertyMappingSourceLdapOutput {
	return o
}

func (o PropertyMappingSourceLdapOutput) ToPropertyMappingSourceLdapOutputWithContext(ctx context.Context) PropertyMappingSourceLdapOutput {
	return o
}

func (o PropertyMappingSourceLdapOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingSourceLdap) pulumi.StringOutput { return v.Expression }).(pulumi.StringOutput)
}

func (o PropertyMappingSourceLdapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingSourceLdap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type PropertyMappingSourceLdapArrayOutput struct{ *pulumi.OutputState }

func (PropertyMappingSourceLdapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingSourceLdap)(nil)).Elem()
}

func (o PropertyMappingSourceLdapArrayOutput) ToPropertyMappingSourceLdapArrayOutput() PropertyMappingSourceLdapArrayOutput {
	return o
}

func (o PropertyMappingSourceLdapArrayOutput) ToPropertyMappingSourceLdapArrayOutputWithContext(ctx context.Context) PropertyMappingSourceLdapArrayOutput {
	return o
}

func (o PropertyMappingSourceLdapArrayOutput) Index(i pulumi.IntInput) PropertyMappingSourceLdapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyMappingSourceLdap {
		return vs[0].([]*PropertyMappingSourceLdap)[vs[1].(int)]
	}).(PropertyMappingSourceLdapOutput)
}

type PropertyMappingSourceLdapMapOutput struct{ *pulumi.OutputState }

func (PropertyMappingSourceLdapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingSourceLdap)(nil)).Elem()
}

func (o PropertyMappingSourceLdapMapOutput) ToPropertyMappingSourceLdapMapOutput() PropertyMappingSourceLdapMapOutput {
	return o
}

func (o PropertyMappingSourceLdapMapOutput) ToPropertyMappingSourceLdapMapOutputWithContext(ctx context.Context) PropertyMappingSourceLdapMapOutput {
	return o
}

func (o PropertyMappingSourceLdapMapOutput) MapIndex(k pulumi.StringInput) PropertyMappingSourceLdapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyMappingSourceLdap {
		return vs[0].(map[string]*PropertyMappingSourceLdap)[vs[1].(string)]
	}).(PropertyMappingSourceLdapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSourceLdapInput)(nil)).Elem(), &PropertyMappingSourceLdap{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSourceLdapArrayInput)(nil)).Elem(), PropertyMappingSourceLdapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSourceLdapMapInput)(nil)).Elem(), PropertyMappingSourceLdapMap{})
	pulumi.RegisterOutputType(PropertyMappingSourceLdapOutput{})
	pulumi.RegisterOutputType(PropertyMappingSourceLdapArrayOutput{})
	pulumi.RegisterOutputType(PropertyMappingSourceLdapMapOutput{})
}
