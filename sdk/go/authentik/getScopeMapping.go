// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get OAuth Scope mappings
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := authentik.LookupScopeMapping(ctx, &authentik.LookupScopeMappingArgs{
//				ManagedLists: []string{
//					"goauthentik.io/providers/oauth2/scope-email",
//					"goauthentik.io/providers/oauth2/scope-openid",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupScopeMapping(ctx *pulumi.Context, args *LookupScopeMappingArgs, opts ...pulumi.InvokeOption) (*LookupScopeMappingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupScopeMappingResult
	err := ctx.Invoke("authentik:index/getScopeMapping:getScopeMapping", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getScopeMapping.
type LookupScopeMappingArgs struct {
	// List of ids when `managedList` is set. Generated.
	Ids     []string `pulumi:"ids"`
	Managed *string  `pulumi:"managed"`
	// Retrive multiple property mappings
	ManagedLists []string `pulumi:"managedLists"`
	Name         *string  `pulumi:"name"`
	// Generated.
	ScopeName *string `pulumi:"scopeName"`
}

// A collection of values returned by getScopeMapping.
type LookupScopeMappingResult struct {
	// Generated.
	Description string `pulumi:"description"`
	// Generated.
	Expression string `pulumi:"expression"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of ids when `managedList` is set. Generated.
	Ids     []string `pulumi:"ids"`
	Managed *string  `pulumi:"managed"`
	// Retrive multiple property mappings
	ManagedLists []string `pulumi:"managedLists"`
	Name         *string  `pulumi:"name"`
	// Generated.
	ScopeName string `pulumi:"scopeName"`
}

func LookupScopeMappingOutput(ctx *pulumi.Context, args LookupScopeMappingOutputArgs, opts ...pulumi.InvokeOption) LookupScopeMappingResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScopeMappingResult, error) {
			args := v.(LookupScopeMappingArgs)
			r, err := LookupScopeMapping(ctx, &args, opts...)
			var s LookupScopeMappingResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupScopeMappingResultOutput)
}

// A collection of arguments for invoking getScopeMapping.
type LookupScopeMappingOutputArgs struct {
	// List of ids when `managedList` is set. Generated.
	Ids     pulumi.StringArrayInput `pulumi:"ids"`
	Managed pulumi.StringPtrInput   `pulumi:"managed"`
	// Retrive multiple property mappings
	ManagedLists pulumi.StringArrayInput `pulumi:"managedLists"`
	Name         pulumi.StringPtrInput   `pulumi:"name"`
	// Generated.
	ScopeName pulumi.StringPtrInput `pulumi:"scopeName"`
}

func (LookupScopeMappingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScopeMappingArgs)(nil)).Elem()
}

// A collection of values returned by getScopeMapping.
type LookupScopeMappingResultOutput struct{ *pulumi.OutputState }

func (LookupScopeMappingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScopeMappingResult)(nil)).Elem()
}

func (o LookupScopeMappingResultOutput) ToLookupScopeMappingResultOutput() LookupScopeMappingResultOutput {
	return o
}

func (o LookupScopeMappingResultOutput) ToLookupScopeMappingResultOutputWithContext(ctx context.Context) LookupScopeMappingResultOutput {
	return o
}

func (o LookupScopeMappingResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupScopeMappingResult] {
	return pulumix.Output[LookupScopeMappingResult]{
		OutputState: o.OutputState,
	}
}

// Generated.
func (o LookupScopeMappingResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeMappingResult) string { return v.Description }).(pulumi.StringOutput)
}

// Generated.
func (o LookupScopeMappingResultOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeMappingResult) string { return v.Expression }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupScopeMappingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeMappingResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of ids when `managedList` is set. Generated.
func (o LookupScopeMappingResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupScopeMappingResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o LookupScopeMappingResultOutput) Managed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeMappingResult) *string { return v.Managed }).(pulumi.StringPtrOutput)
}

// Retrive multiple property mappings
func (o LookupScopeMappingResultOutput) ManagedLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupScopeMappingResult) []string { return v.ManagedLists }).(pulumi.StringArrayOutput)
}

func (o LookupScopeMappingResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeMappingResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Generated.
func (o LookupScopeMappingResultOutput) ScopeName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeMappingResult) string { return v.ScopeName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScopeMappingResultOutput{})
}
