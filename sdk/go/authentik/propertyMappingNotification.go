// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PropertyMappingNotification struct {
	pulumi.CustomResourceState

	Expression pulumi.StringOutput `pulumi:"expression"`
	Name       pulumi.StringOutput `pulumi:"name"`
}

// NewPropertyMappingNotification registers a new resource with the given unique name, arguments, and options.
func NewPropertyMappingNotification(ctx *pulumi.Context,
	name string, args *PropertyMappingNotificationArgs, opts ...pulumi.ResourceOption) (*PropertyMappingNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PropertyMappingNotification
	err := ctx.RegisterResource("authentik:index/propertyMappingNotification:PropertyMappingNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyMappingNotification gets an existing PropertyMappingNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyMappingNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyMappingNotificationState, opts ...pulumi.ResourceOption) (*PropertyMappingNotification, error) {
	var resource PropertyMappingNotification
	err := ctx.ReadResource("authentik:index/propertyMappingNotification:PropertyMappingNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyMappingNotification resources.
type propertyMappingNotificationState struct {
	Expression *string `pulumi:"expression"`
	Name       *string `pulumi:"name"`
}

type PropertyMappingNotificationState struct {
	Expression pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
}

func (PropertyMappingNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingNotificationState)(nil)).Elem()
}

type propertyMappingNotificationArgs struct {
	Expression string  `pulumi:"expression"`
	Name       *string `pulumi:"name"`
}

// The set of arguments for constructing a PropertyMappingNotification resource.
type PropertyMappingNotificationArgs struct {
	Expression pulumi.StringInput
	Name       pulumi.StringPtrInput
}

func (PropertyMappingNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingNotificationArgs)(nil)).Elem()
}

type PropertyMappingNotificationInput interface {
	pulumi.Input

	ToPropertyMappingNotificationOutput() PropertyMappingNotificationOutput
	ToPropertyMappingNotificationOutputWithContext(ctx context.Context) PropertyMappingNotificationOutput
}

func (*PropertyMappingNotification) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingNotification)(nil)).Elem()
}

func (i *PropertyMappingNotification) ToPropertyMappingNotificationOutput() PropertyMappingNotificationOutput {
	return i.ToPropertyMappingNotificationOutputWithContext(context.Background())
}

func (i *PropertyMappingNotification) ToPropertyMappingNotificationOutputWithContext(ctx context.Context) PropertyMappingNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingNotificationOutput)
}

// PropertyMappingNotificationArrayInput is an input type that accepts PropertyMappingNotificationArray and PropertyMappingNotificationArrayOutput values.
// You can construct a concrete instance of `PropertyMappingNotificationArrayInput` via:
//
//	PropertyMappingNotificationArray{ PropertyMappingNotificationArgs{...} }
type PropertyMappingNotificationArrayInput interface {
	pulumi.Input

	ToPropertyMappingNotificationArrayOutput() PropertyMappingNotificationArrayOutput
	ToPropertyMappingNotificationArrayOutputWithContext(context.Context) PropertyMappingNotificationArrayOutput
}

type PropertyMappingNotificationArray []PropertyMappingNotificationInput

func (PropertyMappingNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingNotification)(nil)).Elem()
}

func (i PropertyMappingNotificationArray) ToPropertyMappingNotificationArrayOutput() PropertyMappingNotificationArrayOutput {
	return i.ToPropertyMappingNotificationArrayOutputWithContext(context.Background())
}

func (i PropertyMappingNotificationArray) ToPropertyMappingNotificationArrayOutputWithContext(ctx context.Context) PropertyMappingNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingNotificationArrayOutput)
}

// PropertyMappingNotificationMapInput is an input type that accepts PropertyMappingNotificationMap and PropertyMappingNotificationMapOutput values.
// You can construct a concrete instance of `PropertyMappingNotificationMapInput` via:
//
//	PropertyMappingNotificationMap{ "key": PropertyMappingNotificationArgs{...} }
type PropertyMappingNotificationMapInput interface {
	pulumi.Input

	ToPropertyMappingNotificationMapOutput() PropertyMappingNotificationMapOutput
	ToPropertyMappingNotificationMapOutputWithContext(context.Context) PropertyMappingNotificationMapOutput
}

type PropertyMappingNotificationMap map[string]PropertyMappingNotificationInput

func (PropertyMappingNotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingNotification)(nil)).Elem()
}

func (i PropertyMappingNotificationMap) ToPropertyMappingNotificationMapOutput() PropertyMappingNotificationMapOutput {
	return i.ToPropertyMappingNotificationMapOutputWithContext(context.Background())
}

func (i PropertyMappingNotificationMap) ToPropertyMappingNotificationMapOutputWithContext(ctx context.Context) PropertyMappingNotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingNotificationMapOutput)
}

type PropertyMappingNotificationOutput struct{ *pulumi.OutputState }

func (PropertyMappingNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingNotification)(nil)).Elem()
}

func (o PropertyMappingNotificationOutput) ToPropertyMappingNotificationOutput() PropertyMappingNotificationOutput {
	return o
}

func (o PropertyMappingNotificationOutput) ToPropertyMappingNotificationOutputWithContext(ctx context.Context) PropertyMappingNotificationOutput {
	return o
}

func (o PropertyMappingNotificationOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingNotification) pulumi.StringOutput { return v.Expression }).(pulumi.StringOutput)
}

func (o PropertyMappingNotificationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingNotification) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type PropertyMappingNotificationArrayOutput struct{ *pulumi.OutputState }

func (PropertyMappingNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingNotification)(nil)).Elem()
}

func (o PropertyMappingNotificationArrayOutput) ToPropertyMappingNotificationArrayOutput() PropertyMappingNotificationArrayOutput {
	return o
}

func (o PropertyMappingNotificationArrayOutput) ToPropertyMappingNotificationArrayOutputWithContext(ctx context.Context) PropertyMappingNotificationArrayOutput {
	return o
}

func (o PropertyMappingNotificationArrayOutput) Index(i pulumi.IntInput) PropertyMappingNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyMappingNotification {
		return vs[0].([]*PropertyMappingNotification)[vs[1].(int)]
	}).(PropertyMappingNotificationOutput)
}

type PropertyMappingNotificationMapOutput struct{ *pulumi.OutputState }

func (PropertyMappingNotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingNotification)(nil)).Elem()
}

func (o PropertyMappingNotificationMapOutput) ToPropertyMappingNotificationMapOutput() PropertyMappingNotificationMapOutput {
	return o
}

func (o PropertyMappingNotificationMapOutput) ToPropertyMappingNotificationMapOutputWithContext(ctx context.Context) PropertyMappingNotificationMapOutput {
	return o
}

func (o PropertyMappingNotificationMapOutput) MapIndex(k pulumi.StringInput) PropertyMappingNotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyMappingNotification {
		return vs[0].(map[string]*PropertyMappingNotification)[vs[1].(string)]
	}).(PropertyMappingNotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingNotificationInput)(nil)).Elem(), &PropertyMappingNotification{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingNotificationArrayInput)(nil)).Elem(), PropertyMappingNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingNotificationMapInput)(nil)).Elem(), PropertyMappingNotificationMap{})
	pulumi.RegisterOutputType(PropertyMappingNotificationOutput{})
	pulumi.RegisterOutputType(PropertyMappingNotificationArrayOutput{})
	pulumi.RegisterOutputType(PropertyMappingNotificationMapOutput{})
}
