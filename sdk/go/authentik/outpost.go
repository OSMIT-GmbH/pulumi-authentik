// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/v2024/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/v2024/go/authentik"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			default_authorization_flow, err := authentik.LookupFlow(ctx, &authentik.LookupFlowArgs{
//				Slug: pulumi.StringRef("default-provider-authorization-implicit-consent"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			proxy, err := authentik.NewProviderProxy(ctx, "proxy", &authentik.ProviderProxyArgs{
//				AuthorizationFlow: pulumi.String(default_authorization_flow.Id),
//				ExternalHost:      pulumi.String("http://foo.bar.baz"),
//				InternalHost:      pulumi.String("http://internal.local"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authentik.NewOutpost(ctx, "outpost", &authentik.OutpostArgs{
//				ProtocolProviders: pulumi.IntArray{
//					proxy.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Outpost struct {
	pulumi.CustomResourceState

	// JSON format expected. Use jsonencode() to pass objects.
	Config            pulumi.StringOutput    `pulumi:"config"`
	Name              pulumi.StringOutput    `pulumi:"name"`
	ProtocolProviders pulumi.IntArrayOutput  `pulumi:"protocolProviders"`
	ServiceConnection pulumi.StringPtrOutput `pulumi:"serviceConnection"`
	// Allowed values: - `proxy` - `ldap` - `radius` - `rac`
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewOutpost registers a new resource with the given unique name, arguments, and options.
func NewOutpost(ctx *pulumi.Context,
	name string, args *OutpostArgs, opts ...pulumi.ResourceOption) (*Outpost, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProtocolProviders == nil {
		return nil, errors.New("invalid value for required argument 'ProtocolProviders'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Outpost
	err := ctx.RegisterResource("authentik:index/outpost:Outpost", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOutpost gets an existing Outpost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOutpost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OutpostState, opts ...pulumi.ResourceOption) (*Outpost, error) {
	var resource Outpost
	err := ctx.ReadResource("authentik:index/outpost:Outpost", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Outpost resources.
type outpostState struct {
	// JSON format expected. Use jsonencode() to pass objects.
	Config            *string `pulumi:"config"`
	Name              *string `pulumi:"name"`
	ProtocolProviders []int   `pulumi:"protocolProviders"`
	ServiceConnection *string `pulumi:"serviceConnection"`
	// Allowed values: - `proxy` - `ldap` - `radius` - `rac`
	Type *string `pulumi:"type"`
}

type OutpostState struct {
	// JSON format expected. Use jsonencode() to pass objects.
	Config            pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	ProtocolProviders pulumi.IntArrayInput
	ServiceConnection pulumi.StringPtrInput
	// Allowed values: - `proxy` - `ldap` - `radius` - `rac`
	Type pulumi.StringPtrInput
}

func (OutpostState) ElementType() reflect.Type {
	return reflect.TypeOf((*outpostState)(nil)).Elem()
}

type outpostArgs struct {
	// JSON format expected. Use jsonencode() to pass objects.
	Config            *string `pulumi:"config"`
	Name              *string `pulumi:"name"`
	ProtocolProviders []int   `pulumi:"protocolProviders"`
	ServiceConnection *string `pulumi:"serviceConnection"`
	// Allowed values: - `proxy` - `ldap` - `radius` - `rac`
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Outpost resource.
type OutpostArgs struct {
	// JSON format expected. Use jsonencode() to pass objects.
	Config            pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	ProtocolProviders pulumi.IntArrayInput
	ServiceConnection pulumi.StringPtrInput
	// Allowed values: - `proxy` - `ldap` - `radius` - `rac`
	Type pulumi.StringPtrInput
}

func (OutpostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*outpostArgs)(nil)).Elem()
}

type OutpostInput interface {
	pulumi.Input

	ToOutpostOutput() OutpostOutput
	ToOutpostOutputWithContext(ctx context.Context) OutpostOutput
}

func (*Outpost) ElementType() reflect.Type {
	return reflect.TypeOf((**Outpost)(nil)).Elem()
}

func (i *Outpost) ToOutpostOutput() OutpostOutput {
	return i.ToOutpostOutputWithContext(context.Background())
}

func (i *Outpost) ToOutpostOutputWithContext(ctx context.Context) OutpostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutpostOutput)
}

// OutpostArrayInput is an input type that accepts OutpostArray and OutpostArrayOutput values.
// You can construct a concrete instance of `OutpostArrayInput` via:
//
//	OutpostArray{ OutpostArgs{...} }
type OutpostArrayInput interface {
	pulumi.Input

	ToOutpostArrayOutput() OutpostArrayOutput
	ToOutpostArrayOutputWithContext(context.Context) OutpostArrayOutput
}

type OutpostArray []OutpostInput

func (OutpostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Outpost)(nil)).Elem()
}

func (i OutpostArray) ToOutpostArrayOutput() OutpostArrayOutput {
	return i.ToOutpostArrayOutputWithContext(context.Background())
}

func (i OutpostArray) ToOutpostArrayOutputWithContext(ctx context.Context) OutpostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutpostArrayOutput)
}

// OutpostMapInput is an input type that accepts OutpostMap and OutpostMapOutput values.
// You can construct a concrete instance of `OutpostMapInput` via:
//
//	OutpostMap{ "key": OutpostArgs{...} }
type OutpostMapInput interface {
	pulumi.Input

	ToOutpostMapOutput() OutpostMapOutput
	ToOutpostMapOutputWithContext(context.Context) OutpostMapOutput
}

type OutpostMap map[string]OutpostInput

func (OutpostMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Outpost)(nil)).Elem()
}

func (i OutpostMap) ToOutpostMapOutput() OutpostMapOutput {
	return i.ToOutpostMapOutputWithContext(context.Background())
}

func (i OutpostMap) ToOutpostMapOutputWithContext(ctx context.Context) OutpostMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutpostMapOutput)
}

type OutpostOutput struct{ *pulumi.OutputState }

func (OutpostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Outpost)(nil)).Elem()
}

func (o OutpostOutput) ToOutpostOutput() OutpostOutput {
	return o
}

func (o OutpostOutput) ToOutpostOutputWithContext(ctx context.Context) OutpostOutput {
	return o
}

// JSON format expected. Use jsonencode() to pass objects.
func (o OutpostOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *Outpost) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

func (o OutpostOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Outpost) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o OutpostOutput) ProtocolProviders() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Outpost) pulumi.IntArrayOutput { return v.ProtocolProviders }).(pulumi.IntArrayOutput)
}

func (o OutpostOutput) ServiceConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Outpost) pulumi.StringPtrOutput { return v.ServiceConnection }).(pulumi.StringPtrOutput)
}

// Allowed values: - `proxy` - `ldap` - `radius` - `rac`
func (o OutpostOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Outpost) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type OutpostArrayOutput struct{ *pulumi.OutputState }

func (OutpostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Outpost)(nil)).Elem()
}

func (o OutpostArrayOutput) ToOutpostArrayOutput() OutpostArrayOutput {
	return o
}

func (o OutpostArrayOutput) ToOutpostArrayOutputWithContext(ctx context.Context) OutpostArrayOutput {
	return o
}

func (o OutpostArrayOutput) Index(i pulumi.IntInput) OutpostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Outpost {
		return vs[0].([]*Outpost)[vs[1].(int)]
	}).(OutpostOutput)
}

type OutpostMapOutput struct{ *pulumi.OutputState }

func (OutpostMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Outpost)(nil)).Elem()
}

func (o OutpostMapOutput) ToOutpostMapOutput() OutpostMapOutput {
	return o
}

func (o OutpostMapOutput) ToOutpostMapOutputWithContext(ctx context.Context) OutpostMapOutput {
	return o
}

func (o OutpostMapOutput) MapIndex(k pulumi.StringInput) OutpostOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Outpost {
		return vs[0].(map[string]*Outpost)[vs[1].(string)]
	}).(OutpostOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OutpostInput)(nil)).Elem(), &Outpost{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutpostArrayInput)(nil)).Elem(), OutpostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutpostMapInput)(nil)).Elem(), OutpostMap{})
	pulumi.RegisterOutputType(OutpostOutput{})
	pulumi.RegisterOutputType(OutpostArrayOutput{})
	pulumi.RegisterOutputType(OutpostMapOutput{})
}
