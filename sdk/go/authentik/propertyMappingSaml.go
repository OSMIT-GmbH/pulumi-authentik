// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PropertyMappingSaml struct {
	pulumi.CustomResourceState

	Expression   pulumi.StringOutput    `pulumi:"expression"`
	FriendlyName pulumi.StringPtrOutput `pulumi:"friendlyName"`
	Name         pulumi.StringOutput    `pulumi:"name"`
	SamlName     pulumi.StringOutput    `pulumi:"samlName"`
}

// NewPropertyMappingSaml registers a new resource with the given unique name, arguments, and options.
func NewPropertyMappingSaml(ctx *pulumi.Context,
	name string, args *PropertyMappingSamlArgs, opts ...pulumi.ResourceOption) (*PropertyMappingSaml, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	if args.SamlName == nil {
		return nil, errors.New("invalid value for required argument 'SamlName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PropertyMappingSaml
	err := ctx.RegisterResource("authentik:index/propertyMappingSaml:PropertyMappingSaml", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyMappingSaml gets an existing PropertyMappingSaml resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyMappingSaml(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyMappingSamlState, opts ...pulumi.ResourceOption) (*PropertyMappingSaml, error) {
	var resource PropertyMappingSaml
	err := ctx.ReadResource("authentik:index/propertyMappingSaml:PropertyMappingSaml", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyMappingSaml resources.
type propertyMappingSamlState struct {
	Expression   *string `pulumi:"expression"`
	FriendlyName *string `pulumi:"friendlyName"`
	Name         *string `pulumi:"name"`
	SamlName     *string `pulumi:"samlName"`
}

type PropertyMappingSamlState struct {
	Expression   pulumi.StringPtrInput
	FriendlyName pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	SamlName     pulumi.StringPtrInput
}

func (PropertyMappingSamlState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingSamlState)(nil)).Elem()
}

type propertyMappingSamlArgs struct {
	Expression   string  `pulumi:"expression"`
	FriendlyName *string `pulumi:"friendlyName"`
	Name         *string `pulumi:"name"`
	SamlName     string  `pulumi:"samlName"`
}

// The set of arguments for constructing a PropertyMappingSaml resource.
type PropertyMappingSamlArgs struct {
	Expression   pulumi.StringInput
	FriendlyName pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	SamlName     pulumi.StringInput
}

func (PropertyMappingSamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingSamlArgs)(nil)).Elem()
}

type PropertyMappingSamlInput interface {
	pulumi.Input

	ToPropertyMappingSamlOutput() PropertyMappingSamlOutput
	ToPropertyMappingSamlOutputWithContext(ctx context.Context) PropertyMappingSamlOutput
}

func (*PropertyMappingSaml) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingSaml)(nil)).Elem()
}

func (i *PropertyMappingSaml) ToPropertyMappingSamlOutput() PropertyMappingSamlOutput {
	return i.ToPropertyMappingSamlOutputWithContext(context.Background())
}

func (i *PropertyMappingSaml) ToPropertyMappingSamlOutputWithContext(ctx context.Context) PropertyMappingSamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSamlOutput)
}

// PropertyMappingSamlArrayInput is an input type that accepts PropertyMappingSamlArray and PropertyMappingSamlArrayOutput values.
// You can construct a concrete instance of `PropertyMappingSamlArrayInput` via:
//
//	PropertyMappingSamlArray{ PropertyMappingSamlArgs{...} }
type PropertyMappingSamlArrayInput interface {
	pulumi.Input

	ToPropertyMappingSamlArrayOutput() PropertyMappingSamlArrayOutput
	ToPropertyMappingSamlArrayOutputWithContext(context.Context) PropertyMappingSamlArrayOutput
}

type PropertyMappingSamlArray []PropertyMappingSamlInput

func (PropertyMappingSamlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingSaml)(nil)).Elem()
}

func (i PropertyMappingSamlArray) ToPropertyMappingSamlArrayOutput() PropertyMappingSamlArrayOutput {
	return i.ToPropertyMappingSamlArrayOutputWithContext(context.Background())
}

func (i PropertyMappingSamlArray) ToPropertyMappingSamlArrayOutputWithContext(ctx context.Context) PropertyMappingSamlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSamlArrayOutput)
}

// PropertyMappingSamlMapInput is an input type that accepts PropertyMappingSamlMap and PropertyMappingSamlMapOutput values.
// You can construct a concrete instance of `PropertyMappingSamlMapInput` via:
//
//	PropertyMappingSamlMap{ "key": PropertyMappingSamlArgs{...} }
type PropertyMappingSamlMapInput interface {
	pulumi.Input

	ToPropertyMappingSamlMapOutput() PropertyMappingSamlMapOutput
	ToPropertyMappingSamlMapOutputWithContext(context.Context) PropertyMappingSamlMapOutput
}

type PropertyMappingSamlMap map[string]PropertyMappingSamlInput

func (PropertyMappingSamlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingSaml)(nil)).Elem()
}

func (i PropertyMappingSamlMap) ToPropertyMappingSamlMapOutput() PropertyMappingSamlMapOutput {
	return i.ToPropertyMappingSamlMapOutputWithContext(context.Background())
}

func (i PropertyMappingSamlMap) ToPropertyMappingSamlMapOutputWithContext(ctx context.Context) PropertyMappingSamlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSamlMapOutput)
}

type PropertyMappingSamlOutput struct{ *pulumi.OutputState }

func (PropertyMappingSamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingSaml)(nil)).Elem()
}

func (o PropertyMappingSamlOutput) ToPropertyMappingSamlOutput() PropertyMappingSamlOutput {
	return o
}

func (o PropertyMappingSamlOutput) ToPropertyMappingSamlOutputWithContext(ctx context.Context) PropertyMappingSamlOutput {
	return o
}

func (o PropertyMappingSamlOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingSaml) pulumi.StringOutput { return v.Expression }).(pulumi.StringOutput)
}

func (o PropertyMappingSamlOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PropertyMappingSaml) pulumi.StringPtrOutput { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

func (o PropertyMappingSamlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingSaml) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PropertyMappingSamlOutput) SamlName() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingSaml) pulumi.StringOutput { return v.SamlName }).(pulumi.StringOutput)
}

type PropertyMappingSamlArrayOutput struct{ *pulumi.OutputState }

func (PropertyMappingSamlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingSaml)(nil)).Elem()
}

func (o PropertyMappingSamlArrayOutput) ToPropertyMappingSamlArrayOutput() PropertyMappingSamlArrayOutput {
	return o
}

func (o PropertyMappingSamlArrayOutput) ToPropertyMappingSamlArrayOutputWithContext(ctx context.Context) PropertyMappingSamlArrayOutput {
	return o
}

func (o PropertyMappingSamlArrayOutput) Index(i pulumi.IntInput) PropertyMappingSamlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyMappingSaml {
		return vs[0].([]*PropertyMappingSaml)[vs[1].(int)]
	}).(PropertyMappingSamlOutput)
}

type PropertyMappingSamlMapOutput struct{ *pulumi.OutputState }

func (PropertyMappingSamlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingSaml)(nil)).Elem()
}

func (o PropertyMappingSamlMapOutput) ToPropertyMappingSamlMapOutput() PropertyMappingSamlMapOutput {
	return o
}

func (o PropertyMappingSamlMapOutput) ToPropertyMappingSamlMapOutputWithContext(ctx context.Context) PropertyMappingSamlMapOutput {
	return o
}

func (o PropertyMappingSamlMapOutput) MapIndex(k pulumi.StringInput) PropertyMappingSamlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyMappingSaml {
		return vs[0].(map[string]*PropertyMappingSaml)[vs[1].(string)]
	}).(PropertyMappingSamlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSamlInput)(nil)).Elem(), &PropertyMappingSaml{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSamlArrayInput)(nil)).Elem(), PropertyMappingSamlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSamlMapInput)(nil)).Elem(), PropertyMappingSamlMap{})
	pulumi.RegisterOutputType(PropertyMappingSamlOutput{})
	pulumi.RegisterOutputType(PropertyMappingSamlArrayOutput{})
	pulumi.RegisterOutputType(PropertyMappingSamlMapOutput{})
}
