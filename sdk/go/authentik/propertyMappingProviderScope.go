// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage Scope Provider Property mappings
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a scope mapping
//			_, err := authentik.NewPropertyMappingProviderScope(ctx, "name", &authentik.PropertyMappingProviderScopeArgs{
//				Name:       pulumi.String("minio"),
//				ScopeName:  pulumi.String("minio"),
//				Expression: pulumi.String("return {\n  \"policy\": \"readwrite\",\n}\n"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PropertyMappingProviderScope struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	Expression  pulumi.StringOutput    `pulumi:"expression"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	ScopeName   pulumi.StringOutput    `pulumi:"scopeName"`
}

// NewPropertyMappingProviderScope registers a new resource with the given unique name, arguments, and options.
func NewPropertyMappingProviderScope(ctx *pulumi.Context,
	name string, args *PropertyMappingProviderScopeArgs, opts ...pulumi.ResourceOption) (*PropertyMappingProviderScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	if args.ScopeName == nil {
		return nil, errors.New("invalid value for required argument 'ScopeName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PropertyMappingProviderScope
	err := ctx.RegisterResource("authentik:index/propertyMappingProviderScope:PropertyMappingProviderScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyMappingProviderScope gets an existing PropertyMappingProviderScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyMappingProviderScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyMappingProviderScopeState, opts ...pulumi.ResourceOption) (*PropertyMappingProviderScope, error) {
	var resource PropertyMappingProviderScope
	err := ctx.ReadResource("authentik:index/propertyMappingProviderScope:PropertyMappingProviderScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyMappingProviderScope resources.
type propertyMappingProviderScopeState struct {
	Description *string `pulumi:"description"`
	Expression  *string `pulumi:"expression"`
	Name        *string `pulumi:"name"`
	ScopeName   *string `pulumi:"scopeName"`
}

type PropertyMappingProviderScopeState struct {
	Description pulumi.StringPtrInput
	Expression  pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	ScopeName   pulumi.StringPtrInput
}

func (PropertyMappingProviderScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingProviderScopeState)(nil)).Elem()
}

type propertyMappingProviderScopeArgs struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Name        *string `pulumi:"name"`
	ScopeName   string  `pulumi:"scopeName"`
}

// The set of arguments for constructing a PropertyMappingProviderScope resource.
type PropertyMappingProviderScopeArgs struct {
	Description pulumi.StringPtrInput
	Expression  pulumi.StringInput
	Name        pulumi.StringPtrInput
	ScopeName   pulumi.StringInput
}

func (PropertyMappingProviderScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingProviderScopeArgs)(nil)).Elem()
}

type PropertyMappingProviderScopeInput interface {
	pulumi.Input

	ToPropertyMappingProviderScopeOutput() PropertyMappingProviderScopeOutput
	ToPropertyMappingProviderScopeOutputWithContext(ctx context.Context) PropertyMappingProviderScopeOutput
}

func (*PropertyMappingProviderScope) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingProviderScope)(nil)).Elem()
}

func (i *PropertyMappingProviderScope) ToPropertyMappingProviderScopeOutput() PropertyMappingProviderScopeOutput {
	return i.ToPropertyMappingProviderScopeOutputWithContext(context.Background())
}

func (i *PropertyMappingProviderScope) ToPropertyMappingProviderScopeOutputWithContext(ctx context.Context) PropertyMappingProviderScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingProviderScopeOutput)
}

// PropertyMappingProviderScopeArrayInput is an input type that accepts PropertyMappingProviderScopeArray and PropertyMappingProviderScopeArrayOutput values.
// You can construct a concrete instance of `PropertyMappingProviderScopeArrayInput` via:
//
//	PropertyMappingProviderScopeArray{ PropertyMappingProviderScopeArgs{...} }
type PropertyMappingProviderScopeArrayInput interface {
	pulumi.Input

	ToPropertyMappingProviderScopeArrayOutput() PropertyMappingProviderScopeArrayOutput
	ToPropertyMappingProviderScopeArrayOutputWithContext(context.Context) PropertyMappingProviderScopeArrayOutput
}

type PropertyMappingProviderScopeArray []PropertyMappingProviderScopeInput

func (PropertyMappingProviderScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingProviderScope)(nil)).Elem()
}

func (i PropertyMappingProviderScopeArray) ToPropertyMappingProviderScopeArrayOutput() PropertyMappingProviderScopeArrayOutput {
	return i.ToPropertyMappingProviderScopeArrayOutputWithContext(context.Background())
}

func (i PropertyMappingProviderScopeArray) ToPropertyMappingProviderScopeArrayOutputWithContext(ctx context.Context) PropertyMappingProviderScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingProviderScopeArrayOutput)
}

// PropertyMappingProviderScopeMapInput is an input type that accepts PropertyMappingProviderScopeMap and PropertyMappingProviderScopeMapOutput values.
// You can construct a concrete instance of `PropertyMappingProviderScopeMapInput` via:
//
//	PropertyMappingProviderScopeMap{ "key": PropertyMappingProviderScopeArgs{...} }
type PropertyMappingProviderScopeMapInput interface {
	pulumi.Input

	ToPropertyMappingProviderScopeMapOutput() PropertyMappingProviderScopeMapOutput
	ToPropertyMappingProviderScopeMapOutputWithContext(context.Context) PropertyMappingProviderScopeMapOutput
}

type PropertyMappingProviderScopeMap map[string]PropertyMappingProviderScopeInput

func (PropertyMappingProviderScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingProviderScope)(nil)).Elem()
}

func (i PropertyMappingProviderScopeMap) ToPropertyMappingProviderScopeMapOutput() PropertyMappingProviderScopeMapOutput {
	return i.ToPropertyMappingProviderScopeMapOutputWithContext(context.Background())
}

func (i PropertyMappingProviderScopeMap) ToPropertyMappingProviderScopeMapOutputWithContext(ctx context.Context) PropertyMappingProviderScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingProviderScopeMapOutput)
}

type PropertyMappingProviderScopeOutput struct{ *pulumi.OutputState }

func (PropertyMappingProviderScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingProviderScope)(nil)).Elem()
}

func (o PropertyMappingProviderScopeOutput) ToPropertyMappingProviderScopeOutput() PropertyMappingProviderScopeOutput {
	return o
}

func (o PropertyMappingProviderScopeOutput) ToPropertyMappingProviderScopeOutputWithContext(ctx context.Context) PropertyMappingProviderScopeOutput {
	return o
}

func (o PropertyMappingProviderScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PropertyMappingProviderScope) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PropertyMappingProviderScopeOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingProviderScope) pulumi.StringOutput { return v.Expression }).(pulumi.StringOutput)
}

func (o PropertyMappingProviderScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingProviderScope) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PropertyMappingProviderScopeOutput) ScopeName() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingProviderScope) pulumi.StringOutput { return v.ScopeName }).(pulumi.StringOutput)
}

type PropertyMappingProviderScopeArrayOutput struct{ *pulumi.OutputState }

func (PropertyMappingProviderScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingProviderScope)(nil)).Elem()
}

func (o PropertyMappingProviderScopeArrayOutput) ToPropertyMappingProviderScopeArrayOutput() PropertyMappingProviderScopeArrayOutput {
	return o
}

func (o PropertyMappingProviderScopeArrayOutput) ToPropertyMappingProviderScopeArrayOutputWithContext(ctx context.Context) PropertyMappingProviderScopeArrayOutput {
	return o
}

func (o PropertyMappingProviderScopeArrayOutput) Index(i pulumi.IntInput) PropertyMappingProviderScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyMappingProviderScope {
		return vs[0].([]*PropertyMappingProviderScope)[vs[1].(int)]
	}).(PropertyMappingProviderScopeOutput)
}

type PropertyMappingProviderScopeMapOutput struct{ *pulumi.OutputState }

func (PropertyMappingProviderScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingProviderScope)(nil)).Elem()
}

func (o PropertyMappingProviderScopeMapOutput) ToPropertyMappingProviderScopeMapOutput() PropertyMappingProviderScopeMapOutput {
	return o
}

func (o PropertyMappingProviderScopeMapOutput) ToPropertyMappingProviderScopeMapOutputWithContext(ctx context.Context) PropertyMappingProviderScopeMapOutput {
	return o
}

func (o PropertyMappingProviderScopeMapOutput) MapIndex(k pulumi.StringInput) PropertyMappingProviderScopeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyMappingProviderScope {
		return vs[0].(map[string]*PropertyMappingProviderScope)[vs[1].(string)]
	}).(PropertyMappingProviderScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingProviderScopeInput)(nil)).Elem(), &PropertyMappingProviderScope{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingProviderScopeArrayInput)(nil)).Elem(), PropertyMappingProviderScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingProviderScopeMapInput)(nil)).Elem(), PropertyMappingProviderScopeMap{})
	pulumi.RegisterOutputType(PropertyMappingProviderScopeOutput{})
	pulumi.RegisterOutputType(PropertyMappingProviderScopeArrayOutput{})
	pulumi.RegisterOutputType(PropertyMappingProviderScopeMapOutput{})
}
