// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/v2024/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a flow with a stage attached
//			name, err := authentik.NewStageDummy(ctx, "name", &authentik.StageDummyArgs{
//				Name: pulumi.String("test-stage"),
//			})
//			if err != nil {
//				return err
//			}
//			flow, err := authentik.NewFlow(ctx, "flow", &authentik.FlowArgs{
//				Name:        pulumi.String("test-flow"),
//				Title:       pulumi.String("Test flow"),
//				Slug:        pulumi.String("test-flow"),
//				Designation: pulumi.String("authorization"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authentik.NewFlowStageBinding(ctx, "dummy-flow", &authentik.FlowStageBindingArgs{
//				Target: flow.Uuid,
//				Stage:  name.ID(),
//				Order:  pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FlowStageBinding struct {
	pulumi.CustomResourceState

	EvaluateOnPlan pulumi.BoolPtrOutput `pulumi:"evaluateOnPlan"`
	// Allowed values: - `retry` - `restart` - `restartWithContext`
	InvalidResponseAction pulumi.StringPtrOutput `pulumi:"invalidResponseAction"`
	Order                 pulumi.IntOutput       `pulumi:"order"`
	// Allowed values: - `all` - `any`
	PolicyEngineMode   pulumi.StringPtrOutput `pulumi:"policyEngineMode"`
	ReEvaluatePolicies pulumi.BoolPtrOutput   `pulumi:"reEvaluatePolicies"`
	Stage              pulumi.StringOutput    `pulumi:"stage"`
	Target             pulumi.StringOutput    `pulumi:"target"`
}

// NewFlowStageBinding registers a new resource with the given unique name, arguments, and options.
func NewFlowStageBinding(ctx *pulumi.Context,
	name string, args *FlowStageBindingArgs, opts ...pulumi.ResourceOption) (*FlowStageBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Order == nil {
		return nil, errors.New("invalid value for required argument 'Order'")
	}
	if args.Stage == nil {
		return nil, errors.New("invalid value for required argument 'Stage'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlowStageBinding
	err := ctx.RegisterResource("authentik:index/flowStageBinding:FlowStageBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlowStageBinding gets an existing FlowStageBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlowStageBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowStageBindingState, opts ...pulumi.ResourceOption) (*FlowStageBinding, error) {
	var resource FlowStageBinding
	err := ctx.ReadResource("authentik:index/flowStageBinding:FlowStageBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlowStageBinding resources.
type flowStageBindingState struct {
	EvaluateOnPlan *bool `pulumi:"evaluateOnPlan"`
	// Allowed values: - `retry` - `restart` - `restartWithContext`
	InvalidResponseAction *string `pulumi:"invalidResponseAction"`
	Order                 *int    `pulumi:"order"`
	// Allowed values: - `all` - `any`
	PolicyEngineMode   *string `pulumi:"policyEngineMode"`
	ReEvaluatePolicies *bool   `pulumi:"reEvaluatePolicies"`
	Stage              *string `pulumi:"stage"`
	Target             *string `pulumi:"target"`
}

type FlowStageBindingState struct {
	EvaluateOnPlan pulumi.BoolPtrInput
	// Allowed values: - `retry` - `restart` - `restartWithContext`
	InvalidResponseAction pulumi.StringPtrInput
	Order                 pulumi.IntPtrInput
	// Allowed values: - `all` - `any`
	PolicyEngineMode   pulumi.StringPtrInput
	ReEvaluatePolicies pulumi.BoolPtrInput
	Stage              pulumi.StringPtrInput
	Target             pulumi.StringPtrInput
}

func (FlowStageBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowStageBindingState)(nil)).Elem()
}

type flowStageBindingArgs struct {
	EvaluateOnPlan *bool `pulumi:"evaluateOnPlan"`
	// Allowed values: - `retry` - `restart` - `restartWithContext`
	InvalidResponseAction *string `pulumi:"invalidResponseAction"`
	Order                 int     `pulumi:"order"`
	// Allowed values: - `all` - `any`
	PolicyEngineMode   *string `pulumi:"policyEngineMode"`
	ReEvaluatePolicies *bool   `pulumi:"reEvaluatePolicies"`
	Stage              string  `pulumi:"stage"`
	Target             string  `pulumi:"target"`
}

// The set of arguments for constructing a FlowStageBinding resource.
type FlowStageBindingArgs struct {
	EvaluateOnPlan pulumi.BoolPtrInput
	// Allowed values: - `retry` - `restart` - `restartWithContext`
	InvalidResponseAction pulumi.StringPtrInput
	Order                 pulumi.IntInput
	// Allowed values: - `all` - `any`
	PolicyEngineMode   pulumi.StringPtrInput
	ReEvaluatePolicies pulumi.BoolPtrInput
	Stage              pulumi.StringInput
	Target             pulumi.StringInput
}

func (FlowStageBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowStageBindingArgs)(nil)).Elem()
}

type FlowStageBindingInput interface {
	pulumi.Input

	ToFlowStageBindingOutput() FlowStageBindingOutput
	ToFlowStageBindingOutputWithContext(ctx context.Context) FlowStageBindingOutput
}

func (*FlowStageBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowStageBinding)(nil)).Elem()
}

func (i *FlowStageBinding) ToFlowStageBindingOutput() FlowStageBindingOutput {
	return i.ToFlowStageBindingOutputWithContext(context.Background())
}

func (i *FlowStageBinding) ToFlowStageBindingOutputWithContext(ctx context.Context) FlowStageBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowStageBindingOutput)
}

// FlowStageBindingArrayInput is an input type that accepts FlowStageBindingArray and FlowStageBindingArrayOutput values.
// You can construct a concrete instance of `FlowStageBindingArrayInput` via:
//
//	FlowStageBindingArray{ FlowStageBindingArgs{...} }
type FlowStageBindingArrayInput interface {
	pulumi.Input

	ToFlowStageBindingArrayOutput() FlowStageBindingArrayOutput
	ToFlowStageBindingArrayOutputWithContext(context.Context) FlowStageBindingArrayOutput
}

type FlowStageBindingArray []FlowStageBindingInput

func (FlowStageBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowStageBinding)(nil)).Elem()
}

func (i FlowStageBindingArray) ToFlowStageBindingArrayOutput() FlowStageBindingArrayOutput {
	return i.ToFlowStageBindingArrayOutputWithContext(context.Background())
}

func (i FlowStageBindingArray) ToFlowStageBindingArrayOutputWithContext(ctx context.Context) FlowStageBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowStageBindingArrayOutput)
}

// FlowStageBindingMapInput is an input type that accepts FlowStageBindingMap and FlowStageBindingMapOutput values.
// You can construct a concrete instance of `FlowStageBindingMapInput` via:
//
//	FlowStageBindingMap{ "key": FlowStageBindingArgs{...} }
type FlowStageBindingMapInput interface {
	pulumi.Input

	ToFlowStageBindingMapOutput() FlowStageBindingMapOutput
	ToFlowStageBindingMapOutputWithContext(context.Context) FlowStageBindingMapOutput
}

type FlowStageBindingMap map[string]FlowStageBindingInput

func (FlowStageBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowStageBinding)(nil)).Elem()
}

func (i FlowStageBindingMap) ToFlowStageBindingMapOutput() FlowStageBindingMapOutput {
	return i.ToFlowStageBindingMapOutputWithContext(context.Background())
}

func (i FlowStageBindingMap) ToFlowStageBindingMapOutputWithContext(ctx context.Context) FlowStageBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowStageBindingMapOutput)
}

type FlowStageBindingOutput struct{ *pulumi.OutputState }

func (FlowStageBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowStageBinding)(nil)).Elem()
}

func (o FlowStageBindingOutput) ToFlowStageBindingOutput() FlowStageBindingOutput {
	return o
}

func (o FlowStageBindingOutput) ToFlowStageBindingOutputWithContext(ctx context.Context) FlowStageBindingOutput {
	return o
}

func (o FlowStageBindingOutput) EvaluateOnPlan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlowStageBinding) pulumi.BoolPtrOutput { return v.EvaluateOnPlan }).(pulumi.BoolPtrOutput)
}

// Allowed values: - `retry` - `restart` - `restartWithContext`
func (o FlowStageBindingOutput) InvalidResponseAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowStageBinding) pulumi.StringPtrOutput { return v.InvalidResponseAction }).(pulumi.StringPtrOutput)
}

func (o FlowStageBindingOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *FlowStageBinding) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// Allowed values: - `all` - `any`
func (o FlowStageBindingOutput) PolicyEngineMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowStageBinding) pulumi.StringPtrOutput { return v.PolicyEngineMode }).(pulumi.StringPtrOutput)
}

func (o FlowStageBindingOutput) ReEvaluatePolicies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlowStageBinding) pulumi.BoolPtrOutput { return v.ReEvaluatePolicies }).(pulumi.BoolPtrOutput)
}

func (o FlowStageBindingOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowStageBinding) pulumi.StringOutput { return v.Stage }).(pulumi.StringOutput)
}

func (o FlowStageBindingOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowStageBinding) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

type FlowStageBindingArrayOutput struct{ *pulumi.OutputState }

func (FlowStageBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowStageBinding)(nil)).Elem()
}

func (o FlowStageBindingArrayOutput) ToFlowStageBindingArrayOutput() FlowStageBindingArrayOutput {
	return o
}

func (o FlowStageBindingArrayOutput) ToFlowStageBindingArrayOutputWithContext(ctx context.Context) FlowStageBindingArrayOutput {
	return o
}

func (o FlowStageBindingArrayOutput) Index(i pulumi.IntInput) FlowStageBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlowStageBinding {
		return vs[0].([]*FlowStageBinding)[vs[1].(int)]
	}).(FlowStageBindingOutput)
}

type FlowStageBindingMapOutput struct{ *pulumi.OutputState }

func (FlowStageBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowStageBinding)(nil)).Elem()
}

func (o FlowStageBindingMapOutput) ToFlowStageBindingMapOutput() FlowStageBindingMapOutput {
	return o
}

func (o FlowStageBindingMapOutput) ToFlowStageBindingMapOutputWithContext(ctx context.Context) FlowStageBindingMapOutput {
	return o
}

func (o FlowStageBindingMapOutput) MapIndex(k pulumi.StringInput) FlowStageBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlowStageBinding {
		return vs[0].(map[string]*FlowStageBinding)[vs[1].(string)]
	}).(FlowStageBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlowStageBindingInput)(nil)).Elem(), &FlowStageBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowStageBindingArrayInput)(nil)).Elem(), FlowStageBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowStageBindingMapInput)(nil)).Elem(), FlowStageBindingMap{})
	pulumi.RegisterOutputType(FlowStageBindingOutput{})
	pulumi.RegisterOutputType(FlowStageBindingArrayOutput{})
	pulumi.RegisterOutputType(FlowStageBindingMapOutput{})
}
