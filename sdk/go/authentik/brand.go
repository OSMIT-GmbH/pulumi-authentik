// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/v2024/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create/manage a default brand
//			_, err := authentik.NewBrand(ctx, "default", &authentik.BrandArgs{
//				Domain:        pulumi.String("."),
//				Default:       pulumi.Bool(true),
//				BrandingTitle: pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Brand struct {
	pulumi.CustomResourceState

	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Attributes      pulumi.StringPtrOutput `pulumi:"attributes"`
	BrandingFavicon pulumi.StringPtrOutput `pulumi:"brandingFavicon"`
	BrandingLogo    pulumi.StringPtrOutput `pulumi:"brandingLogo"`
	// Defaults to `authentik`.
	BrandingTitle pulumi.StringPtrOutput `pulumi:"brandingTitle"`
	// Defaults to `false`.
	Default            pulumi.BoolPtrOutput   `pulumi:"default"`
	DefaultApplication pulumi.StringPtrOutput `pulumi:"defaultApplication"`
	Domain             pulumi.StringOutput    `pulumi:"domain"`
	FlowAuthentication pulumi.StringPtrOutput `pulumi:"flowAuthentication"`
	FlowDeviceCode     pulumi.StringPtrOutput `pulumi:"flowDeviceCode"`
	FlowInvalidation   pulumi.StringPtrOutput `pulumi:"flowInvalidation"`
	FlowRecovery       pulumi.StringPtrOutput `pulumi:"flowRecovery"`
	FlowUnenrollment   pulumi.StringPtrOutput `pulumi:"flowUnenrollment"`
	FlowUserSettings   pulumi.StringPtrOutput `pulumi:"flowUserSettings"`
	WebCertificate     pulumi.StringPtrOutput `pulumi:"webCertificate"`
}

// NewBrand registers a new resource with the given unique name, arguments, and options.
func NewBrand(ctx *pulumi.Context,
	name string, args *BrandArgs, opts ...pulumi.ResourceOption) (*Brand, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Brand
	err := ctx.RegisterResource("authentik:index/brand:Brand", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBrand gets an existing Brand resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBrand(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrandState, opts ...pulumi.ResourceOption) (*Brand, error) {
	var resource Brand
	err := ctx.ReadResource("authentik:index/brand:Brand", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Brand resources.
type brandState struct {
	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Attributes      *string `pulumi:"attributes"`
	BrandingFavicon *string `pulumi:"brandingFavicon"`
	BrandingLogo    *string `pulumi:"brandingLogo"`
	// Defaults to `authentik`.
	BrandingTitle *string `pulumi:"brandingTitle"`
	// Defaults to `false`.
	Default            *bool   `pulumi:"default"`
	DefaultApplication *string `pulumi:"defaultApplication"`
	Domain             *string `pulumi:"domain"`
	FlowAuthentication *string `pulumi:"flowAuthentication"`
	FlowDeviceCode     *string `pulumi:"flowDeviceCode"`
	FlowInvalidation   *string `pulumi:"flowInvalidation"`
	FlowRecovery       *string `pulumi:"flowRecovery"`
	FlowUnenrollment   *string `pulumi:"flowUnenrollment"`
	FlowUserSettings   *string `pulumi:"flowUserSettings"`
	WebCertificate     *string `pulumi:"webCertificate"`
}

type BrandState struct {
	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Attributes      pulumi.StringPtrInput
	BrandingFavicon pulumi.StringPtrInput
	BrandingLogo    pulumi.StringPtrInput
	// Defaults to `authentik`.
	BrandingTitle pulumi.StringPtrInput
	// Defaults to `false`.
	Default            pulumi.BoolPtrInput
	DefaultApplication pulumi.StringPtrInput
	Domain             pulumi.StringPtrInput
	FlowAuthentication pulumi.StringPtrInput
	FlowDeviceCode     pulumi.StringPtrInput
	FlowInvalidation   pulumi.StringPtrInput
	FlowRecovery       pulumi.StringPtrInput
	FlowUnenrollment   pulumi.StringPtrInput
	FlowUserSettings   pulumi.StringPtrInput
	WebCertificate     pulumi.StringPtrInput
}

func (BrandState) ElementType() reflect.Type {
	return reflect.TypeOf((*brandState)(nil)).Elem()
}

type brandArgs struct {
	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Attributes      *string `pulumi:"attributes"`
	BrandingFavicon *string `pulumi:"brandingFavicon"`
	BrandingLogo    *string `pulumi:"brandingLogo"`
	// Defaults to `authentik`.
	BrandingTitle *string `pulumi:"brandingTitle"`
	// Defaults to `false`.
	Default            *bool   `pulumi:"default"`
	DefaultApplication *string `pulumi:"defaultApplication"`
	Domain             string  `pulumi:"domain"`
	FlowAuthentication *string `pulumi:"flowAuthentication"`
	FlowDeviceCode     *string `pulumi:"flowDeviceCode"`
	FlowInvalidation   *string `pulumi:"flowInvalidation"`
	FlowRecovery       *string `pulumi:"flowRecovery"`
	FlowUnenrollment   *string `pulumi:"flowUnenrollment"`
	FlowUserSettings   *string `pulumi:"flowUserSettings"`
	WebCertificate     *string `pulumi:"webCertificate"`
}

// The set of arguments for constructing a Brand resource.
type BrandArgs struct {
	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Attributes      pulumi.StringPtrInput
	BrandingFavicon pulumi.StringPtrInput
	BrandingLogo    pulumi.StringPtrInput
	// Defaults to `authentik`.
	BrandingTitle pulumi.StringPtrInput
	// Defaults to `false`.
	Default            pulumi.BoolPtrInput
	DefaultApplication pulumi.StringPtrInput
	Domain             pulumi.StringInput
	FlowAuthentication pulumi.StringPtrInput
	FlowDeviceCode     pulumi.StringPtrInput
	FlowInvalidation   pulumi.StringPtrInput
	FlowRecovery       pulumi.StringPtrInput
	FlowUnenrollment   pulumi.StringPtrInput
	FlowUserSettings   pulumi.StringPtrInput
	WebCertificate     pulumi.StringPtrInput
}

func (BrandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*brandArgs)(nil)).Elem()
}

type BrandInput interface {
	pulumi.Input

	ToBrandOutput() BrandOutput
	ToBrandOutputWithContext(ctx context.Context) BrandOutput
}

func (*Brand) ElementType() reflect.Type {
	return reflect.TypeOf((**Brand)(nil)).Elem()
}

func (i *Brand) ToBrandOutput() BrandOutput {
	return i.ToBrandOutputWithContext(context.Background())
}

func (i *Brand) ToBrandOutputWithContext(ctx context.Context) BrandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrandOutput)
}

// BrandArrayInput is an input type that accepts BrandArray and BrandArrayOutput values.
// You can construct a concrete instance of `BrandArrayInput` via:
//
//	BrandArray{ BrandArgs{...} }
type BrandArrayInput interface {
	pulumi.Input

	ToBrandArrayOutput() BrandArrayOutput
	ToBrandArrayOutputWithContext(context.Context) BrandArrayOutput
}

type BrandArray []BrandInput

func (BrandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Brand)(nil)).Elem()
}

func (i BrandArray) ToBrandArrayOutput() BrandArrayOutput {
	return i.ToBrandArrayOutputWithContext(context.Background())
}

func (i BrandArray) ToBrandArrayOutputWithContext(ctx context.Context) BrandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrandArrayOutput)
}

// BrandMapInput is an input type that accepts BrandMap and BrandMapOutput values.
// You can construct a concrete instance of `BrandMapInput` via:
//
//	BrandMap{ "key": BrandArgs{...} }
type BrandMapInput interface {
	pulumi.Input

	ToBrandMapOutput() BrandMapOutput
	ToBrandMapOutputWithContext(context.Context) BrandMapOutput
}

type BrandMap map[string]BrandInput

func (BrandMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Brand)(nil)).Elem()
}

func (i BrandMap) ToBrandMapOutput() BrandMapOutput {
	return i.ToBrandMapOutputWithContext(context.Background())
}

func (i BrandMap) ToBrandMapOutputWithContext(ctx context.Context) BrandMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrandMapOutput)
}

type BrandOutput struct{ *pulumi.OutputState }

func (BrandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Brand)(nil)).Elem()
}

func (o BrandOutput) ToBrandOutput() BrandOutput {
	return o
}

func (o BrandOutput) ToBrandOutputWithContext(ctx context.Context) BrandOutput {
	return o
}

// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
func (o BrandOutput) Attributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Brand) pulumi.StringPtrOutput { return v.Attributes }).(pulumi.StringPtrOutput)
}

func (o BrandOutput) BrandingFavicon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Brand) pulumi.StringPtrOutput { return v.BrandingFavicon }).(pulumi.StringPtrOutput)
}

func (o BrandOutput) BrandingLogo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Brand) pulumi.StringPtrOutput { return v.BrandingLogo }).(pulumi.StringPtrOutput)
}

// Defaults to `authentik`.
func (o BrandOutput) BrandingTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Brand) pulumi.StringPtrOutput { return v.BrandingTitle }).(pulumi.StringPtrOutput)
}

// Defaults to `false`.
func (o BrandOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Brand) pulumi.BoolPtrOutput { return v.Default }).(pulumi.BoolPtrOutput)
}

func (o BrandOutput) DefaultApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Brand) pulumi.StringPtrOutput { return v.DefaultApplication }).(pulumi.StringPtrOutput)
}

func (o BrandOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Brand) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o BrandOutput) FlowAuthentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Brand) pulumi.StringPtrOutput { return v.FlowAuthentication }).(pulumi.StringPtrOutput)
}

func (o BrandOutput) FlowDeviceCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Brand) pulumi.StringPtrOutput { return v.FlowDeviceCode }).(pulumi.StringPtrOutput)
}

func (o BrandOutput) FlowInvalidation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Brand) pulumi.StringPtrOutput { return v.FlowInvalidation }).(pulumi.StringPtrOutput)
}

func (o BrandOutput) FlowRecovery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Brand) pulumi.StringPtrOutput { return v.FlowRecovery }).(pulumi.StringPtrOutput)
}

func (o BrandOutput) FlowUnenrollment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Brand) pulumi.StringPtrOutput { return v.FlowUnenrollment }).(pulumi.StringPtrOutput)
}

func (o BrandOutput) FlowUserSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Brand) pulumi.StringPtrOutput { return v.FlowUserSettings }).(pulumi.StringPtrOutput)
}

func (o BrandOutput) WebCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Brand) pulumi.StringPtrOutput { return v.WebCertificate }).(pulumi.StringPtrOutput)
}

type BrandArrayOutput struct{ *pulumi.OutputState }

func (BrandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Brand)(nil)).Elem()
}

func (o BrandArrayOutput) ToBrandArrayOutput() BrandArrayOutput {
	return o
}

func (o BrandArrayOutput) ToBrandArrayOutputWithContext(ctx context.Context) BrandArrayOutput {
	return o
}

func (o BrandArrayOutput) Index(i pulumi.IntInput) BrandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Brand {
		return vs[0].([]*Brand)[vs[1].(int)]
	}).(BrandOutput)
}

type BrandMapOutput struct{ *pulumi.OutputState }

func (BrandMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Brand)(nil)).Elem()
}

func (o BrandMapOutput) ToBrandMapOutput() BrandMapOutput {
	return o
}

func (o BrandMapOutput) ToBrandMapOutputWithContext(ctx context.Context) BrandMapOutput {
	return o
}

func (o BrandMapOutput) MapIndex(k pulumi.StringInput) BrandOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Brand {
		return vs[0].(map[string]*Brand)[vs[1].(string)]
	}).(BrandOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrandInput)(nil)).Elem(), &Brand{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrandArrayInput)(nil)).Elem(), BrandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrandMapInput)(nil)).Elem(), BrandMap{})
	pulumi.RegisterOutputType(BrandOutput{})
	pulumi.RegisterOutputType(BrandArrayOutput{})
	pulumi.RegisterOutputType(BrandMapOutput{})
}
