// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage Kerberos Source Property mappings
type PropertyMappingSourceKerberos struct {
	pulumi.CustomResourceState

	Expression pulumi.StringOutput `pulumi:"expression"`
	Name       pulumi.StringOutput `pulumi:"name"`
}

// NewPropertyMappingSourceKerberos registers a new resource with the given unique name, arguments, and options.
func NewPropertyMappingSourceKerberos(ctx *pulumi.Context,
	name string, args *PropertyMappingSourceKerberosArgs, opts ...pulumi.ResourceOption) (*PropertyMappingSourceKerberos, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PropertyMappingSourceKerberos
	err := ctx.RegisterResource("authentik:index/propertyMappingSourceKerberos:PropertyMappingSourceKerberos", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyMappingSourceKerberos gets an existing PropertyMappingSourceKerberos resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyMappingSourceKerberos(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyMappingSourceKerberosState, opts ...pulumi.ResourceOption) (*PropertyMappingSourceKerberos, error) {
	var resource PropertyMappingSourceKerberos
	err := ctx.ReadResource("authentik:index/propertyMappingSourceKerberos:PropertyMappingSourceKerberos", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyMappingSourceKerberos resources.
type propertyMappingSourceKerberosState struct {
	Expression *string `pulumi:"expression"`
	Name       *string `pulumi:"name"`
}

type PropertyMappingSourceKerberosState struct {
	Expression pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
}

func (PropertyMappingSourceKerberosState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingSourceKerberosState)(nil)).Elem()
}

type propertyMappingSourceKerberosArgs struct {
	Expression string  `pulumi:"expression"`
	Name       *string `pulumi:"name"`
}

// The set of arguments for constructing a PropertyMappingSourceKerberos resource.
type PropertyMappingSourceKerberosArgs struct {
	Expression pulumi.StringInput
	Name       pulumi.StringPtrInput
}

func (PropertyMappingSourceKerberosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingSourceKerberosArgs)(nil)).Elem()
}

type PropertyMappingSourceKerberosInput interface {
	pulumi.Input

	ToPropertyMappingSourceKerberosOutput() PropertyMappingSourceKerberosOutput
	ToPropertyMappingSourceKerberosOutputWithContext(ctx context.Context) PropertyMappingSourceKerberosOutput
}

func (*PropertyMappingSourceKerberos) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingSourceKerberos)(nil)).Elem()
}

func (i *PropertyMappingSourceKerberos) ToPropertyMappingSourceKerberosOutput() PropertyMappingSourceKerberosOutput {
	return i.ToPropertyMappingSourceKerberosOutputWithContext(context.Background())
}

func (i *PropertyMappingSourceKerberos) ToPropertyMappingSourceKerberosOutputWithContext(ctx context.Context) PropertyMappingSourceKerberosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSourceKerberosOutput)
}

// PropertyMappingSourceKerberosArrayInput is an input type that accepts PropertyMappingSourceKerberosArray and PropertyMappingSourceKerberosArrayOutput values.
// You can construct a concrete instance of `PropertyMappingSourceKerberosArrayInput` via:
//
//	PropertyMappingSourceKerberosArray{ PropertyMappingSourceKerberosArgs{...} }
type PropertyMappingSourceKerberosArrayInput interface {
	pulumi.Input

	ToPropertyMappingSourceKerberosArrayOutput() PropertyMappingSourceKerberosArrayOutput
	ToPropertyMappingSourceKerberosArrayOutputWithContext(context.Context) PropertyMappingSourceKerberosArrayOutput
}

type PropertyMappingSourceKerberosArray []PropertyMappingSourceKerberosInput

func (PropertyMappingSourceKerberosArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingSourceKerberos)(nil)).Elem()
}

func (i PropertyMappingSourceKerberosArray) ToPropertyMappingSourceKerberosArrayOutput() PropertyMappingSourceKerberosArrayOutput {
	return i.ToPropertyMappingSourceKerberosArrayOutputWithContext(context.Background())
}

func (i PropertyMappingSourceKerberosArray) ToPropertyMappingSourceKerberosArrayOutputWithContext(ctx context.Context) PropertyMappingSourceKerberosArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSourceKerberosArrayOutput)
}

// PropertyMappingSourceKerberosMapInput is an input type that accepts PropertyMappingSourceKerberosMap and PropertyMappingSourceKerberosMapOutput values.
// You can construct a concrete instance of `PropertyMappingSourceKerberosMapInput` via:
//
//	PropertyMappingSourceKerberosMap{ "key": PropertyMappingSourceKerberosArgs{...} }
type PropertyMappingSourceKerberosMapInput interface {
	pulumi.Input

	ToPropertyMappingSourceKerberosMapOutput() PropertyMappingSourceKerberosMapOutput
	ToPropertyMappingSourceKerberosMapOutputWithContext(context.Context) PropertyMappingSourceKerberosMapOutput
}

type PropertyMappingSourceKerberosMap map[string]PropertyMappingSourceKerberosInput

func (PropertyMappingSourceKerberosMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingSourceKerberos)(nil)).Elem()
}

func (i PropertyMappingSourceKerberosMap) ToPropertyMappingSourceKerberosMapOutput() PropertyMappingSourceKerberosMapOutput {
	return i.ToPropertyMappingSourceKerberosMapOutputWithContext(context.Background())
}

func (i PropertyMappingSourceKerberosMap) ToPropertyMappingSourceKerberosMapOutputWithContext(ctx context.Context) PropertyMappingSourceKerberosMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSourceKerberosMapOutput)
}

type PropertyMappingSourceKerberosOutput struct{ *pulumi.OutputState }

func (PropertyMappingSourceKerberosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingSourceKerberos)(nil)).Elem()
}

func (o PropertyMappingSourceKerberosOutput) ToPropertyMappingSourceKerberosOutput() PropertyMappingSourceKerberosOutput {
	return o
}

func (o PropertyMappingSourceKerberosOutput) ToPropertyMappingSourceKerberosOutputWithContext(ctx context.Context) PropertyMappingSourceKerberosOutput {
	return o
}

func (o PropertyMappingSourceKerberosOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingSourceKerberos) pulumi.StringOutput { return v.Expression }).(pulumi.StringOutput)
}

func (o PropertyMappingSourceKerberosOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingSourceKerberos) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type PropertyMappingSourceKerberosArrayOutput struct{ *pulumi.OutputState }

func (PropertyMappingSourceKerberosArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingSourceKerberos)(nil)).Elem()
}

func (o PropertyMappingSourceKerberosArrayOutput) ToPropertyMappingSourceKerberosArrayOutput() PropertyMappingSourceKerberosArrayOutput {
	return o
}

func (o PropertyMappingSourceKerberosArrayOutput) ToPropertyMappingSourceKerberosArrayOutputWithContext(ctx context.Context) PropertyMappingSourceKerberosArrayOutput {
	return o
}

func (o PropertyMappingSourceKerberosArrayOutput) Index(i pulumi.IntInput) PropertyMappingSourceKerberosOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyMappingSourceKerberos {
		return vs[0].([]*PropertyMappingSourceKerberos)[vs[1].(int)]
	}).(PropertyMappingSourceKerberosOutput)
}

type PropertyMappingSourceKerberosMapOutput struct{ *pulumi.OutputState }

func (PropertyMappingSourceKerberosMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingSourceKerberos)(nil)).Elem()
}

func (o PropertyMappingSourceKerberosMapOutput) ToPropertyMappingSourceKerberosMapOutput() PropertyMappingSourceKerberosMapOutput {
	return o
}

func (o PropertyMappingSourceKerberosMapOutput) ToPropertyMappingSourceKerberosMapOutputWithContext(ctx context.Context) PropertyMappingSourceKerberosMapOutput {
	return o
}

func (o PropertyMappingSourceKerberosMapOutput) MapIndex(k pulumi.StringInput) PropertyMappingSourceKerberosOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyMappingSourceKerberos {
		return vs[0].(map[string]*PropertyMappingSourceKerberos)[vs[1].(string)]
	}).(PropertyMappingSourceKerberosOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSourceKerberosInput)(nil)).Elem(), &PropertyMappingSourceKerberos{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSourceKerberosArrayInput)(nil)).Elem(), PropertyMappingSourceKerberosArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSourceKerberosMapInput)(nil)).Elem(), PropertyMappingSourceKerberosMap{})
	pulumi.RegisterOutputType(PropertyMappingSourceKerberosOutput{})
	pulumi.RegisterOutputType(PropertyMappingSourceKerberosArrayOutput{})
	pulumi.RegisterOutputType(PropertyMappingSourceKerberosMapOutput{})
}
