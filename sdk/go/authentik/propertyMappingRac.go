// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage RAC Provider Property mappings
//
// > This resource is deprecated. Migrate to `PropertyMappingProviderRac`.
type PropertyMappingRac struct {
	pulumi.CustomResourceState

	Expression pulumi.StringPtrOutput `pulumi:"expression"`
	Name       pulumi.StringOutput    `pulumi:"name"`
	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Settings pulumi.StringPtrOutput `pulumi:"settings"`
}

// NewPropertyMappingRac registers a new resource with the given unique name, arguments, and options.
func NewPropertyMappingRac(ctx *pulumi.Context,
	name string, args *PropertyMappingRacArgs, opts ...pulumi.ResourceOption) (*PropertyMappingRac, error) {
	if args == nil {
		args = &PropertyMappingRacArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PropertyMappingRac
	err := ctx.RegisterResource("authentik:index/propertyMappingRac:PropertyMappingRac", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyMappingRac gets an existing PropertyMappingRac resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyMappingRac(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyMappingRacState, opts ...pulumi.ResourceOption) (*PropertyMappingRac, error) {
	var resource PropertyMappingRac
	err := ctx.ReadResource("authentik:index/propertyMappingRac:PropertyMappingRac", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyMappingRac resources.
type propertyMappingRacState struct {
	Expression *string `pulumi:"expression"`
	Name       *string `pulumi:"name"`
	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Settings *string `pulumi:"settings"`
}

type PropertyMappingRacState struct {
	Expression pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Settings pulumi.StringPtrInput
}

func (PropertyMappingRacState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingRacState)(nil)).Elem()
}

type propertyMappingRacArgs struct {
	Expression *string `pulumi:"expression"`
	Name       *string `pulumi:"name"`
	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Settings *string `pulumi:"settings"`
}

// The set of arguments for constructing a PropertyMappingRac resource.
type PropertyMappingRacArgs struct {
	Expression pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Settings pulumi.StringPtrInput
}

func (PropertyMappingRacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingRacArgs)(nil)).Elem()
}

type PropertyMappingRacInput interface {
	pulumi.Input

	ToPropertyMappingRacOutput() PropertyMappingRacOutput
	ToPropertyMappingRacOutputWithContext(ctx context.Context) PropertyMappingRacOutput
}

func (*PropertyMappingRac) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingRac)(nil)).Elem()
}

func (i *PropertyMappingRac) ToPropertyMappingRacOutput() PropertyMappingRacOutput {
	return i.ToPropertyMappingRacOutputWithContext(context.Background())
}

func (i *PropertyMappingRac) ToPropertyMappingRacOutputWithContext(ctx context.Context) PropertyMappingRacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingRacOutput)
}

// PropertyMappingRacArrayInput is an input type that accepts PropertyMappingRacArray and PropertyMappingRacArrayOutput values.
// You can construct a concrete instance of `PropertyMappingRacArrayInput` via:
//
//	PropertyMappingRacArray{ PropertyMappingRacArgs{...} }
type PropertyMappingRacArrayInput interface {
	pulumi.Input

	ToPropertyMappingRacArrayOutput() PropertyMappingRacArrayOutput
	ToPropertyMappingRacArrayOutputWithContext(context.Context) PropertyMappingRacArrayOutput
}

type PropertyMappingRacArray []PropertyMappingRacInput

func (PropertyMappingRacArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingRac)(nil)).Elem()
}

func (i PropertyMappingRacArray) ToPropertyMappingRacArrayOutput() PropertyMappingRacArrayOutput {
	return i.ToPropertyMappingRacArrayOutputWithContext(context.Background())
}

func (i PropertyMappingRacArray) ToPropertyMappingRacArrayOutputWithContext(ctx context.Context) PropertyMappingRacArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingRacArrayOutput)
}

// PropertyMappingRacMapInput is an input type that accepts PropertyMappingRacMap and PropertyMappingRacMapOutput values.
// You can construct a concrete instance of `PropertyMappingRacMapInput` via:
//
//	PropertyMappingRacMap{ "key": PropertyMappingRacArgs{...} }
type PropertyMappingRacMapInput interface {
	pulumi.Input

	ToPropertyMappingRacMapOutput() PropertyMappingRacMapOutput
	ToPropertyMappingRacMapOutputWithContext(context.Context) PropertyMappingRacMapOutput
}

type PropertyMappingRacMap map[string]PropertyMappingRacInput

func (PropertyMappingRacMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingRac)(nil)).Elem()
}

func (i PropertyMappingRacMap) ToPropertyMappingRacMapOutput() PropertyMappingRacMapOutput {
	return i.ToPropertyMappingRacMapOutputWithContext(context.Background())
}

func (i PropertyMappingRacMap) ToPropertyMappingRacMapOutputWithContext(ctx context.Context) PropertyMappingRacMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingRacMapOutput)
}

type PropertyMappingRacOutput struct{ *pulumi.OutputState }

func (PropertyMappingRacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingRac)(nil)).Elem()
}

func (o PropertyMappingRacOutput) ToPropertyMappingRacOutput() PropertyMappingRacOutput {
	return o
}

func (o PropertyMappingRacOutput) ToPropertyMappingRacOutputWithContext(ctx context.Context) PropertyMappingRacOutput {
	return o
}

func (o PropertyMappingRacOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PropertyMappingRac) pulumi.StringPtrOutput { return v.Expression }).(pulumi.StringPtrOutput)
}

func (o PropertyMappingRacOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingRac) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
func (o PropertyMappingRacOutput) Settings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PropertyMappingRac) pulumi.StringPtrOutput { return v.Settings }).(pulumi.StringPtrOutput)
}

type PropertyMappingRacArrayOutput struct{ *pulumi.OutputState }

func (PropertyMappingRacArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingRac)(nil)).Elem()
}

func (o PropertyMappingRacArrayOutput) ToPropertyMappingRacArrayOutput() PropertyMappingRacArrayOutput {
	return o
}

func (o PropertyMappingRacArrayOutput) ToPropertyMappingRacArrayOutputWithContext(ctx context.Context) PropertyMappingRacArrayOutput {
	return o
}

func (o PropertyMappingRacArrayOutput) Index(i pulumi.IntInput) PropertyMappingRacOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyMappingRac {
		return vs[0].([]*PropertyMappingRac)[vs[1].(int)]
	}).(PropertyMappingRacOutput)
}

type PropertyMappingRacMapOutput struct{ *pulumi.OutputState }

func (PropertyMappingRacMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingRac)(nil)).Elem()
}

func (o PropertyMappingRacMapOutput) ToPropertyMappingRacMapOutput() PropertyMappingRacMapOutput {
	return o
}

func (o PropertyMappingRacMapOutput) ToPropertyMappingRacMapOutputWithContext(ctx context.Context) PropertyMappingRacMapOutput {
	return o
}

func (o PropertyMappingRacMapOutput) MapIndex(k pulumi.StringInput) PropertyMappingRacOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyMappingRac {
		return vs[0].(map[string]*PropertyMappingRac)[vs[1].(string)]
	}).(PropertyMappingRacOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingRacInput)(nil)).Elem(), &PropertyMappingRac{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingRacArrayInput)(nil)).Elem(), PropertyMappingRacArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingRacMapInput)(nil)).Elem(), PropertyMappingRacMap{})
	pulumi.RegisterOutputType(PropertyMappingRacOutput{})
	pulumi.RegisterOutputType(PropertyMappingRacArrayOutput{})
	pulumi.RegisterOutputType(PropertyMappingRacMapOutput{})
}
