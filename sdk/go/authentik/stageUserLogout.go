// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/v2024/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/v2024/go/authentik"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a user logout stage
//			_, err := authentik.NewStageUserLogout(ctx, "name", &authentik.StageUserLogoutArgs{
//				Name: pulumi.String("user-logout"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StageUserLogout struct {
	pulumi.CustomResourceState

	Name pulumi.StringOutput `pulumi:"name"`
}

// NewStageUserLogout registers a new resource with the given unique name, arguments, and options.
func NewStageUserLogout(ctx *pulumi.Context,
	name string, args *StageUserLogoutArgs, opts ...pulumi.ResourceOption) (*StageUserLogout, error) {
	if args == nil {
		args = &StageUserLogoutArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StageUserLogout
	err := ctx.RegisterResource("authentik:index/stageUserLogout:StageUserLogout", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStageUserLogout gets an existing StageUserLogout resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStageUserLogout(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StageUserLogoutState, opts ...pulumi.ResourceOption) (*StageUserLogout, error) {
	var resource StageUserLogout
	err := ctx.ReadResource("authentik:index/stageUserLogout:StageUserLogout", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StageUserLogout resources.
type stageUserLogoutState struct {
	Name *string `pulumi:"name"`
}

type StageUserLogoutState struct {
	Name pulumi.StringPtrInput
}

func (StageUserLogoutState) ElementType() reflect.Type {
	return reflect.TypeOf((*stageUserLogoutState)(nil)).Elem()
}

type stageUserLogoutArgs struct {
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a StageUserLogout resource.
type StageUserLogoutArgs struct {
	Name pulumi.StringPtrInput
}

func (StageUserLogoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stageUserLogoutArgs)(nil)).Elem()
}

type StageUserLogoutInput interface {
	pulumi.Input

	ToStageUserLogoutOutput() StageUserLogoutOutput
	ToStageUserLogoutOutputWithContext(ctx context.Context) StageUserLogoutOutput
}

func (*StageUserLogout) ElementType() reflect.Type {
	return reflect.TypeOf((**StageUserLogout)(nil)).Elem()
}

func (i *StageUserLogout) ToStageUserLogoutOutput() StageUserLogoutOutput {
	return i.ToStageUserLogoutOutputWithContext(context.Background())
}

func (i *StageUserLogout) ToStageUserLogoutOutputWithContext(ctx context.Context) StageUserLogoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageUserLogoutOutput)
}

// StageUserLogoutArrayInput is an input type that accepts StageUserLogoutArray and StageUserLogoutArrayOutput values.
// You can construct a concrete instance of `StageUserLogoutArrayInput` via:
//
//	StageUserLogoutArray{ StageUserLogoutArgs{...} }
type StageUserLogoutArrayInput interface {
	pulumi.Input

	ToStageUserLogoutArrayOutput() StageUserLogoutArrayOutput
	ToStageUserLogoutArrayOutputWithContext(context.Context) StageUserLogoutArrayOutput
}

type StageUserLogoutArray []StageUserLogoutInput

func (StageUserLogoutArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StageUserLogout)(nil)).Elem()
}

func (i StageUserLogoutArray) ToStageUserLogoutArrayOutput() StageUserLogoutArrayOutput {
	return i.ToStageUserLogoutArrayOutputWithContext(context.Background())
}

func (i StageUserLogoutArray) ToStageUserLogoutArrayOutputWithContext(ctx context.Context) StageUserLogoutArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageUserLogoutArrayOutput)
}

// StageUserLogoutMapInput is an input type that accepts StageUserLogoutMap and StageUserLogoutMapOutput values.
// You can construct a concrete instance of `StageUserLogoutMapInput` via:
//
//	StageUserLogoutMap{ "key": StageUserLogoutArgs{...} }
type StageUserLogoutMapInput interface {
	pulumi.Input

	ToStageUserLogoutMapOutput() StageUserLogoutMapOutput
	ToStageUserLogoutMapOutputWithContext(context.Context) StageUserLogoutMapOutput
}

type StageUserLogoutMap map[string]StageUserLogoutInput

func (StageUserLogoutMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StageUserLogout)(nil)).Elem()
}

func (i StageUserLogoutMap) ToStageUserLogoutMapOutput() StageUserLogoutMapOutput {
	return i.ToStageUserLogoutMapOutputWithContext(context.Background())
}

func (i StageUserLogoutMap) ToStageUserLogoutMapOutputWithContext(ctx context.Context) StageUserLogoutMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageUserLogoutMapOutput)
}

type StageUserLogoutOutput struct{ *pulumi.OutputState }

func (StageUserLogoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StageUserLogout)(nil)).Elem()
}

func (o StageUserLogoutOutput) ToStageUserLogoutOutput() StageUserLogoutOutput {
	return o
}

func (o StageUserLogoutOutput) ToStageUserLogoutOutputWithContext(ctx context.Context) StageUserLogoutOutput {
	return o
}

func (o StageUserLogoutOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StageUserLogout) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type StageUserLogoutArrayOutput struct{ *pulumi.OutputState }

func (StageUserLogoutArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StageUserLogout)(nil)).Elem()
}

func (o StageUserLogoutArrayOutput) ToStageUserLogoutArrayOutput() StageUserLogoutArrayOutput {
	return o
}

func (o StageUserLogoutArrayOutput) ToStageUserLogoutArrayOutputWithContext(ctx context.Context) StageUserLogoutArrayOutput {
	return o
}

func (o StageUserLogoutArrayOutput) Index(i pulumi.IntInput) StageUserLogoutOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StageUserLogout {
		return vs[0].([]*StageUserLogout)[vs[1].(int)]
	}).(StageUserLogoutOutput)
}

type StageUserLogoutMapOutput struct{ *pulumi.OutputState }

func (StageUserLogoutMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StageUserLogout)(nil)).Elem()
}

func (o StageUserLogoutMapOutput) ToStageUserLogoutMapOutput() StageUserLogoutMapOutput {
	return o
}

func (o StageUserLogoutMapOutput) ToStageUserLogoutMapOutputWithContext(ctx context.Context) StageUserLogoutMapOutput {
	return o
}

func (o StageUserLogoutMapOutput) MapIndex(k pulumi.StringInput) StageUserLogoutOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StageUserLogout {
		return vs[0].(map[string]*StageUserLogout)[vs[1].(string)]
	}).(StageUserLogoutOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StageUserLogoutInput)(nil)).Elem(), &StageUserLogout{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageUserLogoutArrayInput)(nil)).Elem(), StageUserLogoutArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageUserLogoutMapInput)(nil)).Elem(), StageUserLogoutMap{})
	pulumi.RegisterOutputType(StageUserLogoutOutput{})
	pulumi.RegisterOutputType(StageUserLogoutArrayOutput{})
	pulumi.RegisterOutputType(StageUserLogoutMapOutput{})
}
