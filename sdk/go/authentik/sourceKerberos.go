// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/v2024/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceKerberos struct {
	pulumi.CustomResourceState

	AuthenticationFlow pulumi.StringPtrOutput `pulumi:"authenticationFlow"`
	Enabled            pulumi.BoolPtrOutput   `pulumi:"enabled"`
	EnrollmentFlow     pulumi.StringPtrOutput `pulumi:"enrollmentFlow"`
	// Allowed values: - `identifier` - `nameLink` - `nameDeny`
	GroupMatchingMode pulumi.StringPtrOutput `pulumi:"groupMatchingMode"`
	// Custom krb5.conf to use. Uses the system one by default
	Krb5Conf pulumi.StringPtrOutput `pulumi:"krb5Conf"`
	Name     pulumi.StringOutput    `pulumi:"name"`
	// If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend
	PasswordLoginUpdateInternalPassword pulumi.BoolPtrOutput `pulumi:"passwordLoginUpdateInternalPassword"`
	// Allowed values: - `all` - `any`
	PolicyEngineMode pulumi.StringPtrOutput `pulumi:"policyEngineMode"`
	// Kerberos realm
	Realm pulumi.StringOutput `pulumi:"realm"`
	Slug  pulumi.StringOutput `pulumi:"slug"`
	// Credential cache to use for SPNEGO in form type:residual
	SpnegoCcache pulumi.StringPtrOutput `pulumi:"spnegoCcache"`
	// SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
	SpnegoKeytab pulumi.StringPtrOutput `pulumi:"spnegoKeytab"`
	// Force the use of a specific server name for SPNEGO
	SpnegoServerName pulumi.StringPtrOutput `pulumi:"spnegoServerName"`
	// Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
	SyncCcache pulumi.StringPtrOutput `pulumi:"syncCcache"`
	// Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
	SyncKeytab pulumi.StringPtrOutput `pulumi:"syncKeytab"`
	// Password to authenticate to kadmin for sync
	SyncPassword pulumi.StringPtrOutput `pulumi:"syncPassword"`
	// Principal to authenticate to kadmin for sync.
	SyncPrincipal pulumi.StringPtrOutput `pulumi:"syncPrincipal"`
	// Sync users from Kerberos into authentik
	SyncUsers pulumi.BoolPtrOutput `pulumi:"syncUsers"`
	// When a user changes their password, sync it back to Kerberos
	SyncUsersPassword pulumi.BoolPtrOutput `pulumi:"syncUsersPassword"`
	// Allowed values: - `identifier` - `emailLink` - `emailDeny` - `usernameLink` - `usernameDeny`
	UserMatchingMode pulumi.StringPtrOutput `pulumi:"userMatchingMode"`
	UserPathTemplate pulumi.StringPtrOutput `pulumi:"userPathTemplate"`
	Uuid             pulumi.StringOutput    `pulumi:"uuid"`
}

// NewSourceKerberos registers a new resource with the given unique name, arguments, and options.
func NewSourceKerberos(ctx *pulumi.Context,
	name string, args *SourceKerberosArgs, opts ...pulumi.ResourceOption) (*SourceKerberos, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Realm == nil {
		return nil, errors.New("invalid value for required argument 'Realm'")
	}
	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	if args.SpnegoKeytab != nil {
		args.SpnegoKeytab = pulumi.ToSecret(args.SpnegoKeytab).(pulumi.StringPtrInput)
	}
	if args.SyncKeytab != nil {
		args.SyncKeytab = pulumi.ToSecret(args.SyncKeytab).(pulumi.StringPtrInput)
	}
	if args.SyncPassword != nil {
		args.SyncPassword = pulumi.ToSecret(args.SyncPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"spnegoKeytab",
		"syncKeytab",
		"syncPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceKerberos
	err := ctx.RegisterResource("authentik:index/sourceKerberos:SourceKerberos", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceKerberos gets an existing SourceKerberos resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceKerberos(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceKerberosState, opts ...pulumi.ResourceOption) (*SourceKerberos, error) {
	var resource SourceKerberos
	err := ctx.ReadResource("authentik:index/sourceKerberos:SourceKerberos", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceKerberos resources.
type sourceKerberosState struct {
	AuthenticationFlow *string `pulumi:"authenticationFlow"`
	Enabled            *bool   `pulumi:"enabled"`
	EnrollmentFlow     *string `pulumi:"enrollmentFlow"`
	// Allowed values: - `identifier` - `nameLink` - `nameDeny`
	GroupMatchingMode *string `pulumi:"groupMatchingMode"`
	// Custom krb5.conf to use. Uses the system one by default
	Krb5Conf *string `pulumi:"krb5Conf"`
	Name     *string `pulumi:"name"`
	// If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend
	PasswordLoginUpdateInternalPassword *bool `pulumi:"passwordLoginUpdateInternalPassword"`
	// Allowed values: - `all` - `any`
	PolicyEngineMode *string `pulumi:"policyEngineMode"`
	// Kerberos realm
	Realm *string `pulumi:"realm"`
	Slug  *string `pulumi:"slug"`
	// Credential cache to use for SPNEGO in form type:residual
	SpnegoCcache *string `pulumi:"spnegoCcache"`
	// SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
	SpnegoKeytab *string `pulumi:"spnegoKeytab"`
	// Force the use of a specific server name for SPNEGO
	SpnegoServerName *string `pulumi:"spnegoServerName"`
	// Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
	SyncCcache *string `pulumi:"syncCcache"`
	// Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
	SyncKeytab *string `pulumi:"syncKeytab"`
	// Password to authenticate to kadmin for sync
	SyncPassword *string `pulumi:"syncPassword"`
	// Principal to authenticate to kadmin for sync.
	SyncPrincipal *string `pulumi:"syncPrincipal"`
	// Sync users from Kerberos into authentik
	SyncUsers *bool `pulumi:"syncUsers"`
	// When a user changes their password, sync it back to Kerberos
	SyncUsersPassword *bool `pulumi:"syncUsersPassword"`
	// Allowed values: - `identifier` - `emailLink` - `emailDeny` - `usernameLink` - `usernameDeny`
	UserMatchingMode *string `pulumi:"userMatchingMode"`
	UserPathTemplate *string `pulumi:"userPathTemplate"`
	Uuid             *string `pulumi:"uuid"`
}

type SourceKerberosState struct {
	AuthenticationFlow pulumi.StringPtrInput
	Enabled            pulumi.BoolPtrInput
	EnrollmentFlow     pulumi.StringPtrInput
	// Allowed values: - `identifier` - `nameLink` - `nameDeny`
	GroupMatchingMode pulumi.StringPtrInput
	// Custom krb5.conf to use. Uses the system one by default
	Krb5Conf pulumi.StringPtrInput
	Name     pulumi.StringPtrInput
	// If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend
	PasswordLoginUpdateInternalPassword pulumi.BoolPtrInput
	// Allowed values: - `all` - `any`
	PolicyEngineMode pulumi.StringPtrInput
	// Kerberos realm
	Realm pulumi.StringPtrInput
	Slug  pulumi.StringPtrInput
	// Credential cache to use for SPNEGO in form type:residual
	SpnegoCcache pulumi.StringPtrInput
	// SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
	SpnegoKeytab pulumi.StringPtrInput
	// Force the use of a specific server name for SPNEGO
	SpnegoServerName pulumi.StringPtrInput
	// Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
	SyncCcache pulumi.StringPtrInput
	// Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
	SyncKeytab pulumi.StringPtrInput
	// Password to authenticate to kadmin for sync
	SyncPassword pulumi.StringPtrInput
	// Principal to authenticate to kadmin for sync.
	SyncPrincipal pulumi.StringPtrInput
	// Sync users from Kerberos into authentik
	SyncUsers pulumi.BoolPtrInput
	// When a user changes their password, sync it back to Kerberos
	SyncUsersPassword pulumi.BoolPtrInput
	// Allowed values: - `identifier` - `emailLink` - `emailDeny` - `usernameLink` - `usernameDeny`
	UserMatchingMode pulumi.StringPtrInput
	UserPathTemplate pulumi.StringPtrInput
	Uuid             pulumi.StringPtrInput
}

func (SourceKerberosState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceKerberosState)(nil)).Elem()
}

type sourceKerberosArgs struct {
	AuthenticationFlow *string `pulumi:"authenticationFlow"`
	Enabled            *bool   `pulumi:"enabled"`
	EnrollmentFlow     *string `pulumi:"enrollmentFlow"`
	// Allowed values: - `identifier` - `nameLink` - `nameDeny`
	GroupMatchingMode *string `pulumi:"groupMatchingMode"`
	// Custom krb5.conf to use. Uses the system one by default
	Krb5Conf *string `pulumi:"krb5Conf"`
	Name     *string `pulumi:"name"`
	// If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend
	PasswordLoginUpdateInternalPassword *bool `pulumi:"passwordLoginUpdateInternalPassword"`
	// Allowed values: - `all` - `any`
	PolicyEngineMode *string `pulumi:"policyEngineMode"`
	// Kerberos realm
	Realm string `pulumi:"realm"`
	Slug  string `pulumi:"slug"`
	// Credential cache to use for SPNEGO in form type:residual
	SpnegoCcache *string `pulumi:"spnegoCcache"`
	// SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
	SpnegoKeytab *string `pulumi:"spnegoKeytab"`
	// Force the use of a specific server name for SPNEGO
	SpnegoServerName *string `pulumi:"spnegoServerName"`
	// Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
	SyncCcache *string `pulumi:"syncCcache"`
	// Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
	SyncKeytab *string `pulumi:"syncKeytab"`
	// Password to authenticate to kadmin for sync
	SyncPassword *string `pulumi:"syncPassword"`
	// Principal to authenticate to kadmin for sync.
	SyncPrincipal *string `pulumi:"syncPrincipal"`
	// Sync users from Kerberos into authentik
	SyncUsers *bool `pulumi:"syncUsers"`
	// When a user changes their password, sync it back to Kerberos
	SyncUsersPassword *bool `pulumi:"syncUsersPassword"`
	// Allowed values: - `identifier` - `emailLink` - `emailDeny` - `usernameLink` - `usernameDeny`
	UserMatchingMode *string `pulumi:"userMatchingMode"`
	UserPathTemplate *string `pulumi:"userPathTemplate"`
	Uuid             *string `pulumi:"uuid"`
}

// The set of arguments for constructing a SourceKerberos resource.
type SourceKerberosArgs struct {
	AuthenticationFlow pulumi.StringPtrInput
	Enabled            pulumi.BoolPtrInput
	EnrollmentFlow     pulumi.StringPtrInput
	// Allowed values: - `identifier` - `nameLink` - `nameDeny`
	GroupMatchingMode pulumi.StringPtrInput
	// Custom krb5.conf to use. Uses the system one by default
	Krb5Conf pulumi.StringPtrInput
	Name     pulumi.StringPtrInput
	// If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend
	PasswordLoginUpdateInternalPassword pulumi.BoolPtrInput
	// Allowed values: - `all` - `any`
	PolicyEngineMode pulumi.StringPtrInput
	// Kerberos realm
	Realm pulumi.StringInput
	Slug  pulumi.StringInput
	// Credential cache to use for SPNEGO in form type:residual
	SpnegoCcache pulumi.StringPtrInput
	// SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
	SpnegoKeytab pulumi.StringPtrInput
	// Force the use of a specific server name for SPNEGO
	SpnegoServerName pulumi.StringPtrInput
	// Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
	SyncCcache pulumi.StringPtrInput
	// Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
	SyncKeytab pulumi.StringPtrInput
	// Password to authenticate to kadmin for sync
	SyncPassword pulumi.StringPtrInput
	// Principal to authenticate to kadmin for sync.
	SyncPrincipal pulumi.StringPtrInput
	// Sync users from Kerberos into authentik
	SyncUsers pulumi.BoolPtrInput
	// When a user changes their password, sync it back to Kerberos
	SyncUsersPassword pulumi.BoolPtrInput
	// Allowed values: - `identifier` - `emailLink` - `emailDeny` - `usernameLink` - `usernameDeny`
	UserMatchingMode pulumi.StringPtrInput
	UserPathTemplate pulumi.StringPtrInput
	Uuid             pulumi.StringPtrInput
}

func (SourceKerberosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceKerberosArgs)(nil)).Elem()
}

type SourceKerberosInput interface {
	pulumi.Input

	ToSourceKerberosOutput() SourceKerberosOutput
	ToSourceKerberosOutputWithContext(ctx context.Context) SourceKerberosOutput
}

func (*SourceKerberos) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKerberos)(nil)).Elem()
}

func (i *SourceKerberos) ToSourceKerberosOutput() SourceKerberosOutput {
	return i.ToSourceKerberosOutputWithContext(context.Background())
}

func (i *SourceKerberos) ToSourceKerberosOutputWithContext(ctx context.Context) SourceKerberosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKerberosOutput)
}

// SourceKerberosArrayInput is an input type that accepts SourceKerberosArray and SourceKerberosArrayOutput values.
// You can construct a concrete instance of `SourceKerberosArrayInput` via:
//
//	SourceKerberosArray{ SourceKerberosArgs{...} }
type SourceKerberosArrayInput interface {
	pulumi.Input

	ToSourceKerberosArrayOutput() SourceKerberosArrayOutput
	ToSourceKerberosArrayOutputWithContext(context.Context) SourceKerberosArrayOutput
}

type SourceKerberosArray []SourceKerberosInput

func (SourceKerberosArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceKerberos)(nil)).Elem()
}

func (i SourceKerberosArray) ToSourceKerberosArrayOutput() SourceKerberosArrayOutput {
	return i.ToSourceKerberosArrayOutputWithContext(context.Background())
}

func (i SourceKerberosArray) ToSourceKerberosArrayOutputWithContext(ctx context.Context) SourceKerberosArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKerberosArrayOutput)
}

// SourceKerberosMapInput is an input type that accepts SourceKerberosMap and SourceKerberosMapOutput values.
// You can construct a concrete instance of `SourceKerberosMapInput` via:
//
//	SourceKerberosMap{ "key": SourceKerberosArgs{...} }
type SourceKerberosMapInput interface {
	pulumi.Input

	ToSourceKerberosMapOutput() SourceKerberosMapOutput
	ToSourceKerberosMapOutputWithContext(context.Context) SourceKerberosMapOutput
}

type SourceKerberosMap map[string]SourceKerberosInput

func (SourceKerberosMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceKerberos)(nil)).Elem()
}

func (i SourceKerberosMap) ToSourceKerberosMapOutput() SourceKerberosMapOutput {
	return i.ToSourceKerberosMapOutputWithContext(context.Background())
}

func (i SourceKerberosMap) ToSourceKerberosMapOutputWithContext(ctx context.Context) SourceKerberosMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceKerberosMapOutput)
}

type SourceKerberosOutput struct{ *pulumi.OutputState }

func (SourceKerberosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKerberos)(nil)).Elem()
}

func (o SourceKerberosOutput) ToSourceKerberosOutput() SourceKerberosOutput {
	return o
}

func (o SourceKerberosOutput) ToSourceKerberosOutputWithContext(ctx context.Context) SourceKerberosOutput {
	return o
}

func (o SourceKerberosOutput) AuthenticationFlow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringPtrOutput { return v.AuthenticationFlow }).(pulumi.StringPtrOutput)
}

func (o SourceKerberosOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o SourceKerberosOutput) EnrollmentFlow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringPtrOutput { return v.EnrollmentFlow }).(pulumi.StringPtrOutput)
}

// Allowed values: - `identifier` - `nameLink` - `nameDeny`
func (o SourceKerberosOutput) GroupMatchingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringPtrOutput { return v.GroupMatchingMode }).(pulumi.StringPtrOutput)
}

// Custom krb5.conf to use. Uses the system one by default
func (o SourceKerberosOutput) Krb5Conf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringPtrOutput { return v.Krb5Conf }).(pulumi.StringPtrOutput)
}

func (o SourceKerberosOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend
func (o SourceKerberosOutput) PasswordLoginUpdateInternalPassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.BoolPtrOutput { return v.PasswordLoginUpdateInternalPassword }).(pulumi.BoolPtrOutput)
}

// Allowed values: - `all` - `any`
func (o SourceKerberosOutput) PolicyEngineMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringPtrOutput { return v.PolicyEngineMode }).(pulumi.StringPtrOutput)
}

// Kerberos realm
func (o SourceKerberosOutput) Realm() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringOutput { return v.Realm }).(pulumi.StringOutput)
}

func (o SourceKerberosOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Credential cache to use for SPNEGO in form type:residual
func (o SourceKerberosOutput) SpnegoCcache() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringPtrOutput { return v.SpnegoCcache }).(pulumi.StringPtrOutput)
}

// SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
func (o SourceKerberosOutput) SpnegoKeytab() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringPtrOutput { return v.SpnegoKeytab }).(pulumi.StringPtrOutput)
}

// Force the use of a specific server name for SPNEGO
func (o SourceKerberosOutput) SpnegoServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringPtrOutput { return v.SpnegoServerName }).(pulumi.StringPtrOutput)
}

// Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
func (o SourceKerberosOutput) SyncCcache() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringPtrOutput { return v.SyncCcache }).(pulumi.StringPtrOutput)
}

// Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
func (o SourceKerberosOutput) SyncKeytab() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringPtrOutput { return v.SyncKeytab }).(pulumi.StringPtrOutput)
}

// Password to authenticate to kadmin for sync
func (o SourceKerberosOutput) SyncPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringPtrOutput { return v.SyncPassword }).(pulumi.StringPtrOutput)
}

// Principal to authenticate to kadmin for sync.
func (o SourceKerberosOutput) SyncPrincipal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringPtrOutput { return v.SyncPrincipal }).(pulumi.StringPtrOutput)
}

// Sync users from Kerberos into authentik
func (o SourceKerberosOutput) SyncUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.BoolPtrOutput { return v.SyncUsers }).(pulumi.BoolPtrOutput)
}

// When a user changes their password, sync it back to Kerberos
func (o SourceKerberosOutput) SyncUsersPassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.BoolPtrOutput { return v.SyncUsersPassword }).(pulumi.BoolPtrOutput)
}

// Allowed values: - `identifier` - `emailLink` - `emailDeny` - `usernameLink` - `usernameDeny`
func (o SourceKerberosOutput) UserMatchingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringPtrOutput { return v.UserMatchingMode }).(pulumi.StringPtrOutput)
}

func (o SourceKerberosOutput) UserPathTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringPtrOutput { return v.UserPathTemplate }).(pulumi.StringPtrOutput)
}

func (o SourceKerberosOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceKerberos) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type SourceKerberosArrayOutput struct{ *pulumi.OutputState }

func (SourceKerberosArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceKerberos)(nil)).Elem()
}

func (o SourceKerberosArrayOutput) ToSourceKerberosArrayOutput() SourceKerberosArrayOutput {
	return o
}

func (o SourceKerberosArrayOutput) ToSourceKerberosArrayOutputWithContext(ctx context.Context) SourceKerberosArrayOutput {
	return o
}

func (o SourceKerberosArrayOutput) Index(i pulumi.IntInput) SourceKerberosOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceKerberos {
		return vs[0].([]*SourceKerberos)[vs[1].(int)]
	}).(SourceKerberosOutput)
}

type SourceKerberosMapOutput struct{ *pulumi.OutputState }

func (SourceKerberosMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceKerberos)(nil)).Elem()
}

func (o SourceKerberosMapOutput) ToSourceKerberosMapOutput() SourceKerberosMapOutput {
	return o
}

func (o SourceKerberosMapOutput) ToSourceKerberosMapOutputWithContext(ctx context.Context) SourceKerberosMapOutput {
	return o
}

func (o SourceKerberosMapOutput) MapIndex(k pulumi.StringInput) SourceKerberosOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceKerberos {
		return vs[0].(map[string]*SourceKerberos)[vs[1].(string)]
	}).(SourceKerberosOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKerberosInput)(nil)).Elem(), &SourceKerberos{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKerberosArrayInput)(nil)).Elem(), SourceKerberosArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceKerberosMapInput)(nil)).Elem(), SourceKerberosMap{})
	pulumi.RegisterOutputType(SourceKerberosOutput{})
	pulumi.RegisterOutputType(SourceKerberosArrayOutput{})
	pulumi.RegisterOutputType(SourceKerberosMapOutput{})
}
