// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := authentik.NewServiceConnectionDocker(ctx, "local", &authentik.ServiceConnectionDockerArgs{
//				Local: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authentik.NewCertificateKeyPair(ctx, "tls-auth", &authentik.CertificateKeyPairArgs{
//				CertificateData: pulumi.String("..."),
//				KeyData:         pulumi.String("..."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authentik.NewCertificateKeyPair(ctx, "tls-verification", &authentik.CertificateKeyPairArgs{
//				CertificateData: pulumi.String("..."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authentik.NewServiceConnectionDocker(ctx, "remote-host", &authentik.ServiceConnectionDockerArgs{
//				Url:               pulumi.String("http://1.2.3.4:2368"),
//				TlsVerification:   tls_auth.ID(),
//				TlsAuthentication: tls_verification.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ServiceConnectionDocker struct {
	pulumi.CustomResourceState

	// Defaults to `false`.
	Local             pulumi.BoolPtrOutput   `pulumi:"local"`
	Name              pulumi.StringOutput    `pulumi:"name"`
	TlsAuthentication pulumi.StringPtrOutput `pulumi:"tlsAuthentication"`
	TlsVerification   pulumi.StringPtrOutput `pulumi:"tlsVerification"`
	// Defaults to `http+unix:///var/run/docker.sock`.
	Url pulumi.StringPtrOutput `pulumi:"url"`
}

// NewServiceConnectionDocker registers a new resource with the given unique name, arguments, and options.
func NewServiceConnectionDocker(ctx *pulumi.Context,
	name string, args *ServiceConnectionDockerArgs, opts ...pulumi.ResourceOption) (*ServiceConnectionDocker, error) {
	if args == nil {
		args = &ServiceConnectionDockerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceConnectionDocker
	err := ctx.RegisterResource("authentik:index/serviceConnectionDocker:ServiceConnectionDocker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceConnectionDocker gets an existing ServiceConnectionDocker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceConnectionDocker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceConnectionDockerState, opts ...pulumi.ResourceOption) (*ServiceConnectionDocker, error) {
	var resource ServiceConnectionDocker
	err := ctx.ReadResource("authentik:index/serviceConnectionDocker:ServiceConnectionDocker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceConnectionDocker resources.
type serviceConnectionDockerState struct {
	// Defaults to `false`.
	Local             *bool   `pulumi:"local"`
	Name              *string `pulumi:"name"`
	TlsAuthentication *string `pulumi:"tlsAuthentication"`
	TlsVerification   *string `pulumi:"tlsVerification"`
	// Defaults to `http+unix:///var/run/docker.sock`.
	Url *string `pulumi:"url"`
}

type ServiceConnectionDockerState struct {
	// Defaults to `false`.
	Local             pulumi.BoolPtrInput
	Name              pulumi.StringPtrInput
	TlsAuthentication pulumi.StringPtrInput
	TlsVerification   pulumi.StringPtrInput
	// Defaults to `http+unix:///var/run/docker.sock`.
	Url pulumi.StringPtrInput
}

func (ServiceConnectionDockerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceConnectionDockerState)(nil)).Elem()
}

type serviceConnectionDockerArgs struct {
	// Defaults to `false`.
	Local             *bool   `pulumi:"local"`
	Name              *string `pulumi:"name"`
	TlsAuthentication *string `pulumi:"tlsAuthentication"`
	TlsVerification   *string `pulumi:"tlsVerification"`
	// Defaults to `http+unix:///var/run/docker.sock`.
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a ServiceConnectionDocker resource.
type ServiceConnectionDockerArgs struct {
	// Defaults to `false`.
	Local             pulumi.BoolPtrInput
	Name              pulumi.StringPtrInput
	TlsAuthentication pulumi.StringPtrInput
	TlsVerification   pulumi.StringPtrInput
	// Defaults to `http+unix:///var/run/docker.sock`.
	Url pulumi.StringPtrInput
}

func (ServiceConnectionDockerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceConnectionDockerArgs)(nil)).Elem()
}

type ServiceConnectionDockerInput interface {
	pulumi.Input

	ToServiceConnectionDockerOutput() ServiceConnectionDockerOutput
	ToServiceConnectionDockerOutputWithContext(ctx context.Context) ServiceConnectionDockerOutput
}

func (*ServiceConnectionDocker) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectionDocker)(nil)).Elem()
}

func (i *ServiceConnectionDocker) ToServiceConnectionDockerOutput() ServiceConnectionDockerOutput {
	return i.ToServiceConnectionDockerOutputWithContext(context.Background())
}

func (i *ServiceConnectionDocker) ToServiceConnectionDockerOutputWithContext(ctx context.Context) ServiceConnectionDockerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectionDockerOutput)
}

func (i *ServiceConnectionDocker) ToOutput(ctx context.Context) pulumix.Output[*ServiceConnectionDocker] {
	return pulumix.Output[*ServiceConnectionDocker]{
		OutputState: i.ToServiceConnectionDockerOutputWithContext(ctx).OutputState,
	}
}

// ServiceConnectionDockerArrayInput is an input type that accepts ServiceConnectionDockerArray and ServiceConnectionDockerArrayOutput values.
// You can construct a concrete instance of `ServiceConnectionDockerArrayInput` via:
//
//	ServiceConnectionDockerArray{ ServiceConnectionDockerArgs{...} }
type ServiceConnectionDockerArrayInput interface {
	pulumi.Input

	ToServiceConnectionDockerArrayOutput() ServiceConnectionDockerArrayOutput
	ToServiceConnectionDockerArrayOutputWithContext(context.Context) ServiceConnectionDockerArrayOutput
}

type ServiceConnectionDockerArray []ServiceConnectionDockerInput

func (ServiceConnectionDockerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceConnectionDocker)(nil)).Elem()
}

func (i ServiceConnectionDockerArray) ToServiceConnectionDockerArrayOutput() ServiceConnectionDockerArrayOutput {
	return i.ToServiceConnectionDockerArrayOutputWithContext(context.Background())
}

func (i ServiceConnectionDockerArray) ToServiceConnectionDockerArrayOutputWithContext(ctx context.Context) ServiceConnectionDockerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectionDockerArrayOutput)
}

func (i ServiceConnectionDockerArray) ToOutput(ctx context.Context) pulumix.Output[[]*ServiceConnectionDocker] {
	return pulumix.Output[[]*ServiceConnectionDocker]{
		OutputState: i.ToServiceConnectionDockerArrayOutputWithContext(ctx).OutputState,
	}
}

// ServiceConnectionDockerMapInput is an input type that accepts ServiceConnectionDockerMap and ServiceConnectionDockerMapOutput values.
// You can construct a concrete instance of `ServiceConnectionDockerMapInput` via:
//
//	ServiceConnectionDockerMap{ "key": ServiceConnectionDockerArgs{...} }
type ServiceConnectionDockerMapInput interface {
	pulumi.Input

	ToServiceConnectionDockerMapOutput() ServiceConnectionDockerMapOutput
	ToServiceConnectionDockerMapOutputWithContext(context.Context) ServiceConnectionDockerMapOutput
}

type ServiceConnectionDockerMap map[string]ServiceConnectionDockerInput

func (ServiceConnectionDockerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceConnectionDocker)(nil)).Elem()
}

func (i ServiceConnectionDockerMap) ToServiceConnectionDockerMapOutput() ServiceConnectionDockerMapOutput {
	return i.ToServiceConnectionDockerMapOutputWithContext(context.Background())
}

func (i ServiceConnectionDockerMap) ToServiceConnectionDockerMapOutputWithContext(ctx context.Context) ServiceConnectionDockerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectionDockerMapOutput)
}

func (i ServiceConnectionDockerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServiceConnectionDocker] {
	return pulumix.Output[map[string]*ServiceConnectionDocker]{
		OutputState: i.ToServiceConnectionDockerMapOutputWithContext(ctx).OutputState,
	}
}

type ServiceConnectionDockerOutput struct{ *pulumi.OutputState }

func (ServiceConnectionDockerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectionDocker)(nil)).Elem()
}

func (o ServiceConnectionDockerOutput) ToServiceConnectionDockerOutput() ServiceConnectionDockerOutput {
	return o
}

func (o ServiceConnectionDockerOutput) ToServiceConnectionDockerOutputWithContext(ctx context.Context) ServiceConnectionDockerOutput {
	return o
}

func (o ServiceConnectionDockerOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceConnectionDocker] {
	return pulumix.Output[*ServiceConnectionDocker]{
		OutputState: o.OutputState,
	}
}

// Defaults to `false`.
func (o ServiceConnectionDockerOutput) Local() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceConnectionDocker) pulumi.BoolPtrOutput { return v.Local }).(pulumi.BoolPtrOutput)
}

func (o ServiceConnectionDockerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceConnectionDocker) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceConnectionDockerOutput) TlsAuthentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectionDocker) pulumi.StringPtrOutput { return v.TlsAuthentication }).(pulumi.StringPtrOutput)
}

func (o ServiceConnectionDockerOutput) TlsVerification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectionDocker) pulumi.StringPtrOutput { return v.TlsVerification }).(pulumi.StringPtrOutput)
}

// Defaults to `http+unix:///var/run/docker.sock`.
func (o ServiceConnectionDockerOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectionDocker) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

type ServiceConnectionDockerArrayOutput struct{ *pulumi.OutputState }

func (ServiceConnectionDockerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceConnectionDocker)(nil)).Elem()
}

func (o ServiceConnectionDockerArrayOutput) ToServiceConnectionDockerArrayOutput() ServiceConnectionDockerArrayOutput {
	return o
}

func (o ServiceConnectionDockerArrayOutput) ToServiceConnectionDockerArrayOutputWithContext(ctx context.Context) ServiceConnectionDockerArrayOutput {
	return o
}

func (o ServiceConnectionDockerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ServiceConnectionDocker] {
	return pulumix.Output[[]*ServiceConnectionDocker]{
		OutputState: o.OutputState,
	}
}

func (o ServiceConnectionDockerArrayOutput) Index(i pulumi.IntInput) ServiceConnectionDockerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceConnectionDocker {
		return vs[0].([]*ServiceConnectionDocker)[vs[1].(int)]
	}).(ServiceConnectionDockerOutput)
}

type ServiceConnectionDockerMapOutput struct{ *pulumi.OutputState }

func (ServiceConnectionDockerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceConnectionDocker)(nil)).Elem()
}

func (o ServiceConnectionDockerMapOutput) ToServiceConnectionDockerMapOutput() ServiceConnectionDockerMapOutput {
	return o
}

func (o ServiceConnectionDockerMapOutput) ToServiceConnectionDockerMapOutputWithContext(ctx context.Context) ServiceConnectionDockerMapOutput {
	return o
}

func (o ServiceConnectionDockerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServiceConnectionDocker] {
	return pulumix.Output[map[string]*ServiceConnectionDocker]{
		OutputState: o.OutputState,
	}
}

func (o ServiceConnectionDockerMapOutput) MapIndex(k pulumi.StringInput) ServiceConnectionDockerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceConnectionDocker {
		return vs[0].(map[string]*ServiceConnectionDocker)[vs[1].(string)]
	}).(ServiceConnectionDockerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectionDockerInput)(nil)).Elem(), &ServiceConnectionDocker{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectionDockerArrayInput)(nil)).Elem(), ServiceConnectionDockerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectionDockerMapInput)(nil)).Elem(), ServiceConnectionDockerMap{})
	pulumi.RegisterOutputType(ServiceConnectionDockerOutput{})
	pulumi.RegisterOutputType(ServiceConnectionDockerArrayOutput{})
	pulumi.RegisterOutputType(ServiceConnectionDockerMapOutput{})
}
