// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PropertyMappingScim struct {
	pulumi.CustomResourceState

	Expression pulumi.StringOutput `pulumi:"expression"`
	Name       pulumi.StringOutput `pulumi:"name"`
}

// NewPropertyMappingScim registers a new resource with the given unique name, arguments, and options.
func NewPropertyMappingScim(ctx *pulumi.Context,
	name string, args *PropertyMappingScimArgs, opts ...pulumi.ResourceOption) (*PropertyMappingScim, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PropertyMappingScim
	err := ctx.RegisterResource("authentik:index/propertyMappingScim:PropertyMappingScim", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyMappingScim gets an existing PropertyMappingScim resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyMappingScim(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyMappingScimState, opts ...pulumi.ResourceOption) (*PropertyMappingScim, error) {
	var resource PropertyMappingScim
	err := ctx.ReadResource("authentik:index/propertyMappingScim:PropertyMappingScim", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyMappingScim resources.
type propertyMappingScimState struct {
	Expression *string `pulumi:"expression"`
	Name       *string `pulumi:"name"`
}

type PropertyMappingScimState struct {
	Expression pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
}

func (PropertyMappingScimState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingScimState)(nil)).Elem()
}

type propertyMappingScimArgs struct {
	Expression string  `pulumi:"expression"`
	Name       *string `pulumi:"name"`
}

// The set of arguments for constructing a PropertyMappingScim resource.
type PropertyMappingScimArgs struct {
	Expression pulumi.StringInput
	Name       pulumi.StringPtrInput
}

func (PropertyMappingScimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingScimArgs)(nil)).Elem()
}

type PropertyMappingScimInput interface {
	pulumi.Input

	ToPropertyMappingScimOutput() PropertyMappingScimOutput
	ToPropertyMappingScimOutputWithContext(ctx context.Context) PropertyMappingScimOutput
}

func (*PropertyMappingScim) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingScim)(nil)).Elem()
}

func (i *PropertyMappingScim) ToPropertyMappingScimOutput() PropertyMappingScimOutput {
	return i.ToPropertyMappingScimOutputWithContext(context.Background())
}

func (i *PropertyMappingScim) ToPropertyMappingScimOutputWithContext(ctx context.Context) PropertyMappingScimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingScimOutput)
}

// PropertyMappingScimArrayInput is an input type that accepts PropertyMappingScimArray and PropertyMappingScimArrayOutput values.
// You can construct a concrete instance of `PropertyMappingScimArrayInput` via:
//
//	PropertyMappingScimArray{ PropertyMappingScimArgs{...} }
type PropertyMappingScimArrayInput interface {
	pulumi.Input

	ToPropertyMappingScimArrayOutput() PropertyMappingScimArrayOutput
	ToPropertyMappingScimArrayOutputWithContext(context.Context) PropertyMappingScimArrayOutput
}

type PropertyMappingScimArray []PropertyMappingScimInput

func (PropertyMappingScimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingScim)(nil)).Elem()
}

func (i PropertyMappingScimArray) ToPropertyMappingScimArrayOutput() PropertyMappingScimArrayOutput {
	return i.ToPropertyMappingScimArrayOutputWithContext(context.Background())
}

func (i PropertyMappingScimArray) ToPropertyMappingScimArrayOutputWithContext(ctx context.Context) PropertyMappingScimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingScimArrayOutput)
}

// PropertyMappingScimMapInput is an input type that accepts PropertyMappingScimMap and PropertyMappingScimMapOutput values.
// You can construct a concrete instance of `PropertyMappingScimMapInput` via:
//
//	PropertyMappingScimMap{ "key": PropertyMappingScimArgs{...} }
type PropertyMappingScimMapInput interface {
	pulumi.Input

	ToPropertyMappingScimMapOutput() PropertyMappingScimMapOutput
	ToPropertyMappingScimMapOutputWithContext(context.Context) PropertyMappingScimMapOutput
}

type PropertyMappingScimMap map[string]PropertyMappingScimInput

func (PropertyMappingScimMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingScim)(nil)).Elem()
}

func (i PropertyMappingScimMap) ToPropertyMappingScimMapOutput() PropertyMappingScimMapOutput {
	return i.ToPropertyMappingScimMapOutputWithContext(context.Background())
}

func (i PropertyMappingScimMap) ToPropertyMappingScimMapOutputWithContext(ctx context.Context) PropertyMappingScimMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingScimMapOutput)
}

type PropertyMappingScimOutput struct{ *pulumi.OutputState }

func (PropertyMappingScimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingScim)(nil)).Elem()
}

func (o PropertyMappingScimOutput) ToPropertyMappingScimOutput() PropertyMappingScimOutput {
	return o
}

func (o PropertyMappingScimOutput) ToPropertyMappingScimOutputWithContext(ctx context.Context) PropertyMappingScimOutput {
	return o
}

func (o PropertyMappingScimOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingScim) pulumi.StringOutput { return v.Expression }).(pulumi.StringOutput)
}

func (o PropertyMappingScimOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingScim) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type PropertyMappingScimArrayOutput struct{ *pulumi.OutputState }

func (PropertyMappingScimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingScim)(nil)).Elem()
}

func (o PropertyMappingScimArrayOutput) ToPropertyMappingScimArrayOutput() PropertyMappingScimArrayOutput {
	return o
}

func (o PropertyMappingScimArrayOutput) ToPropertyMappingScimArrayOutputWithContext(ctx context.Context) PropertyMappingScimArrayOutput {
	return o
}

func (o PropertyMappingScimArrayOutput) Index(i pulumi.IntInput) PropertyMappingScimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyMappingScim {
		return vs[0].([]*PropertyMappingScim)[vs[1].(int)]
	}).(PropertyMappingScimOutput)
}

type PropertyMappingScimMapOutput struct{ *pulumi.OutputState }

func (PropertyMappingScimMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingScim)(nil)).Elem()
}

func (o PropertyMappingScimMapOutput) ToPropertyMappingScimMapOutput() PropertyMappingScimMapOutput {
	return o
}

func (o PropertyMappingScimMapOutput) ToPropertyMappingScimMapOutputWithContext(ctx context.Context) PropertyMappingScimMapOutput {
	return o
}

func (o PropertyMappingScimMapOutput) MapIndex(k pulumi.StringInput) PropertyMappingScimOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyMappingScim {
		return vs[0].(map[string]*PropertyMappingScim)[vs[1].(string)]
	}).(PropertyMappingScimOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingScimInput)(nil)).Elem(), &PropertyMappingScim{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingScimArrayInput)(nil)).Elem(), PropertyMappingScimArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingScimMapInput)(nil)).Elem(), PropertyMappingScimMap{})
	pulumi.RegisterOutputType(PropertyMappingScimOutput{})
	pulumi.RegisterOutputType(PropertyMappingScimArrayOutput{})
	pulumi.RegisterOutputType(PropertyMappingScimMapOutput{})
}
