// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/v2024/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage RAC Provider Property mappings
type PropertyMappingProviderRac struct {
	pulumi.CustomResourceState

	Expression pulumi.StringPtrOutput `pulumi:"expression"`
	Name       pulumi.StringOutput    `pulumi:"name"`
	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Settings pulumi.StringPtrOutput `pulumi:"settings"`
}

// NewPropertyMappingProviderRac registers a new resource with the given unique name, arguments, and options.
func NewPropertyMappingProviderRac(ctx *pulumi.Context,
	name string, args *PropertyMappingProviderRacArgs, opts ...pulumi.ResourceOption) (*PropertyMappingProviderRac, error) {
	if args == nil {
		args = &PropertyMappingProviderRacArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PropertyMappingProviderRac
	err := ctx.RegisterResource("authentik:index/propertyMappingProviderRac:PropertyMappingProviderRac", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyMappingProviderRac gets an existing PropertyMappingProviderRac resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyMappingProviderRac(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyMappingProviderRacState, opts ...pulumi.ResourceOption) (*PropertyMappingProviderRac, error) {
	var resource PropertyMappingProviderRac
	err := ctx.ReadResource("authentik:index/propertyMappingProviderRac:PropertyMappingProviderRac", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyMappingProviderRac resources.
type propertyMappingProviderRacState struct {
	Expression *string `pulumi:"expression"`
	Name       *string `pulumi:"name"`
	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Settings *string `pulumi:"settings"`
}

type PropertyMappingProviderRacState struct {
	Expression pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Settings pulumi.StringPtrInput
}

func (PropertyMappingProviderRacState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingProviderRacState)(nil)).Elem()
}

type propertyMappingProviderRacArgs struct {
	Expression *string `pulumi:"expression"`
	Name       *string `pulumi:"name"`
	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Settings *string `pulumi:"settings"`
}

// The set of arguments for constructing a PropertyMappingProviderRac resource.
type PropertyMappingProviderRacArgs struct {
	Expression pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
	Settings pulumi.StringPtrInput
}

func (PropertyMappingProviderRacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingProviderRacArgs)(nil)).Elem()
}

type PropertyMappingProviderRacInput interface {
	pulumi.Input

	ToPropertyMappingProviderRacOutput() PropertyMappingProviderRacOutput
	ToPropertyMappingProviderRacOutputWithContext(ctx context.Context) PropertyMappingProviderRacOutput
}

func (*PropertyMappingProviderRac) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingProviderRac)(nil)).Elem()
}

func (i *PropertyMappingProviderRac) ToPropertyMappingProviderRacOutput() PropertyMappingProviderRacOutput {
	return i.ToPropertyMappingProviderRacOutputWithContext(context.Background())
}

func (i *PropertyMappingProviderRac) ToPropertyMappingProviderRacOutputWithContext(ctx context.Context) PropertyMappingProviderRacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingProviderRacOutput)
}

// PropertyMappingProviderRacArrayInput is an input type that accepts PropertyMappingProviderRacArray and PropertyMappingProviderRacArrayOutput values.
// You can construct a concrete instance of `PropertyMappingProviderRacArrayInput` via:
//
//	PropertyMappingProviderRacArray{ PropertyMappingProviderRacArgs{...} }
type PropertyMappingProviderRacArrayInput interface {
	pulumi.Input

	ToPropertyMappingProviderRacArrayOutput() PropertyMappingProviderRacArrayOutput
	ToPropertyMappingProviderRacArrayOutputWithContext(context.Context) PropertyMappingProviderRacArrayOutput
}

type PropertyMappingProviderRacArray []PropertyMappingProviderRacInput

func (PropertyMappingProviderRacArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingProviderRac)(nil)).Elem()
}

func (i PropertyMappingProviderRacArray) ToPropertyMappingProviderRacArrayOutput() PropertyMappingProviderRacArrayOutput {
	return i.ToPropertyMappingProviderRacArrayOutputWithContext(context.Background())
}

func (i PropertyMappingProviderRacArray) ToPropertyMappingProviderRacArrayOutputWithContext(ctx context.Context) PropertyMappingProviderRacArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingProviderRacArrayOutput)
}

// PropertyMappingProviderRacMapInput is an input type that accepts PropertyMappingProviderRacMap and PropertyMappingProviderRacMapOutput values.
// You can construct a concrete instance of `PropertyMappingProviderRacMapInput` via:
//
//	PropertyMappingProviderRacMap{ "key": PropertyMappingProviderRacArgs{...} }
type PropertyMappingProviderRacMapInput interface {
	pulumi.Input

	ToPropertyMappingProviderRacMapOutput() PropertyMappingProviderRacMapOutput
	ToPropertyMappingProviderRacMapOutputWithContext(context.Context) PropertyMappingProviderRacMapOutput
}

type PropertyMappingProviderRacMap map[string]PropertyMappingProviderRacInput

func (PropertyMappingProviderRacMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingProviderRac)(nil)).Elem()
}

func (i PropertyMappingProviderRacMap) ToPropertyMappingProviderRacMapOutput() PropertyMappingProviderRacMapOutput {
	return i.ToPropertyMappingProviderRacMapOutputWithContext(context.Background())
}

func (i PropertyMappingProviderRacMap) ToPropertyMappingProviderRacMapOutputWithContext(ctx context.Context) PropertyMappingProviderRacMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingProviderRacMapOutput)
}

type PropertyMappingProviderRacOutput struct{ *pulumi.OutputState }

func (PropertyMappingProviderRacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingProviderRac)(nil)).Elem()
}

func (o PropertyMappingProviderRacOutput) ToPropertyMappingProviderRacOutput() PropertyMappingProviderRacOutput {
	return o
}

func (o PropertyMappingProviderRacOutput) ToPropertyMappingProviderRacOutputWithContext(ctx context.Context) PropertyMappingProviderRacOutput {
	return o
}

func (o PropertyMappingProviderRacOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PropertyMappingProviderRac) pulumi.StringPtrOutput { return v.Expression }).(pulumi.StringPtrOutput)
}

func (o PropertyMappingProviderRacOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingProviderRac) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
func (o PropertyMappingProviderRacOutput) Settings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PropertyMappingProviderRac) pulumi.StringPtrOutput { return v.Settings }).(pulumi.StringPtrOutput)
}

type PropertyMappingProviderRacArrayOutput struct{ *pulumi.OutputState }

func (PropertyMappingProviderRacArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingProviderRac)(nil)).Elem()
}

func (o PropertyMappingProviderRacArrayOutput) ToPropertyMappingProviderRacArrayOutput() PropertyMappingProviderRacArrayOutput {
	return o
}

func (o PropertyMappingProviderRacArrayOutput) ToPropertyMappingProviderRacArrayOutputWithContext(ctx context.Context) PropertyMappingProviderRacArrayOutput {
	return o
}

func (o PropertyMappingProviderRacArrayOutput) Index(i pulumi.IntInput) PropertyMappingProviderRacOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyMappingProviderRac {
		return vs[0].([]*PropertyMappingProviderRac)[vs[1].(int)]
	}).(PropertyMappingProviderRacOutput)
}

type PropertyMappingProviderRacMapOutput struct{ *pulumi.OutputState }

func (PropertyMappingProviderRacMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingProviderRac)(nil)).Elem()
}

func (o PropertyMappingProviderRacMapOutput) ToPropertyMappingProviderRacMapOutput() PropertyMappingProviderRacMapOutput {
	return o
}

func (o PropertyMappingProviderRacMapOutput) ToPropertyMappingProviderRacMapOutputWithContext(ctx context.Context) PropertyMappingProviderRacMapOutput {
	return o
}

func (o PropertyMappingProviderRacMapOutput) MapIndex(k pulumi.StringInput) PropertyMappingProviderRacOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyMappingProviderRac {
		return vs[0].(map[string]*PropertyMappingProviderRac)[vs[1].(string)]
	}).(PropertyMappingProviderRacOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingProviderRacInput)(nil)).Elem(), &PropertyMappingProviderRac{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingProviderRacArrayInput)(nil)).Elem(), PropertyMappingProviderRacArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingProviderRacMapInput)(nil)).Elem(), PropertyMappingProviderRacMap{})
	pulumi.RegisterOutputType(PropertyMappingProviderRacOutput{})
	pulumi.RegisterOutputType(PropertyMappingProviderRacArrayOutput{})
	pulumi.RegisterOutputType(PropertyMappingProviderRacMapOutput{})
}
