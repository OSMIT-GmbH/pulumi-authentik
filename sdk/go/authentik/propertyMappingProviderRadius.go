// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/v2024/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage Radius Provider Property mappings
type PropertyMappingProviderRadius struct {
	pulumi.CustomResourceState

	Expression pulumi.StringOutput `pulumi:"expression"`
	Name       pulumi.StringOutput `pulumi:"name"`
}

// NewPropertyMappingProviderRadius registers a new resource with the given unique name, arguments, and options.
func NewPropertyMappingProviderRadius(ctx *pulumi.Context,
	name string, args *PropertyMappingProviderRadiusArgs, opts ...pulumi.ResourceOption) (*PropertyMappingProviderRadius, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PropertyMappingProviderRadius
	err := ctx.RegisterResource("authentik:index/propertyMappingProviderRadius:PropertyMappingProviderRadius", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyMappingProviderRadius gets an existing PropertyMappingProviderRadius resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyMappingProviderRadius(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyMappingProviderRadiusState, opts ...pulumi.ResourceOption) (*PropertyMappingProviderRadius, error) {
	var resource PropertyMappingProviderRadius
	err := ctx.ReadResource("authentik:index/propertyMappingProviderRadius:PropertyMappingProviderRadius", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyMappingProviderRadius resources.
type propertyMappingProviderRadiusState struct {
	Expression *string `pulumi:"expression"`
	Name       *string `pulumi:"name"`
}

type PropertyMappingProviderRadiusState struct {
	Expression pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
}

func (PropertyMappingProviderRadiusState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingProviderRadiusState)(nil)).Elem()
}

type propertyMappingProviderRadiusArgs struct {
	Expression string  `pulumi:"expression"`
	Name       *string `pulumi:"name"`
}

// The set of arguments for constructing a PropertyMappingProviderRadius resource.
type PropertyMappingProviderRadiusArgs struct {
	Expression pulumi.StringInput
	Name       pulumi.StringPtrInput
}

func (PropertyMappingProviderRadiusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingProviderRadiusArgs)(nil)).Elem()
}

type PropertyMappingProviderRadiusInput interface {
	pulumi.Input

	ToPropertyMappingProviderRadiusOutput() PropertyMappingProviderRadiusOutput
	ToPropertyMappingProviderRadiusOutputWithContext(ctx context.Context) PropertyMappingProviderRadiusOutput
}

func (*PropertyMappingProviderRadius) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingProviderRadius)(nil)).Elem()
}

func (i *PropertyMappingProviderRadius) ToPropertyMappingProviderRadiusOutput() PropertyMappingProviderRadiusOutput {
	return i.ToPropertyMappingProviderRadiusOutputWithContext(context.Background())
}

func (i *PropertyMappingProviderRadius) ToPropertyMappingProviderRadiusOutputWithContext(ctx context.Context) PropertyMappingProviderRadiusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingProviderRadiusOutput)
}

// PropertyMappingProviderRadiusArrayInput is an input type that accepts PropertyMappingProviderRadiusArray and PropertyMappingProviderRadiusArrayOutput values.
// You can construct a concrete instance of `PropertyMappingProviderRadiusArrayInput` via:
//
//	PropertyMappingProviderRadiusArray{ PropertyMappingProviderRadiusArgs{...} }
type PropertyMappingProviderRadiusArrayInput interface {
	pulumi.Input

	ToPropertyMappingProviderRadiusArrayOutput() PropertyMappingProviderRadiusArrayOutput
	ToPropertyMappingProviderRadiusArrayOutputWithContext(context.Context) PropertyMappingProviderRadiusArrayOutput
}

type PropertyMappingProviderRadiusArray []PropertyMappingProviderRadiusInput

func (PropertyMappingProviderRadiusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingProviderRadius)(nil)).Elem()
}

func (i PropertyMappingProviderRadiusArray) ToPropertyMappingProviderRadiusArrayOutput() PropertyMappingProviderRadiusArrayOutput {
	return i.ToPropertyMappingProviderRadiusArrayOutputWithContext(context.Background())
}

func (i PropertyMappingProviderRadiusArray) ToPropertyMappingProviderRadiusArrayOutputWithContext(ctx context.Context) PropertyMappingProviderRadiusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingProviderRadiusArrayOutput)
}

// PropertyMappingProviderRadiusMapInput is an input type that accepts PropertyMappingProviderRadiusMap and PropertyMappingProviderRadiusMapOutput values.
// You can construct a concrete instance of `PropertyMappingProviderRadiusMapInput` via:
//
//	PropertyMappingProviderRadiusMap{ "key": PropertyMappingProviderRadiusArgs{...} }
type PropertyMappingProviderRadiusMapInput interface {
	pulumi.Input

	ToPropertyMappingProviderRadiusMapOutput() PropertyMappingProviderRadiusMapOutput
	ToPropertyMappingProviderRadiusMapOutputWithContext(context.Context) PropertyMappingProviderRadiusMapOutput
}

type PropertyMappingProviderRadiusMap map[string]PropertyMappingProviderRadiusInput

func (PropertyMappingProviderRadiusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingProviderRadius)(nil)).Elem()
}

func (i PropertyMappingProviderRadiusMap) ToPropertyMappingProviderRadiusMapOutput() PropertyMappingProviderRadiusMapOutput {
	return i.ToPropertyMappingProviderRadiusMapOutputWithContext(context.Background())
}

func (i PropertyMappingProviderRadiusMap) ToPropertyMappingProviderRadiusMapOutputWithContext(ctx context.Context) PropertyMappingProviderRadiusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingProviderRadiusMapOutput)
}

type PropertyMappingProviderRadiusOutput struct{ *pulumi.OutputState }

func (PropertyMappingProviderRadiusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingProviderRadius)(nil)).Elem()
}

func (o PropertyMappingProviderRadiusOutput) ToPropertyMappingProviderRadiusOutput() PropertyMappingProviderRadiusOutput {
	return o
}

func (o PropertyMappingProviderRadiusOutput) ToPropertyMappingProviderRadiusOutputWithContext(ctx context.Context) PropertyMappingProviderRadiusOutput {
	return o
}

func (o PropertyMappingProviderRadiusOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingProviderRadius) pulumi.StringOutput { return v.Expression }).(pulumi.StringOutput)
}

func (o PropertyMappingProviderRadiusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingProviderRadius) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type PropertyMappingProviderRadiusArrayOutput struct{ *pulumi.OutputState }

func (PropertyMappingProviderRadiusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingProviderRadius)(nil)).Elem()
}

func (o PropertyMappingProviderRadiusArrayOutput) ToPropertyMappingProviderRadiusArrayOutput() PropertyMappingProviderRadiusArrayOutput {
	return o
}

func (o PropertyMappingProviderRadiusArrayOutput) ToPropertyMappingProviderRadiusArrayOutputWithContext(ctx context.Context) PropertyMappingProviderRadiusArrayOutput {
	return o
}

func (o PropertyMappingProviderRadiusArrayOutput) Index(i pulumi.IntInput) PropertyMappingProviderRadiusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyMappingProviderRadius {
		return vs[0].([]*PropertyMappingProviderRadius)[vs[1].(int)]
	}).(PropertyMappingProviderRadiusOutput)
}

type PropertyMappingProviderRadiusMapOutput struct{ *pulumi.OutputState }

func (PropertyMappingProviderRadiusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingProviderRadius)(nil)).Elem()
}

func (o PropertyMappingProviderRadiusMapOutput) ToPropertyMappingProviderRadiusMapOutput() PropertyMappingProviderRadiusMapOutput {
	return o
}

func (o PropertyMappingProviderRadiusMapOutput) ToPropertyMappingProviderRadiusMapOutputWithContext(ctx context.Context) PropertyMappingProviderRadiusMapOutput {
	return o
}

func (o PropertyMappingProviderRadiusMapOutput) MapIndex(k pulumi.StringInput) PropertyMappingProviderRadiusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyMappingProviderRadius {
		return vs[0].(map[string]*PropertyMappingProviderRadius)[vs[1].(string)]
	}).(PropertyMappingProviderRadiusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingProviderRadiusInput)(nil)).Elem(), &PropertyMappingProviderRadius{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingProviderRadiusArrayInput)(nil)).Elem(), PropertyMappingProviderRadiusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingProviderRadiusMapInput)(nil)).Elem(), PropertyMappingProviderRadiusMap{})
	pulumi.RegisterOutputType(PropertyMappingProviderRadiusOutput{})
	pulumi.RegisterOutputType(PropertyMappingProviderRadiusArrayOutput{})
	pulumi.RegisterOutputType(PropertyMappingProviderRadiusMapOutput{})
}
