// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/v2024/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a duo setup stage
//			_, err := authentik.NewStageAuthenticatorDuo(ctx, "name", &authentik.StageAuthenticatorDuoArgs{
//				Name:         pulumi.String("duo-setup"),
//				ClientId:     pulumi.String("foo"),
//				ClientSecret: pulumi.String("bar"),
//				ApiHostname:  pulumi.String("http://foo.bar.baz"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StageAuthenticatorDuo struct {
	pulumi.CustomResourceState

	AdminIntegrationKey pulumi.StringPtrOutput `pulumi:"adminIntegrationKey"`
	AdminSecretKey      pulumi.StringPtrOutput `pulumi:"adminSecretKey"`
	ApiHostname         pulumi.StringOutput    `pulumi:"apiHostname"`
	ClientId            pulumi.StringOutput    `pulumi:"clientId"`
	ClientSecret        pulumi.StringOutput    `pulumi:"clientSecret"`
	ConfigureFlow       pulumi.StringPtrOutput `pulumi:"configureFlow"`
	FriendlyName        pulumi.StringPtrOutput `pulumi:"friendlyName"`
	Name                pulumi.StringOutput    `pulumi:"name"`
}

// NewStageAuthenticatorDuo registers a new resource with the given unique name, arguments, and options.
func NewStageAuthenticatorDuo(ctx *pulumi.Context,
	name string, args *StageAuthenticatorDuoArgs, opts ...pulumi.ResourceOption) (*StageAuthenticatorDuo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiHostname == nil {
		return nil, errors.New("invalid value for required argument 'ApiHostname'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.AdminSecretKey != nil {
		args.AdminSecretKey = pulumi.ToSecret(args.AdminSecretKey).(pulumi.StringPtrInput)
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"adminSecretKey",
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StageAuthenticatorDuo
	err := ctx.RegisterResource("authentik:index/stageAuthenticatorDuo:StageAuthenticatorDuo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStageAuthenticatorDuo gets an existing StageAuthenticatorDuo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStageAuthenticatorDuo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StageAuthenticatorDuoState, opts ...pulumi.ResourceOption) (*StageAuthenticatorDuo, error) {
	var resource StageAuthenticatorDuo
	err := ctx.ReadResource("authentik:index/stageAuthenticatorDuo:StageAuthenticatorDuo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StageAuthenticatorDuo resources.
type stageAuthenticatorDuoState struct {
	AdminIntegrationKey *string `pulumi:"adminIntegrationKey"`
	AdminSecretKey      *string `pulumi:"adminSecretKey"`
	ApiHostname         *string `pulumi:"apiHostname"`
	ClientId            *string `pulumi:"clientId"`
	ClientSecret        *string `pulumi:"clientSecret"`
	ConfigureFlow       *string `pulumi:"configureFlow"`
	FriendlyName        *string `pulumi:"friendlyName"`
	Name                *string `pulumi:"name"`
}

type StageAuthenticatorDuoState struct {
	AdminIntegrationKey pulumi.StringPtrInput
	AdminSecretKey      pulumi.StringPtrInput
	ApiHostname         pulumi.StringPtrInput
	ClientId            pulumi.StringPtrInput
	ClientSecret        pulumi.StringPtrInput
	ConfigureFlow       pulumi.StringPtrInput
	FriendlyName        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
}

func (StageAuthenticatorDuoState) ElementType() reflect.Type {
	return reflect.TypeOf((*stageAuthenticatorDuoState)(nil)).Elem()
}

type stageAuthenticatorDuoArgs struct {
	AdminIntegrationKey *string `pulumi:"adminIntegrationKey"`
	AdminSecretKey      *string `pulumi:"adminSecretKey"`
	ApiHostname         string  `pulumi:"apiHostname"`
	ClientId            string  `pulumi:"clientId"`
	ClientSecret        string  `pulumi:"clientSecret"`
	ConfigureFlow       *string `pulumi:"configureFlow"`
	FriendlyName        *string `pulumi:"friendlyName"`
	Name                *string `pulumi:"name"`
}

// The set of arguments for constructing a StageAuthenticatorDuo resource.
type StageAuthenticatorDuoArgs struct {
	AdminIntegrationKey pulumi.StringPtrInput
	AdminSecretKey      pulumi.StringPtrInput
	ApiHostname         pulumi.StringInput
	ClientId            pulumi.StringInput
	ClientSecret        pulumi.StringInput
	ConfigureFlow       pulumi.StringPtrInput
	FriendlyName        pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
}

func (StageAuthenticatorDuoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stageAuthenticatorDuoArgs)(nil)).Elem()
}

type StageAuthenticatorDuoInput interface {
	pulumi.Input

	ToStageAuthenticatorDuoOutput() StageAuthenticatorDuoOutput
	ToStageAuthenticatorDuoOutputWithContext(ctx context.Context) StageAuthenticatorDuoOutput
}

func (*StageAuthenticatorDuo) ElementType() reflect.Type {
	return reflect.TypeOf((**StageAuthenticatorDuo)(nil)).Elem()
}

func (i *StageAuthenticatorDuo) ToStageAuthenticatorDuoOutput() StageAuthenticatorDuoOutput {
	return i.ToStageAuthenticatorDuoOutputWithContext(context.Background())
}

func (i *StageAuthenticatorDuo) ToStageAuthenticatorDuoOutputWithContext(ctx context.Context) StageAuthenticatorDuoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAuthenticatorDuoOutput)
}

// StageAuthenticatorDuoArrayInput is an input type that accepts StageAuthenticatorDuoArray and StageAuthenticatorDuoArrayOutput values.
// You can construct a concrete instance of `StageAuthenticatorDuoArrayInput` via:
//
//	StageAuthenticatorDuoArray{ StageAuthenticatorDuoArgs{...} }
type StageAuthenticatorDuoArrayInput interface {
	pulumi.Input

	ToStageAuthenticatorDuoArrayOutput() StageAuthenticatorDuoArrayOutput
	ToStageAuthenticatorDuoArrayOutputWithContext(context.Context) StageAuthenticatorDuoArrayOutput
}

type StageAuthenticatorDuoArray []StageAuthenticatorDuoInput

func (StageAuthenticatorDuoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StageAuthenticatorDuo)(nil)).Elem()
}

func (i StageAuthenticatorDuoArray) ToStageAuthenticatorDuoArrayOutput() StageAuthenticatorDuoArrayOutput {
	return i.ToStageAuthenticatorDuoArrayOutputWithContext(context.Background())
}

func (i StageAuthenticatorDuoArray) ToStageAuthenticatorDuoArrayOutputWithContext(ctx context.Context) StageAuthenticatorDuoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAuthenticatorDuoArrayOutput)
}

// StageAuthenticatorDuoMapInput is an input type that accepts StageAuthenticatorDuoMap and StageAuthenticatorDuoMapOutput values.
// You can construct a concrete instance of `StageAuthenticatorDuoMapInput` via:
//
//	StageAuthenticatorDuoMap{ "key": StageAuthenticatorDuoArgs{...} }
type StageAuthenticatorDuoMapInput interface {
	pulumi.Input

	ToStageAuthenticatorDuoMapOutput() StageAuthenticatorDuoMapOutput
	ToStageAuthenticatorDuoMapOutputWithContext(context.Context) StageAuthenticatorDuoMapOutput
}

type StageAuthenticatorDuoMap map[string]StageAuthenticatorDuoInput

func (StageAuthenticatorDuoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StageAuthenticatorDuo)(nil)).Elem()
}

func (i StageAuthenticatorDuoMap) ToStageAuthenticatorDuoMapOutput() StageAuthenticatorDuoMapOutput {
	return i.ToStageAuthenticatorDuoMapOutputWithContext(context.Background())
}

func (i StageAuthenticatorDuoMap) ToStageAuthenticatorDuoMapOutputWithContext(ctx context.Context) StageAuthenticatorDuoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAuthenticatorDuoMapOutput)
}

type StageAuthenticatorDuoOutput struct{ *pulumi.OutputState }

func (StageAuthenticatorDuoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StageAuthenticatorDuo)(nil)).Elem()
}

func (o StageAuthenticatorDuoOutput) ToStageAuthenticatorDuoOutput() StageAuthenticatorDuoOutput {
	return o
}

func (o StageAuthenticatorDuoOutput) ToStageAuthenticatorDuoOutputWithContext(ctx context.Context) StageAuthenticatorDuoOutput {
	return o
}

func (o StageAuthenticatorDuoOutput) AdminIntegrationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StageAuthenticatorDuo) pulumi.StringPtrOutput { return v.AdminIntegrationKey }).(pulumi.StringPtrOutput)
}

func (o StageAuthenticatorDuoOutput) AdminSecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StageAuthenticatorDuo) pulumi.StringPtrOutput { return v.AdminSecretKey }).(pulumi.StringPtrOutput)
}

func (o StageAuthenticatorDuoOutput) ApiHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *StageAuthenticatorDuo) pulumi.StringOutput { return v.ApiHostname }).(pulumi.StringOutput)
}

func (o StageAuthenticatorDuoOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *StageAuthenticatorDuo) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

func (o StageAuthenticatorDuoOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *StageAuthenticatorDuo) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

func (o StageAuthenticatorDuoOutput) ConfigureFlow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StageAuthenticatorDuo) pulumi.StringPtrOutput { return v.ConfigureFlow }).(pulumi.StringPtrOutput)
}

func (o StageAuthenticatorDuoOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StageAuthenticatorDuo) pulumi.StringPtrOutput { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

func (o StageAuthenticatorDuoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StageAuthenticatorDuo) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type StageAuthenticatorDuoArrayOutput struct{ *pulumi.OutputState }

func (StageAuthenticatorDuoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StageAuthenticatorDuo)(nil)).Elem()
}

func (o StageAuthenticatorDuoArrayOutput) ToStageAuthenticatorDuoArrayOutput() StageAuthenticatorDuoArrayOutput {
	return o
}

func (o StageAuthenticatorDuoArrayOutput) ToStageAuthenticatorDuoArrayOutputWithContext(ctx context.Context) StageAuthenticatorDuoArrayOutput {
	return o
}

func (o StageAuthenticatorDuoArrayOutput) Index(i pulumi.IntInput) StageAuthenticatorDuoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StageAuthenticatorDuo {
		return vs[0].([]*StageAuthenticatorDuo)[vs[1].(int)]
	}).(StageAuthenticatorDuoOutput)
}

type StageAuthenticatorDuoMapOutput struct{ *pulumi.OutputState }

func (StageAuthenticatorDuoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StageAuthenticatorDuo)(nil)).Elem()
}

func (o StageAuthenticatorDuoMapOutput) ToStageAuthenticatorDuoMapOutput() StageAuthenticatorDuoMapOutput {
	return o
}

func (o StageAuthenticatorDuoMapOutput) ToStageAuthenticatorDuoMapOutputWithContext(ctx context.Context) StageAuthenticatorDuoMapOutput {
	return o
}

func (o StageAuthenticatorDuoMapOutput) MapIndex(k pulumi.StringInput) StageAuthenticatorDuoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StageAuthenticatorDuo {
		return vs[0].(map[string]*StageAuthenticatorDuo)[vs[1].(string)]
	}).(StageAuthenticatorDuoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StageAuthenticatorDuoInput)(nil)).Elem(), &StageAuthenticatorDuo{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageAuthenticatorDuoArrayInput)(nil)).Elem(), StageAuthenticatorDuoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageAuthenticatorDuoMapInput)(nil)).Elem(), StageAuthenticatorDuoMap{})
	pulumi.RegisterOutputType(StageAuthenticatorDuoOutput{})
	pulumi.RegisterOutputType(StageAuthenticatorDuoArrayOutput{})
	pulumi.RegisterOutputType(StageAuthenticatorDuoMapOutput{})
}
