// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type StageAuthenticatorSms struct {
	pulumi.CustomResourceState

	AccountSid    pulumi.StringOutput    `pulumi:"accountSid"`
	Auth          pulumi.StringOutput    `pulumi:"auth"`
	AuthPassword  pulumi.StringPtrOutput `pulumi:"authPassword"`
	AuthType      pulumi.StringPtrOutput `pulumi:"authType"`
	ConfigureFlow pulumi.StringPtrOutput `pulumi:"configureFlow"`
	FriendlyName  pulumi.StringPtrOutput `pulumi:"friendlyName"`
	FromNumber    pulumi.StringOutput    `pulumi:"fromNumber"`
	Mapping       pulumi.StringPtrOutput `pulumi:"mapping"`
	Name          pulumi.StringOutput    `pulumi:"name"`
	SmsProvider   pulumi.StringPtrOutput `pulumi:"smsProvider"`
	VerifyOnly    pulumi.BoolPtrOutput   `pulumi:"verifyOnly"`
}

// NewStageAuthenticatorSms registers a new resource with the given unique name, arguments, and options.
func NewStageAuthenticatorSms(ctx *pulumi.Context,
	name string, args *StageAuthenticatorSmsArgs, opts ...pulumi.ResourceOption) (*StageAuthenticatorSms, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountSid == nil {
		return nil, errors.New("invalid value for required argument 'AccountSid'")
	}
	if args.Auth == nil {
		return nil, errors.New("invalid value for required argument 'Auth'")
	}
	if args.FromNumber == nil {
		return nil, errors.New("invalid value for required argument 'FromNumber'")
	}
	if args.AccountSid != nil {
		args.AccountSid = pulumi.ToSecret(args.AccountSid).(pulumi.StringInput)
	}
	if args.Auth != nil {
		args.Auth = pulumi.ToSecret(args.Auth).(pulumi.StringInput)
	}
	if args.AuthPassword != nil {
		args.AuthPassword = pulumi.ToSecret(args.AuthPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accountSid",
		"auth",
		"authPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StageAuthenticatorSms
	err := ctx.RegisterResource("authentik:index/stageAuthenticatorSms:StageAuthenticatorSms", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStageAuthenticatorSms gets an existing StageAuthenticatorSms resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStageAuthenticatorSms(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StageAuthenticatorSmsState, opts ...pulumi.ResourceOption) (*StageAuthenticatorSms, error) {
	var resource StageAuthenticatorSms
	err := ctx.ReadResource("authentik:index/stageAuthenticatorSms:StageAuthenticatorSms", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StageAuthenticatorSms resources.
type stageAuthenticatorSmsState struct {
	AccountSid    *string `pulumi:"accountSid"`
	Auth          *string `pulumi:"auth"`
	AuthPassword  *string `pulumi:"authPassword"`
	AuthType      *string `pulumi:"authType"`
	ConfigureFlow *string `pulumi:"configureFlow"`
	FriendlyName  *string `pulumi:"friendlyName"`
	FromNumber    *string `pulumi:"fromNumber"`
	Mapping       *string `pulumi:"mapping"`
	Name          *string `pulumi:"name"`
	SmsProvider   *string `pulumi:"smsProvider"`
	VerifyOnly    *bool   `pulumi:"verifyOnly"`
}

type StageAuthenticatorSmsState struct {
	AccountSid    pulumi.StringPtrInput
	Auth          pulumi.StringPtrInput
	AuthPassword  pulumi.StringPtrInput
	AuthType      pulumi.StringPtrInput
	ConfigureFlow pulumi.StringPtrInput
	FriendlyName  pulumi.StringPtrInput
	FromNumber    pulumi.StringPtrInput
	Mapping       pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	SmsProvider   pulumi.StringPtrInput
	VerifyOnly    pulumi.BoolPtrInput
}

func (StageAuthenticatorSmsState) ElementType() reflect.Type {
	return reflect.TypeOf((*stageAuthenticatorSmsState)(nil)).Elem()
}

type stageAuthenticatorSmsArgs struct {
	AccountSid    string  `pulumi:"accountSid"`
	Auth          string  `pulumi:"auth"`
	AuthPassword  *string `pulumi:"authPassword"`
	AuthType      *string `pulumi:"authType"`
	ConfigureFlow *string `pulumi:"configureFlow"`
	FriendlyName  *string `pulumi:"friendlyName"`
	FromNumber    string  `pulumi:"fromNumber"`
	Mapping       *string `pulumi:"mapping"`
	Name          *string `pulumi:"name"`
	SmsProvider   *string `pulumi:"smsProvider"`
	VerifyOnly    *bool   `pulumi:"verifyOnly"`
}

// The set of arguments for constructing a StageAuthenticatorSms resource.
type StageAuthenticatorSmsArgs struct {
	AccountSid    pulumi.StringInput
	Auth          pulumi.StringInput
	AuthPassword  pulumi.StringPtrInput
	AuthType      pulumi.StringPtrInput
	ConfigureFlow pulumi.StringPtrInput
	FriendlyName  pulumi.StringPtrInput
	FromNumber    pulumi.StringInput
	Mapping       pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	SmsProvider   pulumi.StringPtrInput
	VerifyOnly    pulumi.BoolPtrInput
}

func (StageAuthenticatorSmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stageAuthenticatorSmsArgs)(nil)).Elem()
}

type StageAuthenticatorSmsInput interface {
	pulumi.Input

	ToStageAuthenticatorSmsOutput() StageAuthenticatorSmsOutput
	ToStageAuthenticatorSmsOutputWithContext(ctx context.Context) StageAuthenticatorSmsOutput
}

func (*StageAuthenticatorSms) ElementType() reflect.Type {
	return reflect.TypeOf((**StageAuthenticatorSms)(nil)).Elem()
}

func (i *StageAuthenticatorSms) ToStageAuthenticatorSmsOutput() StageAuthenticatorSmsOutput {
	return i.ToStageAuthenticatorSmsOutputWithContext(context.Background())
}

func (i *StageAuthenticatorSms) ToStageAuthenticatorSmsOutputWithContext(ctx context.Context) StageAuthenticatorSmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAuthenticatorSmsOutput)
}

// StageAuthenticatorSmsArrayInput is an input type that accepts StageAuthenticatorSmsArray and StageAuthenticatorSmsArrayOutput values.
// You can construct a concrete instance of `StageAuthenticatorSmsArrayInput` via:
//
//	StageAuthenticatorSmsArray{ StageAuthenticatorSmsArgs{...} }
type StageAuthenticatorSmsArrayInput interface {
	pulumi.Input

	ToStageAuthenticatorSmsArrayOutput() StageAuthenticatorSmsArrayOutput
	ToStageAuthenticatorSmsArrayOutputWithContext(context.Context) StageAuthenticatorSmsArrayOutput
}

type StageAuthenticatorSmsArray []StageAuthenticatorSmsInput

func (StageAuthenticatorSmsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StageAuthenticatorSms)(nil)).Elem()
}

func (i StageAuthenticatorSmsArray) ToStageAuthenticatorSmsArrayOutput() StageAuthenticatorSmsArrayOutput {
	return i.ToStageAuthenticatorSmsArrayOutputWithContext(context.Background())
}

func (i StageAuthenticatorSmsArray) ToStageAuthenticatorSmsArrayOutputWithContext(ctx context.Context) StageAuthenticatorSmsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAuthenticatorSmsArrayOutput)
}

// StageAuthenticatorSmsMapInput is an input type that accepts StageAuthenticatorSmsMap and StageAuthenticatorSmsMapOutput values.
// You can construct a concrete instance of `StageAuthenticatorSmsMapInput` via:
//
//	StageAuthenticatorSmsMap{ "key": StageAuthenticatorSmsArgs{...} }
type StageAuthenticatorSmsMapInput interface {
	pulumi.Input

	ToStageAuthenticatorSmsMapOutput() StageAuthenticatorSmsMapOutput
	ToStageAuthenticatorSmsMapOutputWithContext(context.Context) StageAuthenticatorSmsMapOutput
}

type StageAuthenticatorSmsMap map[string]StageAuthenticatorSmsInput

func (StageAuthenticatorSmsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StageAuthenticatorSms)(nil)).Elem()
}

func (i StageAuthenticatorSmsMap) ToStageAuthenticatorSmsMapOutput() StageAuthenticatorSmsMapOutput {
	return i.ToStageAuthenticatorSmsMapOutputWithContext(context.Background())
}

func (i StageAuthenticatorSmsMap) ToStageAuthenticatorSmsMapOutputWithContext(ctx context.Context) StageAuthenticatorSmsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAuthenticatorSmsMapOutput)
}

type StageAuthenticatorSmsOutput struct{ *pulumi.OutputState }

func (StageAuthenticatorSmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StageAuthenticatorSms)(nil)).Elem()
}

func (o StageAuthenticatorSmsOutput) ToStageAuthenticatorSmsOutput() StageAuthenticatorSmsOutput {
	return o
}

func (o StageAuthenticatorSmsOutput) ToStageAuthenticatorSmsOutputWithContext(ctx context.Context) StageAuthenticatorSmsOutput {
	return o
}

func (o StageAuthenticatorSmsOutput) AccountSid() pulumi.StringOutput {
	return o.ApplyT(func(v *StageAuthenticatorSms) pulumi.StringOutput { return v.AccountSid }).(pulumi.StringOutput)
}

func (o StageAuthenticatorSmsOutput) Auth() pulumi.StringOutput {
	return o.ApplyT(func(v *StageAuthenticatorSms) pulumi.StringOutput { return v.Auth }).(pulumi.StringOutput)
}

func (o StageAuthenticatorSmsOutput) AuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StageAuthenticatorSms) pulumi.StringPtrOutput { return v.AuthPassword }).(pulumi.StringPtrOutput)
}

func (o StageAuthenticatorSmsOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StageAuthenticatorSms) pulumi.StringPtrOutput { return v.AuthType }).(pulumi.StringPtrOutput)
}

func (o StageAuthenticatorSmsOutput) ConfigureFlow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StageAuthenticatorSms) pulumi.StringPtrOutput { return v.ConfigureFlow }).(pulumi.StringPtrOutput)
}

func (o StageAuthenticatorSmsOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StageAuthenticatorSms) pulumi.StringPtrOutput { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

func (o StageAuthenticatorSmsOutput) FromNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *StageAuthenticatorSms) pulumi.StringOutput { return v.FromNumber }).(pulumi.StringOutput)
}

func (o StageAuthenticatorSmsOutput) Mapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StageAuthenticatorSms) pulumi.StringPtrOutput { return v.Mapping }).(pulumi.StringPtrOutput)
}

func (o StageAuthenticatorSmsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StageAuthenticatorSms) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o StageAuthenticatorSmsOutput) SmsProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StageAuthenticatorSms) pulumi.StringPtrOutput { return v.SmsProvider }).(pulumi.StringPtrOutput)
}

func (o StageAuthenticatorSmsOutput) VerifyOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StageAuthenticatorSms) pulumi.BoolPtrOutput { return v.VerifyOnly }).(pulumi.BoolPtrOutput)
}

type StageAuthenticatorSmsArrayOutput struct{ *pulumi.OutputState }

func (StageAuthenticatorSmsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StageAuthenticatorSms)(nil)).Elem()
}

func (o StageAuthenticatorSmsArrayOutput) ToStageAuthenticatorSmsArrayOutput() StageAuthenticatorSmsArrayOutput {
	return o
}

func (o StageAuthenticatorSmsArrayOutput) ToStageAuthenticatorSmsArrayOutputWithContext(ctx context.Context) StageAuthenticatorSmsArrayOutput {
	return o
}

func (o StageAuthenticatorSmsArrayOutput) Index(i pulumi.IntInput) StageAuthenticatorSmsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StageAuthenticatorSms {
		return vs[0].([]*StageAuthenticatorSms)[vs[1].(int)]
	}).(StageAuthenticatorSmsOutput)
}

type StageAuthenticatorSmsMapOutput struct{ *pulumi.OutputState }

func (StageAuthenticatorSmsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StageAuthenticatorSms)(nil)).Elem()
}

func (o StageAuthenticatorSmsMapOutput) ToStageAuthenticatorSmsMapOutput() StageAuthenticatorSmsMapOutput {
	return o
}

func (o StageAuthenticatorSmsMapOutput) ToStageAuthenticatorSmsMapOutputWithContext(ctx context.Context) StageAuthenticatorSmsMapOutput {
	return o
}

func (o StageAuthenticatorSmsMapOutput) MapIndex(k pulumi.StringInput) StageAuthenticatorSmsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StageAuthenticatorSms {
		return vs[0].(map[string]*StageAuthenticatorSms)[vs[1].(string)]
	}).(StageAuthenticatorSmsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StageAuthenticatorSmsInput)(nil)).Elem(), &StageAuthenticatorSms{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageAuthenticatorSmsArrayInput)(nil)).Elem(), StageAuthenticatorSmsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageAuthenticatorSmsMapInput)(nil)).Elem(), StageAuthenticatorSmsMap{})
	pulumi.RegisterOutputType(StageAuthenticatorSmsOutput{})
	pulumi.RegisterOutputType(StageAuthenticatorSmsArrayOutput{})
	pulumi.RegisterOutputType(StageAuthenticatorSmsMapOutput{})
}
