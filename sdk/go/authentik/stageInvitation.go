// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type StageInvitation struct {
	pulumi.CustomResourceState

	ContinueFlowWithoutInvitation pulumi.BoolPtrOutput `pulumi:"continueFlowWithoutInvitation"`
	Name                          pulumi.StringOutput  `pulumi:"name"`
}

// NewStageInvitation registers a new resource with the given unique name, arguments, and options.
func NewStageInvitation(ctx *pulumi.Context,
	name string, args *StageInvitationArgs, opts ...pulumi.ResourceOption) (*StageInvitation, error) {
	if args == nil {
		args = &StageInvitationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StageInvitation
	err := ctx.RegisterResource("authentik:index/stageInvitation:StageInvitation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStageInvitation gets an existing StageInvitation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStageInvitation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StageInvitationState, opts ...pulumi.ResourceOption) (*StageInvitation, error) {
	var resource StageInvitation
	err := ctx.ReadResource("authentik:index/stageInvitation:StageInvitation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StageInvitation resources.
type stageInvitationState struct {
	ContinueFlowWithoutInvitation *bool   `pulumi:"continueFlowWithoutInvitation"`
	Name                          *string `pulumi:"name"`
}

type StageInvitationState struct {
	ContinueFlowWithoutInvitation pulumi.BoolPtrInput
	Name                          pulumi.StringPtrInput
}

func (StageInvitationState) ElementType() reflect.Type {
	return reflect.TypeOf((*stageInvitationState)(nil)).Elem()
}

type stageInvitationArgs struct {
	ContinueFlowWithoutInvitation *bool   `pulumi:"continueFlowWithoutInvitation"`
	Name                          *string `pulumi:"name"`
}

// The set of arguments for constructing a StageInvitation resource.
type StageInvitationArgs struct {
	ContinueFlowWithoutInvitation pulumi.BoolPtrInput
	Name                          pulumi.StringPtrInput
}

func (StageInvitationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stageInvitationArgs)(nil)).Elem()
}

type StageInvitationInput interface {
	pulumi.Input

	ToStageInvitationOutput() StageInvitationOutput
	ToStageInvitationOutputWithContext(ctx context.Context) StageInvitationOutput
}

func (*StageInvitation) ElementType() reflect.Type {
	return reflect.TypeOf((**StageInvitation)(nil)).Elem()
}

func (i *StageInvitation) ToStageInvitationOutput() StageInvitationOutput {
	return i.ToStageInvitationOutputWithContext(context.Background())
}

func (i *StageInvitation) ToStageInvitationOutputWithContext(ctx context.Context) StageInvitationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageInvitationOutput)
}

// StageInvitationArrayInput is an input type that accepts StageInvitationArray and StageInvitationArrayOutput values.
// You can construct a concrete instance of `StageInvitationArrayInput` via:
//
//	StageInvitationArray{ StageInvitationArgs{...} }
type StageInvitationArrayInput interface {
	pulumi.Input

	ToStageInvitationArrayOutput() StageInvitationArrayOutput
	ToStageInvitationArrayOutputWithContext(context.Context) StageInvitationArrayOutput
}

type StageInvitationArray []StageInvitationInput

func (StageInvitationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StageInvitation)(nil)).Elem()
}

func (i StageInvitationArray) ToStageInvitationArrayOutput() StageInvitationArrayOutput {
	return i.ToStageInvitationArrayOutputWithContext(context.Background())
}

func (i StageInvitationArray) ToStageInvitationArrayOutputWithContext(ctx context.Context) StageInvitationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageInvitationArrayOutput)
}

// StageInvitationMapInput is an input type that accepts StageInvitationMap and StageInvitationMapOutput values.
// You can construct a concrete instance of `StageInvitationMapInput` via:
//
//	StageInvitationMap{ "key": StageInvitationArgs{...} }
type StageInvitationMapInput interface {
	pulumi.Input

	ToStageInvitationMapOutput() StageInvitationMapOutput
	ToStageInvitationMapOutputWithContext(context.Context) StageInvitationMapOutput
}

type StageInvitationMap map[string]StageInvitationInput

func (StageInvitationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StageInvitation)(nil)).Elem()
}

func (i StageInvitationMap) ToStageInvitationMapOutput() StageInvitationMapOutput {
	return i.ToStageInvitationMapOutputWithContext(context.Background())
}

func (i StageInvitationMap) ToStageInvitationMapOutputWithContext(ctx context.Context) StageInvitationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageInvitationMapOutput)
}

type StageInvitationOutput struct{ *pulumi.OutputState }

func (StageInvitationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StageInvitation)(nil)).Elem()
}

func (o StageInvitationOutput) ToStageInvitationOutput() StageInvitationOutput {
	return o
}

func (o StageInvitationOutput) ToStageInvitationOutputWithContext(ctx context.Context) StageInvitationOutput {
	return o
}

func (o StageInvitationOutput) ContinueFlowWithoutInvitation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StageInvitation) pulumi.BoolPtrOutput { return v.ContinueFlowWithoutInvitation }).(pulumi.BoolPtrOutput)
}

func (o StageInvitationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StageInvitation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type StageInvitationArrayOutput struct{ *pulumi.OutputState }

func (StageInvitationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StageInvitation)(nil)).Elem()
}

func (o StageInvitationArrayOutput) ToStageInvitationArrayOutput() StageInvitationArrayOutput {
	return o
}

func (o StageInvitationArrayOutput) ToStageInvitationArrayOutputWithContext(ctx context.Context) StageInvitationArrayOutput {
	return o
}

func (o StageInvitationArrayOutput) Index(i pulumi.IntInput) StageInvitationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StageInvitation {
		return vs[0].([]*StageInvitation)[vs[1].(int)]
	}).(StageInvitationOutput)
}

type StageInvitationMapOutput struct{ *pulumi.OutputState }

func (StageInvitationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StageInvitation)(nil)).Elem()
}

func (o StageInvitationMapOutput) ToStageInvitationMapOutput() StageInvitationMapOutput {
	return o
}

func (o StageInvitationMapOutput) ToStageInvitationMapOutputWithContext(ctx context.Context) StageInvitationMapOutput {
	return o
}

func (o StageInvitationMapOutput) MapIndex(k pulumi.StringInput) StageInvitationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StageInvitation {
		return vs[0].(map[string]*StageInvitation)[vs[1].(string)]
	}).(StageInvitationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StageInvitationInput)(nil)).Elem(), &StageInvitation{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageInvitationArrayInput)(nil)).Elem(), StageInvitationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageInvitationMapInput)(nil)).Elem(), StageInvitationMap{})
	pulumi.RegisterOutputType(StageInvitationOutput{})
	pulumi.RegisterOutputType(StageInvitationArrayOutput{})
	pulumi.RegisterOutputType(StageInvitationMapOutput{})
}
