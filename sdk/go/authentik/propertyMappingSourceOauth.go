// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage OAuth Source Property mappings
type PropertyMappingSourceOauth struct {
	pulumi.CustomResourceState

	Expression pulumi.StringOutput `pulumi:"expression"`
	Name       pulumi.StringOutput `pulumi:"name"`
}

// NewPropertyMappingSourceOauth registers a new resource with the given unique name, arguments, and options.
func NewPropertyMappingSourceOauth(ctx *pulumi.Context,
	name string, args *PropertyMappingSourceOauthArgs, opts ...pulumi.ResourceOption) (*PropertyMappingSourceOauth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PropertyMappingSourceOauth
	err := ctx.RegisterResource("authentik:index/propertyMappingSourceOauth:PropertyMappingSourceOauth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyMappingSourceOauth gets an existing PropertyMappingSourceOauth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyMappingSourceOauth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyMappingSourceOauthState, opts ...pulumi.ResourceOption) (*PropertyMappingSourceOauth, error) {
	var resource PropertyMappingSourceOauth
	err := ctx.ReadResource("authentik:index/propertyMappingSourceOauth:PropertyMappingSourceOauth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyMappingSourceOauth resources.
type propertyMappingSourceOauthState struct {
	Expression *string `pulumi:"expression"`
	Name       *string `pulumi:"name"`
}

type PropertyMappingSourceOauthState struct {
	Expression pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
}

func (PropertyMappingSourceOauthState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingSourceOauthState)(nil)).Elem()
}

type propertyMappingSourceOauthArgs struct {
	Expression string  `pulumi:"expression"`
	Name       *string `pulumi:"name"`
}

// The set of arguments for constructing a PropertyMappingSourceOauth resource.
type PropertyMappingSourceOauthArgs struct {
	Expression pulumi.StringInput
	Name       pulumi.StringPtrInput
}

func (PropertyMappingSourceOauthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingSourceOauthArgs)(nil)).Elem()
}

type PropertyMappingSourceOauthInput interface {
	pulumi.Input

	ToPropertyMappingSourceOauthOutput() PropertyMappingSourceOauthOutput
	ToPropertyMappingSourceOauthOutputWithContext(ctx context.Context) PropertyMappingSourceOauthOutput
}

func (*PropertyMappingSourceOauth) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingSourceOauth)(nil)).Elem()
}

func (i *PropertyMappingSourceOauth) ToPropertyMappingSourceOauthOutput() PropertyMappingSourceOauthOutput {
	return i.ToPropertyMappingSourceOauthOutputWithContext(context.Background())
}

func (i *PropertyMappingSourceOauth) ToPropertyMappingSourceOauthOutputWithContext(ctx context.Context) PropertyMappingSourceOauthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSourceOauthOutput)
}

// PropertyMappingSourceOauthArrayInput is an input type that accepts PropertyMappingSourceOauthArray and PropertyMappingSourceOauthArrayOutput values.
// You can construct a concrete instance of `PropertyMappingSourceOauthArrayInput` via:
//
//	PropertyMappingSourceOauthArray{ PropertyMappingSourceOauthArgs{...} }
type PropertyMappingSourceOauthArrayInput interface {
	pulumi.Input

	ToPropertyMappingSourceOauthArrayOutput() PropertyMappingSourceOauthArrayOutput
	ToPropertyMappingSourceOauthArrayOutputWithContext(context.Context) PropertyMappingSourceOauthArrayOutput
}

type PropertyMappingSourceOauthArray []PropertyMappingSourceOauthInput

func (PropertyMappingSourceOauthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingSourceOauth)(nil)).Elem()
}

func (i PropertyMappingSourceOauthArray) ToPropertyMappingSourceOauthArrayOutput() PropertyMappingSourceOauthArrayOutput {
	return i.ToPropertyMappingSourceOauthArrayOutputWithContext(context.Background())
}

func (i PropertyMappingSourceOauthArray) ToPropertyMappingSourceOauthArrayOutputWithContext(ctx context.Context) PropertyMappingSourceOauthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSourceOauthArrayOutput)
}

// PropertyMappingSourceOauthMapInput is an input type that accepts PropertyMappingSourceOauthMap and PropertyMappingSourceOauthMapOutput values.
// You can construct a concrete instance of `PropertyMappingSourceOauthMapInput` via:
//
//	PropertyMappingSourceOauthMap{ "key": PropertyMappingSourceOauthArgs{...} }
type PropertyMappingSourceOauthMapInput interface {
	pulumi.Input

	ToPropertyMappingSourceOauthMapOutput() PropertyMappingSourceOauthMapOutput
	ToPropertyMappingSourceOauthMapOutputWithContext(context.Context) PropertyMappingSourceOauthMapOutput
}

type PropertyMappingSourceOauthMap map[string]PropertyMappingSourceOauthInput

func (PropertyMappingSourceOauthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingSourceOauth)(nil)).Elem()
}

func (i PropertyMappingSourceOauthMap) ToPropertyMappingSourceOauthMapOutput() PropertyMappingSourceOauthMapOutput {
	return i.ToPropertyMappingSourceOauthMapOutputWithContext(context.Background())
}

func (i PropertyMappingSourceOauthMap) ToPropertyMappingSourceOauthMapOutputWithContext(ctx context.Context) PropertyMappingSourceOauthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSourceOauthMapOutput)
}

type PropertyMappingSourceOauthOutput struct{ *pulumi.OutputState }

func (PropertyMappingSourceOauthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingSourceOauth)(nil)).Elem()
}

func (o PropertyMappingSourceOauthOutput) ToPropertyMappingSourceOauthOutput() PropertyMappingSourceOauthOutput {
	return o
}

func (o PropertyMappingSourceOauthOutput) ToPropertyMappingSourceOauthOutputWithContext(ctx context.Context) PropertyMappingSourceOauthOutput {
	return o
}

func (o PropertyMappingSourceOauthOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingSourceOauth) pulumi.StringOutput { return v.Expression }).(pulumi.StringOutput)
}

func (o PropertyMappingSourceOauthOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingSourceOauth) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type PropertyMappingSourceOauthArrayOutput struct{ *pulumi.OutputState }

func (PropertyMappingSourceOauthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingSourceOauth)(nil)).Elem()
}

func (o PropertyMappingSourceOauthArrayOutput) ToPropertyMappingSourceOauthArrayOutput() PropertyMappingSourceOauthArrayOutput {
	return o
}

func (o PropertyMappingSourceOauthArrayOutput) ToPropertyMappingSourceOauthArrayOutputWithContext(ctx context.Context) PropertyMappingSourceOauthArrayOutput {
	return o
}

func (o PropertyMappingSourceOauthArrayOutput) Index(i pulumi.IntInput) PropertyMappingSourceOauthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyMappingSourceOauth {
		return vs[0].([]*PropertyMappingSourceOauth)[vs[1].(int)]
	}).(PropertyMappingSourceOauthOutput)
}

type PropertyMappingSourceOauthMapOutput struct{ *pulumi.OutputState }

func (PropertyMappingSourceOauthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingSourceOauth)(nil)).Elem()
}

func (o PropertyMappingSourceOauthMapOutput) ToPropertyMappingSourceOauthMapOutput() PropertyMappingSourceOauthMapOutput {
	return o
}

func (o PropertyMappingSourceOauthMapOutput) ToPropertyMappingSourceOauthMapOutputWithContext(ctx context.Context) PropertyMappingSourceOauthMapOutput {
	return o
}

func (o PropertyMappingSourceOauthMapOutput) MapIndex(k pulumi.StringInput) PropertyMappingSourceOauthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyMappingSourceOauth {
		return vs[0].(map[string]*PropertyMappingSourceOauth)[vs[1].(string)]
	}).(PropertyMappingSourceOauthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSourceOauthInput)(nil)).Elem(), &PropertyMappingSourceOauth{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSourceOauthArrayInput)(nil)).Elem(), PropertyMappingSourceOauthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSourceOauthMapInput)(nil)).Elem(), PropertyMappingSourceOauthMap{})
	pulumi.RegisterOutputType(PropertyMappingSourceOauthOutput{})
	pulumi.RegisterOutputType(PropertyMappingSourceOauthArrayOutput{})
	pulumi.RegisterOutputType(PropertyMappingSourceOauthMapOutput{})
}
