// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PolicyPassword struct {
	pulumi.CustomResourceState

	AmountDigits         pulumi.IntPtrOutput    `pulumi:"amountDigits"`
	AmountLowercase      pulumi.IntPtrOutput    `pulumi:"amountLowercase"`
	AmountSymbols        pulumi.IntPtrOutput    `pulumi:"amountSymbols"`
	AmountUppercase      pulumi.IntPtrOutput    `pulumi:"amountUppercase"`
	CheckHaveIBeenPwned  pulumi.BoolPtrOutput   `pulumi:"checkHaveIBeenPwned"`
	CheckStaticRules     pulumi.BoolPtrOutput   `pulumi:"checkStaticRules"`
	CheckZxcvbn          pulumi.BoolPtrOutput   `pulumi:"checkZxcvbn"`
	ErrorMessage         pulumi.StringOutput    `pulumi:"errorMessage"`
	ExecutionLogging     pulumi.BoolPtrOutput   `pulumi:"executionLogging"`
	HibpAllowedCount     pulumi.IntPtrOutput    `pulumi:"hibpAllowedCount"`
	LengthMin            pulumi.IntPtrOutput    `pulumi:"lengthMin"`
	Name                 pulumi.StringOutput    `pulumi:"name"`
	PasswordField        pulumi.StringPtrOutput `pulumi:"passwordField"`
	SymbolCharset        pulumi.StringPtrOutput `pulumi:"symbolCharset"`
	ZxcvbnScoreThreshold pulumi.IntPtrOutput    `pulumi:"zxcvbnScoreThreshold"`
}

// NewPolicyPassword registers a new resource with the given unique name, arguments, and options.
func NewPolicyPassword(ctx *pulumi.Context,
	name string, args *PolicyPasswordArgs, opts ...pulumi.ResourceOption) (*PolicyPassword, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ErrorMessage == nil {
		return nil, errors.New("invalid value for required argument 'ErrorMessage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyPassword
	err := ctx.RegisterResource("authentik:index/policyPassword:PolicyPassword", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyPassword gets an existing PolicyPassword resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyPassword(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyPasswordState, opts ...pulumi.ResourceOption) (*PolicyPassword, error) {
	var resource PolicyPassword
	err := ctx.ReadResource("authentik:index/policyPassword:PolicyPassword", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyPassword resources.
type policyPasswordState struct {
	AmountDigits         *int    `pulumi:"amountDigits"`
	AmountLowercase      *int    `pulumi:"amountLowercase"`
	AmountSymbols        *int    `pulumi:"amountSymbols"`
	AmountUppercase      *int    `pulumi:"amountUppercase"`
	CheckHaveIBeenPwned  *bool   `pulumi:"checkHaveIBeenPwned"`
	CheckStaticRules     *bool   `pulumi:"checkStaticRules"`
	CheckZxcvbn          *bool   `pulumi:"checkZxcvbn"`
	ErrorMessage         *string `pulumi:"errorMessage"`
	ExecutionLogging     *bool   `pulumi:"executionLogging"`
	HibpAllowedCount     *int    `pulumi:"hibpAllowedCount"`
	LengthMin            *int    `pulumi:"lengthMin"`
	Name                 *string `pulumi:"name"`
	PasswordField        *string `pulumi:"passwordField"`
	SymbolCharset        *string `pulumi:"symbolCharset"`
	ZxcvbnScoreThreshold *int    `pulumi:"zxcvbnScoreThreshold"`
}

type PolicyPasswordState struct {
	AmountDigits         pulumi.IntPtrInput
	AmountLowercase      pulumi.IntPtrInput
	AmountSymbols        pulumi.IntPtrInput
	AmountUppercase      pulumi.IntPtrInput
	CheckHaveIBeenPwned  pulumi.BoolPtrInput
	CheckStaticRules     pulumi.BoolPtrInput
	CheckZxcvbn          pulumi.BoolPtrInput
	ErrorMessage         pulumi.StringPtrInput
	ExecutionLogging     pulumi.BoolPtrInput
	HibpAllowedCount     pulumi.IntPtrInput
	LengthMin            pulumi.IntPtrInput
	Name                 pulumi.StringPtrInput
	PasswordField        pulumi.StringPtrInput
	SymbolCharset        pulumi.StringPtrInput
	ZxcvbnScoreThreshold pulumi.IntPtrInput
}

func (PolicyPasswordState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyPasswordState)(nil)).Elem()
}

type policyPasswordArgs struct {
	AmountDigits         *int    `pulumi:"amountDigits"`
	AmountLowercase      *int    `pulumi:"amountLowercase"`
	AmountSymbols        *int    `pulumi:"amountSymbols"`
	AmountUppercase      *int    `pulumi:"amountUppercase"`
	CheckHaveIBeenPwned  *bool   `pulumi:"checkHaveIBeenPwned"`
	CheckStaticRules     *bool   `pulumi:"checkStaticRules"`
	CheckZxcvbn          *bool   `pulumi:"checkZxcvbn"`
	ErrorMessage         string  `pulumi:"errorMessage"`
	ExecutionLogging     *bool   `pulumi:"executionLogging"`
	HibpAllowedCount     *int    `pulumi:"hibpAllowedCount"`
	LengthMin            *int    `pulumi:"lengthMin"`
	Name                 *string `pulumi:"name"`
	PasswordField        *string `pulumi:"passwordField"`
	SymbolCharset        *string `pulumi:"symbolCharset"`
	ZxcvbnScoreThreshold *int    `pulumi:"zxcvbnScoreThreshold"`
}

// The set of arguments for constructing a PolicyPassword resource.
type PolicyPasswordArgs struct {
	AmountDigits         pulumi.IntPtrInput
	AmountLowercase      pulumi.IntPtrInput
	AmountSymbols        pulumi.IntPtrInput
	AmountUppercase      pulumi.IntPtrInput
	CheckHaveIBeenPwned  pulumi.BoolPtrInput
	CheckStaticRules     pulumi.BoolPtrInput
	CheckZxcvbn          pulumi.BoolPtrInput
	ErrorMessage         pulumi.StringInput
	ExecutionLogging     pulumi.BoolPtrInput
	HibpAllowedCount     pulumi.IntPtrInput
	LengthMin            pulumi.IntPtrInput
	Name                 pulumi.StringPtrInput
	PasswordField        pulumi.StringPtrInput
	SymbolCharset        pulumi.StringPtrInput
	ZxcvbnScoreThreshold pulumi.IntPtrInput
}

func (PolicyPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyPasswordArgs)(nil)).Elem()
}

type PolicyPasswordInput interface {
	pulumi.Input

	ToPolicyPasswordOutput() PolicyPasswordOutput
	ToPolicyPasswordOutputWithContext(ctx context.Context) PolicyPasswordOutput
}

func (*PolicyPassword) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyPassword)(nil)).Elem()
}

func (i *PolicyPassword) ToPolicyPasswordOutput() PolicyPasswordOutput {
	return i.ToPolicyPasswordOutputWithContext(context.Background())
}

func (i *PolicyPassword) ToPolicyPasswordOutputWithContext(ctx context.Context) PolicyPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPasswordOutput)
}

// PolicyPasswordArrayInput is an input type that accepts PolicyPasswordArray and PolicyPasswordArrayOutput values.
// You can construct a concrete instance of `PolicyPasswordArrayInput` via:
//
//	PolicyPasswordArray{ PolicyPasswordArgs{...} }
type PolicyPasswordArrayInput interface {
	pulumi.Input

	ToPolicyPasswordArrayOutput() PolicyPasswordArrayOutput
	ToPolicyPasswordArrayOutputWithContext(context.Context) PolicyPasswordArrayOutput
}

type PolicyPasswordArray []PolicyPasswordInput

func (PolicyPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyPassword)(nil)).Elem()
}

func (i PolicyPasswordArray) ToPolicyPasswordArrayOutput() PolicyPasswordArrayOutput {
	return i.ToPolicyPasswordArrayOutputWithContext(context.Background())
}

func (i PolicyPasswordArray) ToPolicyPasswordArrayOutputWithContext(ctx context.Context) PolicyPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPasswordArrayOutput)
}

// PolicyPasswordMapInput is an input type that accepts PolicyPasswordMap and PolicyPasswordMapOutput values.
// You can construct a concrete instance of `PolicyPasswordMapInput` via:
//
//	PolicyPasswordMap{ "key": PolicyPasswordArgs{...} }
type PolicyPasswordMapInput interface {
	pulumi.Input

	ToPolicyPasswordMapOutput() PolicyPasswordMapOutput
	ToPolicyPasswordMapOutputWithContext(context.Context) PolicyPasswordMapOutput
}

type PolicyPasswordMap map[string]PolicyPasswordInput

func (PolicyPasswordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyPassword)(nil)).Elem()
}

func (i PolicyPasswordMap) ToPolicyPasswordMapOutput() PolicyPasswordMapOutput {
	return i.ToPolicyPasswordMapOutputWithContext(context.Background())
}

func (i PolicyPasswordMap) ToPolicyPasswordMapOutputWithContext(ctx context.Context) PolicyPasswordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPasswordMapOutput)
}

type PolicyPasswordOutput struct{ *pulumi.OutputState }

func (PolicyPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyPassword)(nil)).Elem()
}

func (o PolicyPasswordOutput) ToPolicyPasswordOutput() PolicyPasswordOutput {
	return o
}

func (o PolicyPasswordOutput) ToPolicyPasswordOutputWithContext(ctx context.Context) PolicyPasswordOutput {
	return o
}

func (o PolicyPasswordOutput) AmountDigits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.IntPtrOutput { return v.AmountDigits }).(pulumi.IntPtrOutput)
}

func (o PolicyPasswordOutput) AmountLowercase() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.IntPtrOutput { return v.AmountLowercase }).(pulumi.IntPtrOutput)
}

func (o PolicyPasswordOutput) AmountSymbols() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.IntPtrOutput { return v.AmountSymbols }).(pulumi.IntPtrOutput)
}

func (o PolicyPasswordOutput) AmountUppercase() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.IntPtrOutput { return v.AmountUppercase }).(pulumi.IntPtrOutput)
}

func (o PolicyPasswordOutput) CheckHaveIBeenPwned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.BoolPtrOutput { return v.CheckHaveIBeenPwned }).(pulumi.BoolPtrOutput)
}

func (o PolicyPasswordOutput) CheckStaticRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.BoolPtrOutput { return v.CheckStaticRules }).(pulumi.BoolPtrOutput)
}

func (o PolicyPasswordOutput) CheckZxcvbn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.BoolPtrOutput { return v.CheckZxcvbn }).(pulumi.BoolPtrOutput)
}

func (o PolicyPasswordOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.StringOutput { return v.ErrorMessage }).(pulumi.StringOutput)
}

func (o PolicyPasswordOutput) ExecutionLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.BoolPtrOutput { return v.ExecutionLogging }).(pulumi.BoolPtrOutput)
}

func (o PolicyPasswordOutput) HibpAllowedCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.IntPtrOutput { return v.HibpAllowedCount }).(pulumi.IntPtrOutput)
}

func (o PolicyPasswordOutput) LengthMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.IntPtrOutput { return v.LengthMin }).(pulumi.IntPtrOutput)
}

func (o PolicyPasswordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PolicyPasswordOutput) PasswordField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.StringPtrOutput { return v.PasswordField }).(pulumi.StringPtrOutput)
}

func (o PolicyPasswordOutput) SymbolCharset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.StringPtrOutput { return v.SymbolCharset }).(pulumi.StringPtrOutput)
}

func (o PolicyPasswordOutput) ZxcvbnScoreThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyPassword) pulumi.IntPtrOutput { return v.ZxcvbnScoreThreshold }).(pulumi.IntPtrOutput)
}

type PolicyPasswordArrayOutput struct{ *pulumi.OutputState }

func (PolicyPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyPassword)(nil)).Elem()
}

func (o PolicyPasswordArrayOutput) ToPolicyPasswordArrayOutput() PolicyPasswordArrayOutput {
	return o
}

func (o PolicyPasswordArrayOutput) ToPolicyPasswordArrayOutputWithContext(ctx context.Context) PolicyPasswordArrayOutput {
	return o
}

func (o PolicyPasswordArrayOutput) Index(i pulumi.IntInput) PolicyPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyPassword {
		return vs[0].([]*PolicyPassword)[vs[1].(int)]
	}).(PolicyPasswordOutput)
}

type PolicyPasswordMapOutput struct{ *pulumi.OutputState }

func (PolicyPasswordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyPassword)(nil)).Elem()
}

func (o PolicyPasswordMapOutput) ToPolicyPasswordMapOutput() PolicyPasswordMapOutput {
	return o
}

func (o PolicyPasswordMapOutput) ToPolicyPasswordMapOutputWithContext(ctx context.Context) PolicyPasswordMapOutput {
	return o
}

func (o PolicyPasswordMapOutput) MapIndex(k pulumi.StringInput) PolicyPasswordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyPassword {
		return vs[0].(map[string]*PolicyPassword)[vs[1].(string)]
	}).(PolicyPasswordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyPasswordInput)(nil)).Elem(), &PolicyPassword{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyPasswordArrayInput)(nil)).Elem(), PolicyPasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyPasswordMapInput)(nil)).Elem(), PolicyPasswordMap{})
	pulumi.RegisterOutputType(PolicyPasswordOutput{})
	pulumi.RegisterOutputType(PolicyPasswordArrayOutput{})
	pulumi.RegisterOutputType(PolicyPasswordMapOutput{})
}
