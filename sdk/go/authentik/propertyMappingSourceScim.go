// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage SCIM Source Property mappings
type PropertyMappingSourceScim struct {
	pulumi.CustomResourceState

	Expression pulumi.StringOutput `pulumi:"expression"`
	Name       pulumi.StringOutput `pulumi:"name"`
}

// NewPropertyMappingSourceScim registers a new resource with the given unique name, arguments, and options.
func NewPropertyMappingSourceScim(ctx *pulumi.Context,
	name string, args *PropertyMappingSourceScimArgs, opts ...pulumi.ResourceOption) (*PropertyMappingSourceScim, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PropertyMappingSourceScim
	err := ctx.RegisterResource("authentik:index/propertyMappingSourceScim:PropertyMappingSourceScim", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyMappingSourceScim gets an existing PropertyMappingSourceScim resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyMappingSourceScim(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyMappingSourceScimState, opts ...pulumi.ResourceOption) (*PropertyMappingSourceScim, error) {
	var resource PropertyMappingSourceScim
	err := ctx.ReadResource("authentik:index/propertyMappingSourceScim:PropertyMappingSourceScim", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyMappingSourceScim resources.
type propertyMappingSourceScimState struct {
	Expression *string `pulumi:"expression"`
	Name       *string `pulumi:"name"`
}

type PropertyMappingSourceScimState struct {
	Expression pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
}

func (PropertyMappingSourceScimState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingSourceScimState)(nil)).Elem()
}

type propertyMappingSourceScimArgs struct {
	Expression string  `pulumi:"expression"`
	Name       *string `pulumi:"name"`
}

// The set of arguments for constructing a PropertyMappingSourceScim resource.
type PropertyMappingSourceScimArgs struct {
	Expression pulumi.StringInput
	Name       pulumi.StringPtrInput
}

func (PropertyMappingSourceScimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyMappingSourceScimArgs)(nil)).Elem()
}

type PropertyMappingSourceScimInput interface {
	pulumi.Input

	ToPropertyMappingSourceScimOutput() PropertyMappingSourceScimOutput
	ToPropertyMappingSourceScimOutputWithContext(ctx context.Context) PropertyMappingSourceScimOutput
}

func (*PropertyMappingSourceScim) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingSourceScim)(nil)).Elem()
}

func (i *PropertyMappingSourceScim) ToPropertyMappingSourceScimOutput() PropertyMappingSourceScimOutput {
	return i.ToPropertyMappingSourceScimOutputWithContext(context.Background())
}

func (i *PropertyMappingSourceScim) ToPropertyMappingSourceScimOutputWithContext(ctx context.Context) PropertyMappingSourceScimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSourceScimOutput)
}

// PropertyMappingSourceScimArrayInput is an input type that accepts PropertyMappingSourceScimArray and PropertyMappingSourceScimArrayOutput values.
// You can construct a concrete instance of `PropertyMappingSourceScimArrayInput` via:
//
//	PropertyMappingSourceScimArray{ PropertyMappingSourceScimArgs{...} }
type PropertyMappingSourceScimArrayInput interface {
	pulumi.Input

	ToPropertyMappingSourceScimArrayOutput() PropertyMappingSourceScimArrayOutput
	ToPropertyMappingSourceScimArrayOutputWithContext(context.Context) PropertyMappingSourceScimArrayOutput
}

type PropertyMappingSourceScimArray []PropertyMappingSourceScimInput

func (PropertyMappingSourceScimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingSourceScim)(nil)).Elem()
}

func (i PropertyMappingSourceScimArray) ToPropertyMappingSourceScimArrayOutput() PropertyMappingSourceScimArrayOutput {
	return i.ToPropertyMappingSourceScimArrayOutputWithContext(context.Background())
}

func (i PropertyMappingSourceScimArray) ToPropertyMappingSourceScimArrayOutputWithContext(ctx context.Context) PropertyMappingSourceScimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSourceScimArrayOutput)
}

// PropertyMappingSourceScimMapInput is an input type that accepts PropertyMappingSourceScimMap and PropertyMappingSourceScimMapOutput values.
// You can construct a concrete instance of `PropertyMappingSourceScimMapInput` via:
//
//	PropertyMappingSourceScimMap{ "key": PropertyMappingSourceScimArgs{...} }
type PropertyMappingSourceScimMapInput interface {
	pulumi.Input

	ToPropertyMappingSourceScimMapOutput() PropertyMappingSourceScimMapOutput
	ToPropertyMappingSourceScimMapOutputWithContext(context.Context) PropertyMappingSourceScimMapOutput
}

type PropertyMappingSourceScimMap map[string]PropertyMappingSourceScimInput

func (PropertyMappingSourceScimMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingSourceScim)(nil)).Elem()
}

func (i PropertyMappingSourceScimMap) ToPropertyMappingSourceScimMapOutput() PropertyMappingSourceScimMapOutput {
	return i.ToPropertyMappingSourceScimMapOutputWithContext(context.Background())
}

func (i PropertyMappingSourceScimMap) ToPropertyMappingSourceScimMapOutputWithContext(ctx context.Context) PropertyMappingSourceScimMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMappingSourceScimMapOutput)
}

type PropertyMappingSourceScimOutput struct{ *pulumi.OutputState }

func (PropertyMappingSourceScimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyMappingSourceScim)(nil)).Elem()
}

func (o PropertyMappingSourceScimOutput) ToPropertyMappingSourceScimOutput() PropertyMappingSourceScimOutput {
	return o
}

func (o PropertyMappingSourceScimOutput) ToPropertyMappingSourceScimOutputWithContext(ctx context.Context) PropertyMappingSourceScimOutput {
	return o
}

func (o PropertyMappingSourceScimOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingSourceScim) pulumi.StringOutput { return v.Expression }).(pulumi.StringOutput)
}

func (o PropertyMappingSourceScimOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyMappingSourceScim) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type PropertyMappingSourceScimArrayOutput struct{ *pulumi.OutputState }

func (PropertyMappingSourceScimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyMappingSourceScim)(nil)).Elem()
}

func (o PropertyMappingSourceScimArrayOutput) ToPropertyMappingSourceScimArrayOutput() PropertyMappingSourceScimArrayOutput {
	return o
}

func (o PropertyMappingSourceScimArrayOutput) ToPropertyMappingSourceScimArrayOutputWithContext(ctx context.Context) PropertyMappingSourceScimArrayOutput {
	return o
}

func (o PropertyMappingSourceScimArrayOutput) Index(i pulumi.IntInput) PropertyMappingSourceScimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyMappingSourceScim {
		return vs[0].([]*PropertyMappingSourceScim)[vs[1].(int)]
	}).(PropertyMappingSourceScimOutput)
}

type PropertyMappingSourceScimMapOutput struct{ *pulumi.OutputState }

func (PropertyMappingSourceScimMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyMappingSourceScim)(nil)).Elem()
}

func (o PropertyMappingSourceScimMapOutput) ToPropertyMappingSourceScimMapOutput() PropertyMappingSourceScimMapOutput {
	return o
}

func (o PropertyMappingSourceScimMapOutput) ToPropertyMappingSourceScimMapOutputWithContext(ctx context.Context) PropertyMappingSourceScimMapOutput {
	return o
}

func (o PropertyMappingSourceScimMapOutput) MapIndex(k pulumi.StringInput) PropertyMappingSourceScimOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyMappingSourceScim {
		return vs[0].(map[string]*PropertyMappingSourceScim)[vs[1].(string)]
	}).(PropertyMappingSourceScimOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSourceScimInput)(nil)).Elem(), &PropertyMappingSourceScim{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSourceScimArrayInput)(nil)).Elem(), PropertyMappingSourceScimArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMappingSourceScimMapInput)(nil)).Elem(), PropertyMappingSourceScimMap{})
	pulumi.RegisterOutputType(PropertyMappingSourceScimOutput{})
	pulumi.RegisterOutputType(PropertyMappingSourceScimArrayOutput{})
	pulumi.RegisterOutputType(PropertyMappingSourceScimMapOutput{})
}
