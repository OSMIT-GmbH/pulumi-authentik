// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik"
//	"github.com/pulumi/pulumi-tls/sdk/v4/go/tls"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			examplePrivateKey, err := tls.NewPrivateKey(ctx, "examplePrivateKey", &tls.PrivateKeyArgs{
//				Algorithm:  pulumi.String("ECDSA"),
//				EcdsaCurve: pulumi.String("P384"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSelfSignedCert, err := tls.NewSelfSignedCert(ctx, "exampleSelfSignedCert", &tls.SelfSignedCertArgs{
//				KeyAlgorithm:  pulumi.String("ECDSA"),
//				PrivateKeyPem: examplePrivateKey.PrivateKeyPem,
//				Subject: &tls.SelfSignedCertSubjectArgs{
//					CommonName:   pulumi.String("example.com"),
//					Organization: pulumi.String("ACME Examples, Inc"),
//				},
//				ValidityPeriodHours: pulumi.Int(12),
//				AllowedUses: pulumi.StringArray{
//					pulumi.String("key_encipherment"),
//					pulumi.String("digital_signature"),
//					pulumi.String("server_auth"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authentik.NewCertificateKeyPair(ctx, "name", &authentik.CertificateKeyPairArgs{
//				CertificateData: exampleSelfSignedCert.CertPem,
//				KeyData:         examplePrivateKey.PrivateKeyPem,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CertificateKeyPair struct {
	pulumi.CustomResourceState

	CertificateData pulumi.StringOutput    `pulumi:"certificateData"`
	KeyData         pulumi.StringPtrOutput `pulumi:"keyData"`
	Name            pulumi.StringOutput    `pulumi:"name"`
}

// NewCertificateKeyPair registers a new resource with the given unique name, arguments, and options.
func NewCertificateKeyPair(ctx *pulumi.Context,
	name string, args *CertificateKeyPairArgs, opts ...pulumi.ResourceOption) (*CertificateKeyPair, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateData == nil {
		return nil, errors.New("invalid value for required argument 'CertificateData'")
	}
	if args.KeyData != nil {
		args.KeyData = pulumi.ToSecret(args.KeyData).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"keyData",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateKeyPair
	err := ctx.RegisterResource("authentik:index/certificateKeyPair:CertificateKeyPair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateKeyPair gets an existing CertificateKeyPair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateKeyPair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateKeyPairState, opts ...pulumi.ResourceOption) (*CertificateKeyPair, error) {
	var resource CertificateKeyPair
	err := ctx.ReadResource("authentik:index/certificateKeyPair:CertificateKeyPair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateKeyPair resources.
type certificateKeyPairState struct {
	CertificateData *string `pulumi:"certificateData"`
	KeyData         *string `pulumi:"keyData"`
	Name            *string `pulumi:"name"`
}

type CertificateKeyPairState struct {
	CertificateData pulumi.StringPtrInput
	KeyData         pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
}

func (CertificateKeyPairState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateKeyPairState)(nil)).Elem()
}

type certificateKeyPairArgs struct {
	CertificateData string  `pulumi:"certificateData"`
	KeyData         *string `pulumi:"keyData"`
	Name            *string `pulumi:"name"`
}

// The set of arguments for constructing a CertificateKeyPair resource.
type CertificateKeyPairArgs struct {
	CertificateData pulumi.StringInput
	KeyData         pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
}

func (CertificateKeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateKeyPairArgs)(nil)).Elem()
}

type CertificateKeyPairInput interface {
	pulumi.Input

	ToCertificateKeyPairOutput() CertificateKeyPairOutput
	ToCertificateKeyPairOutputWithContext(ctx context.Context) CertificateKeyPairOutput
}

func (*CertificateKeyPair) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateKeyPair)(nil)).Elem()
}

func (i *CertificateKeyPair) ToCertificateKeyPairOutput() CertificateKeyPairOutput {
	return i.ToCertificateKeyPairOutputWithContext(context.Background())
}

func (i *CertificateKeyPair) ToCertificateKeyPairOutputWithContext(ctx context.Context) CertificateKeyPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateKeyPairOutput)
}

func (i *CertificateKeyPair) ToOutput(ctx context.Context) pulumix.Output[*CertificateKeyPair] {
	return pulumix.Output[*CertificateKeyPair]{
		OutputState: i.ToCertificateKeyPairOutputWithContext(ctx).OutputState,
	}
}

// CertificateKeyPairArrayInput is an input type that accepts CertificateKeyPairArray and CertificateKeyPairArrayOutput values.
// You can construct a concrete instance of `CertificateKeyPairArrayInput` via:
//
//	CertificateKeyPairArray{ CertificateKeyPairArgs{...} }
type CertificateKeyPairArrayInput interface {
	pulumi.Input

	ToCertificateKeyPairArrayOutput() CertificateKeyPairArrayOutput
	ToCertificateKeyPairArrayOutputWithContext(context.Context) CertificateKeyPairArrayOutput
}

type CertificateKeyPairArray []CertificateKeyPairInput

func (CertificateKeyPairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateKeyPair)(nil)).Elem()
}

func (i CertificateKeyPairArray) ToCertificateKeyPairArrayOutput() CertificateKeyPairArrayOutput {
	return i.ToCertificateKeyPairArrayOutputWithContext(context.Background())
}

func (i CertificateKeyPairArray) ToCertificateKeyPairArrayOutputWithContext(ctx context.Context) CertificateKeyPairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateKeyPairArrayOutput)
}

func (i CertificateKeyPairArray) ToOutput(ctx context.Context) pulumix.Output[[]*CertificateKeyPair] {
	return pulumix.Output[[]*CertificateKeyPair]{
		OutputState: i.ToCertificateKeyPairArrayOutputWithContext(ctx).OutputState,
	}
}

// CertificateKeyPairMapInput is an input type that accepts CertificateKeyPairMap and CertificateKeyPairMapOutput values.
// You can construct a concrete instance of `CertificateKeyPairMapInput` via:
//
//	CertificateKeyPairMap{ "key": CertificateKeyPairArgs{...} }
type CertificateKeyPairMapInput interface {
	pulumi.Input

	ToCertificateKeyPairMapOutput() CertificateKeyPairMapOutput
	ToCertificateKeyPairMapOutputWithContext(context.Context) CertificateKeyPairMapOutput
}

type CertificateKeyPairMap map[string]CertificateKeyPairInput

func (CertificateKeyPairMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateKeyPair)(nil)).Elem()
}

func (i CertificateKeyPairMap) ToCertificateKeyPairMapOutput() CertificateKeyPairMapOutput {
	return i.ToCertificateKeyPairMapOutputWithContext(context.Background())
}

func (i CertificateKeyPairMap) ToCertificateKeyPairMapOutputWithContext(ctx context.Context) CertificateKeyPairMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateKeyPairMapOutput)
}

func (i CertificateKeyPairMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CertificateKeyPair] {
	return pulumix.Output[map[string]*CertificateKeyPair]{
		OutputState: i.ToCertificateKeyPairMapOutputWithContext(ctx).OutputState,
	}
}

type CertificateKeyPairOutput struct{ *pulumi.OutputState }

func (CertificateKeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateKeyPair)(nil)).Elem()
}

func (o CertificateKeyPairOutput) ToCertificateKeyPairOutput() CertificateKeyPairOutput {
	return o
}

func (o CertificateKeyPairOutput) ToCertificateKeyPairOutputWithContext(ctx context.Context) CertificateKeyPairOutput {
	return o
}

func (o CertificateKeyPairOutput) ToOutput(ctx context.Context) pulumix.Output[*CertificateKeyPair] {
	return pulumix.Output[*CertificateKeyPair]{
		OutputState: o.OutputState,
	}
}

func (o CertificateKeyPairOutput) CertificateData() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateKeyPair) pulumi.StringOutput { return v.CertificateData }).(pulumi.StringOutput)
}

func (o CertificateKeyPairOutput) KeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateKeyPair) pulumi.StringPtrOutput { return v.KeyData }).(pulumi.StringPtrOutput)
}

func (o CertificateKeyPairOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateKeyPair) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type CertificateKeyPairArrayOutput struct{ *pulumi.OutputState }

func (CertificateKeyPairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateKeyPair)(nil)).Elem()
}

func (o CertificateKeyPairArrayOutput) ToCertificateKeyPairArrayOutput() CertificateKeyPairArrayOutput {
	return o
}

func (o CertificateKeyPairArrayOutput) ToCertificateKeyPairArrayOutputWithContext(ctx context.Context) CertificateKeyPairArrayOutput {
	return o
}

func (o CertificateKeyPairArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CertificateKeyPair] {
	return pulumix.Output[[]*CertificateKeyPair]{
		OutputState: o.OutputState,
	}
}

func (o CertificateKeyPairArrayOutput) Index(i pulumi.IntInput) CertificateKeyPairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateKeyPair {
		return vs[0].([]*CertificateKeyPair)[vs[1].(int)]
	}).(CertificateKeyPairOutput)
}

type CertificateKeyPairMapOutput struct{ *pulumi.OutputState }

func (CertificateKeyPairMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateKeyPair)(nil)).Elem()
}

func (o CertificateKeyPairMapOutput) ToCertificateKeyPairMapOutput() CertificateKeyPairMapOutput {
	return o
}

func (o CertificateKeyPairMapOutput) ToCertificateKeyPairMapOutputWithContext(ctx context.Context) CertificateKeyPairMapOutput {
	return o
}

func (o CertificateKeyPairMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CertificateKeyPair] {
	return pulumix.Output[map[string]*CertificateKeyPair]{
		OutputState: o.OutputState,
	}
}

func (o CertificateKeyPairMapOutput) MapIndex(k pulumi.StringInput) CertificateKeyPairOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateKeyPair {
		return vs[0].(map[string]*CertificateKeyPair)[vs[1].(string)]
	}).(CertificateKeyPairOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateKeyPairInput)(nil)).Elem(), &CertificateKeyPair{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateKeyPairArrayInput)(nil)).Elem(), CertificateKeyPairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateKeyPairMapInput)(nil)).Elem(), CertificateKeyPairMap{})
	pulumi.RegisterOutputType(CertificateKeyPairOutput{})
	pulumi.RegisterOutputType(CertificateKeyPairArrayOutput{})
	pulumi.RegisterOutputType(CertificateKeyPairMapOutput{})
}
