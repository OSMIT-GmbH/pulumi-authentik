// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/v2024/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a dummy policy for testing
//			_, err := authentik.NewPolicyDummy(ctx, "name", &authentik.PolicyDummyArgs{
//				Name: pulumi.String("dummy"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PolicyDummy struct {
	pulumi.CustomResourceState

	// Defaults to `false`.
	ExecutionLogging pulumi.BoolPtrOutput `pulumi:"executionLogging"`
	Name             pulumi.StringOutput  `pulumi:"name"`
	// Defaults to `false`.
	Result pulumi.BoolPtrOutput `pulumi:"result"`
	// Defaults to `30`.
	WaitMax pulumi.IntPtrOutput `pulumi:"waitMax"`
	// Defaults to `5`.
	WaitMin pulumi.IntPtrOutput `pulumi:"waitMin"`
}

// NewPolicyDummy registers a new resource with the given unique name, arguments, and options.
func NewPolicyDummy(ctx *pulumi.Context,
	name string, args *PolicyDummyArgs, opts ...pulumi.ResourceOption) (*PolicyDummy, error) {
	if args == nil {
		args = &PolicyDummyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyDummy
	err := ctx.RegisterResource("authentik:index/policyDummy:PolicyDummy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyDummy gets an existing PolicyDummy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyDummy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyDummyState, opts ...pulumi.ResourceOption) (*PolicyDummy, error) {
	var resource PolicyDummy
	err := ctx.ReadResource("authentik:index/policyDummy:PolicyDummy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyDummy resources.
type policyDummyState struct {
	// Defaults to `false`.
	ExecutionLogging *bool   `pulumi:"executionLogging"`
	Name             *string `pulumi:"name"`
	// Defaults to `false`.
	Result *bool `pulumi:"result"`
	// Defaults to `30`.
	WaitMax *int `pulumi:"waitMax"`
	// Defaults to `5`.
	WaitMin *int `pulumi:"waitMin"`
}

type PolicyDummyState struct {
	// Defaults to `false`.
	ExecutionLogging pulumi.BoolPtrInput
	Name             pulumi.StringPtrInput
	// Defaults to `false`.
	Result pulumi.BoolPtrInput
	// Defaults to `30`.
	WaitMax pulumi.IntPtrInput
	// Defaults to `5`.
	WaitMin pulumi.IntPtrInput
}

func (PolicyDummyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyDummyState)(nil)).Elem()
}

type policyDummyArgs struct {
	// Defaults to `false`.
	ExecutionLogging *bool   `pulumi:"executionLogging"`
	Name             *string `pulumi:"name"`
	// Defaults to `false`.
	Result *bool `pulumi:"result"`
	// Defaults to `30`.
	WaitMax *int `pulumi:"waitMax"`
	// Defaults to `5`.
	WaitMin *int `pulumi:"waitMin"`
}

// The set of arguments for constructing a PolicyDummy resource.
type PolicyDummyArgs struct {
	// Defaults to `false`.
	ExecutionLogging pulumi.BoolPtrInput
	Name             pulumi.StringPtrInput
	// Defaults to `false`.
	Result pulumi.BoolPtrInput
	// Defaults to `30`.
	WaitMax pulumi.IntPtrInput
	// Defaults to `5`.
	WaitMin pulumi.IntPtrInput
}

func (PolicyDummyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyDummyArgs)(nil)).Elem()
}

type PolicyDummyInput interface {
	pulumi.Input

	ToPolicyDummyOutput() PolicyDummyOutput
	ToPolicyDummyOutputWithContext(ctx context.Context) PolicyDummyOutput
}

func (*PolicyDummy) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDummy)(nil)).Elem()
}

func (i *PolicyDummy) ToPolicyDummyOutput() PolicyDummyOutput {
	return i.ToPolicyDummyOutputWithContext(context.Background())
}

func (i *PolicyDummy) ToPolicyDummyOutputWithContext(ctx context.Context) PolicyDummyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDummyOutput)
}

// PolicyDummyArrayInput is an input type that accepts PolicyDummyArray and PolicyDummyArrayOutput values.
// You can construct a concrete instance of `PolicyDummyArrayInput` via:
//
//	PolicyDummyArray{ PolicyDummyArgs{...} }
type PolicyDummyArrayInput interface {
	pulumi.Input

	ToPolicyDummyArrayOutput() PolicyDummyArrayOutput
	ToPolicyDummyArrayOutputWithContext(context.Context) PolicyDummyArrayOutput
}

type PolicyDummyArray []PolicyDummyInput

func (PolicyDummyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyDummy)(nil)).Elem()
}

func (i PolicyDummyArray) ToPolicyDummyArrayOutput() PolicyDummyArrayOutput {
	return i.ToPolicyDummyArrayOutputWithContext(context.Background())
}

func (i PolicyDummyArray) ToPolicyDummyArrayOutputWithContext(ctx context.Context) PolicyDummyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDummyArrayOutput)
}

// PolicyDummyMapInput is an input type that accepts PolicyDummyMap and PolicyDummyMapOutput values.
// You can construct a concrete instance of `PolicyDummyMapInput` via:
//
//	PolicyDummyMap{ "key": PolicyDummyArgs{...} }
type PolicyDummyMapInput interface {
	pulumi.Input

	ToPolicyDummyMapOutput() PolicyDummyMapOutput
	ToPolicyDummyMapOutputWithContext(context.Context) PolicyDummyMapOutput
}

type PolicyDummyMap map[string]PolicyDummyInput

func (PolicyDummyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyDummy)(nil)).Elem()
}

func (i PolicyDummyMap) ToPolicyDummyMapOutput() PolicyDummyMapOutput {
	return i.ToPolicyDummyMapOutputWithContext(context.Background())
}

func (i PolicyDummyMap) ToPolicyDummyMapOutputWithContext(ctx context.Context) PolicyDummyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDummyMapOutput)
}

type PolicyDummyOutput struct{ *pulumi.OutputState }

func (PolicyDummyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDummy)(nil)).Elem()
}

func (o PolicyDummyOutput) ToPolicyDummyOutput() PolicyDummyOutput {
	return o
}

func (o PolicyDummyOutput) ToPolicyDummyOutputWithContext(ctx context.Context) PolicyDummyOutput {
	return o
}

// Defaults to `false`.
func (o PolicyDummyOutput) ExecutionLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyDummy) pulumi.BoolPtrOutput { return v.ExecutionLogging }).(pulumi.BoolPtrOutput)
}

func (o PolicyDummyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyDummy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Defaults to `false`.
func (o PolicyDummyOutput) Result() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyDummy) pulumi.BoolPtrOutput { return v.Result }).(pulumi.BoolPtrOutput)
}

// Defaults to `30`.
func (o PolicyDummyOutput) WaitMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyDummy) pulumi.IntPtrOutput { return v.WaitMax }).(pulumi.IntPtrOutput)
}

// Defaults to `5`.
func (o PolicyDummyOutput) WaitMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyDummy) pulumi.IntPtrOutput { return v.WaitMin }).(pulumi.IntPtrOutput)
}

type PolicyDummyArrayOutput struct{ *pulumi.OutputState }

func (PolicyDummyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyDummy)(nil)).Elem()
}

func (o PolicyDummyArrayOutput) ToPolicyDummyArrayOutput() PolicyDummyArrayOutput {
	return o
}

func (o PolicyDummyArrayOutput) ToPolicyDummyArrayOutputWithContext(ctx context.Context) PolicyDummyArrayOutput {
	return o
}

func (o PolicyDummyArrayOutput) Index(i pulumi.IntInput) PolicyDummyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyDummy {
		return vs[0].([]*PolicyDummy)[vs[1].(int)]
	}).(PolicyDummyOutput)
}

type PolicyDummyMapOutput struct{ *pulumi.OutputState }

func (PolicyDummyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyDummy)(nil)).Elem()
}

func (o PolicyDummyMapOutput) ToPolicyDummyMapOutput() PolicyDummyMapOutput {
	return o
}

func (o PolicyDummyMapOutput) ToPolicyDummyMapOutputWithContext(ctx context.Context) PolicyDummyMapOutput {
	return o
}

func (o PolicyDummyMapOutput) MapIndex(k pulumi.StringInput) PolicyDummyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyDummy {
		return vs[0].(map[string]*PolicyDummy)[vs[1].(string)]
	}).(PolicyDummyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyDummyInput)(nil)).Elem(), &PolicyDummy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyDummyArrayInput)(nil)).Elem(), PolicyDummyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyDummyMapInput)(nil)).Elem(), PolicyDummyMap{})
	pulumi.RegisterOutputType(PolicyDummyOutput{})
	pulumi.RegisterOutputType(PolicyDummyArrayOutput{})
	pulumi.RegisterOutputType(PolicyDummyMapOutput{})
}
