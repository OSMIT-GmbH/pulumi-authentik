// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			default_authorization_flow, err := authentik.LookupFlow(ctx, &authentik.LookupFlowArgs{
//				Slug: pulumi.StringRef("default-provider-authorization-implicit-consent"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = authentik.NewSourceOauth(ctx, "name", &authentik.SourceOauthArgs{
//				Slug:               pulumi.String("discord"),
//				AuthenticationFlow: *pulumi.String(default_authorization_flow.Id),
//				EnrollmentFlow:     *pulumi.String(default_authorization_flow.Id),
//				ProviderType:       pulumi.String("discord"),
//				ConsumerKey:        pulumi.String("foo"),
//				ConsumerSecret:     pulumi.String("bar"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SourceOauth struct {
	pulumi.CustomResourceState

	// Only required for OAuth1.
	AccessTokenUrl     pulumi.StringPtrOutput `pulumi:"accessTokenUrl"`
	AdditionalScopes   pulumi.StringPtrOutput `pulumi:"additionalScopes"`
	AuthenticationFlow pulumi.StringOutput    `pulumi:"authenticationFlow"`
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	AuthorizationUrl pulumi.StringPtrOutput `pulumi:"authorizationUrl"`
	// Generated.
	CallbackUri    pulumi.StringOutput `pulumi:"callbackUri"`
	ConsumerKey    pulumi.StringOutput `pulumi:"consumerKey"`
	ConsumerSecret pulumi.StringOutput `pulumi:"consumerSecret"`
	// Defaults to `true`.
	Enabled        pulumi.BoolPtrOutput `pulumi:"enabled"`
	EnrollmentFlow pulumi.StringOutput  `pulumi:"enrollmentFlow"`
	Name           pulumi.StringOutput  `pulumi:"name"`
	// Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to pass objects. Generated.
	OidcJwks pulumi.StringOutput `pulumi:"oidcJwks"`
	// Automatically configure JWKS if not specified by `oidcWellKnownUrl`.
	OidcJwksUrl pulumi.StringPtrOutput `pulumi:"oidcJwksUrl"`
	// Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with `.well-known/openid-configuration`.
	OidcWellKnownUrl pulumi.StringPtrOutput `pulumi:"oidcWellKnownUrl"`
	// Defaults to `any`.
	PolicyEngineMode pulumi.StringPtrOutput `pulumi:"policyEngineMode"`
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	ProfileUrl   pulumi.StringPtrOutput `pulumi:"profileUrl"`
	ProviderType pulumi.StringOutput    `pulumi:"providerType"`
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	RequestTokenUrl pulumi.StringPtrOutput `pulumi:"requestTokenUrl"`
	Slug            pulumi.StringOutput    `pulumi:"slug"`
	// Defaults to `identifier`.
	UserMatchingMode pulumi.StringPtrOutput `pulumi:"userMatchingMode"`
	// Defaults to `goauthentik.io/sources/%(slug)s`.
	UserPathTemplate pulumi.StringPtrOutput `pulumi:"userPathTemplate"`
	// Generated.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewSourceOauth registers a new resource with the given unique name, arguments, and options.
func NewSourceOauth(ctx *pulumi.Context,
	name string, args *SourceOauthArgs, opts ...pulumi.ResourceOption) (*SourceOauth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationFlow == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationFlow'")
	}
	if args.ConsumerKey == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerKey'")
	}
	if args.ConsumerSecret == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerSecret'")
	}
	if args.EnrollmentFlow == nil {
		return nil, errors.New("invalid value for required argument 'EnrollmentFlow'")
	}
	if args.ProviderType == nil {
		return nil, errors.New("invalid value for required argument 'ProviderType'")
	}
	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	if args.ConsumerSecret != nil {
		args.ConsumerSecret = pulumi.ToSecret(args.ConsumerSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"consumerSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceOauth
	err := ctx.RegisterResource("authentik:index/sourceOauth:SourceOauth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceOauth gets an existing SourceOauth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceOauth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceOauthState, opts ...pulumi.ResourceOption) (*SourceOauth, error) {
	var resource SourceOauth
	err := ctx.ReadResource("authentik:index/sourceOauth:SourceOauth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceOauth resources.
type sourceOauthState struct {
	// Only required for OAuth1.
	AccessTokenUrl     *string `pulumi:"accessTokenUrl"`
	AdditionalScopes   *string `pulumi:"additionalScopes"`
	AuthenticationFlow *string `pulumi:"authenticationFlow"`
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	AuthorizationUrl *string `pulumi:"authorizationUrl"`
	// Generated.
	CallbackUri    *string `pulumi:"callbackUri"`
	ConsumerKey    *string `pulumi:"consumerKey"`
	ConsumerSecret *string `pulumi:"consumerSecret"`
	// Defaults to `true`.
	Enabled        *bool   `pulumi:"enabled"`
	EnrollmentFlow *string `pulumi:"enrollmentFlow"`
	Name           *string `pulumi:"name"`
	// Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to pass objects. Generated.
	OidcJwks *string `pulumi:"oidcJwks"`
	// Automatically configure JWKS if not specified by `oidcWellKnownUrl`.
	OidcJwksUrl *string `pulumi:"oidcJwksUrl"`
	// Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with `.well-known/openid-configuration`.
	OidcWellKnownUrl *string `pulumi:"oidcWellKnownUrl"`
	// Defaults to `any`.
	PolicyEngineMode *string `pulumi:"policyEngineMode"`
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	ProfileUrl   *string `pulumi:"profileUrl"`
	ProviderType *string `pulumi:"providerType"`
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	RequestTokenUrl *string `pulumi:"requestTokenUrl"`
	Slug            *string `pulumi:"slug"`
	// Defaults to `identifier`.
	UserMatchingMode *string `pulumi:"userMatchingMode"`
	// Defaults to `goauthentik.io/sources/%(slug)s`.
	UserPathTemplate *string `pulumi:"userPathTemplate"`
	// Generated.
	Uuid *string `pulumi:"uuid"`
}

type SourceOauthState struct {
	// Only required for OAuth1.
	AccessTokenUrl     pulumi.StringPtrInput
	AdditionalScopes   pulumi.StringPtrInput
	AuthenticationFlow pulumi.StringPtrInput
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	AuthorizationUrl pulumi.StringPtrInput
	// Generated.
	CallbackUri    pulumi.StringPtrInput
	ConsumerKey    pulumi.StringPtrInput
	ConsumerSecret pulumi.StringPtrInput
	// Defaults to `true`.
	Enabled        pulumi.BoolPtrInput
	EnrollmentFlow pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	// Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to pass objects. Generated.
	OidcJwks pulumi.StringPtrInput
	// Automatically configure JWKS if not specified by `oidcWellKnownUrl`.
	OidcJwksUrl pulumi.StringPtrInput
	// Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with `.well-known/openid-configuration`.
	OidcWellKnownUrl pulumi.StringPtrInput
	// Defaults to `any`.
	PolicyEngineMode pulumi.StringPtrInput
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	ProfileUrl   pulumi.StringPtrInput
	ProviderType pulumi.StringPtrInput
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	RequestTokenUrl pulumi.StringPtrInput
	Slug            pulumi.StringPtrInput
	// Defaults to `identifier`.
	UserMatchingMode pulumi.StringPtrInput
	// Defaults to `goauthentik.io/sources/%(slug)s`.
	UserPathTemplate pulumi.StringPtrInput
	// Generated.
	Uuid pulumi.StringPtrInput
}

func (SourceOauthState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceOauthState)(nil)).Elem()
}

type sourceOauthArgs struct {
	// Only required for OAuth1.
	AccessTokenUrl     *string `pulumi:"accessTokenUrl"`
	AdditionalScopes   *string `pulumi:"additionalScopes"`
	AuthenticationFlow string  `pulumi:"authenticationFlow"`
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	AuthorizationUrl *string `pulumi:"authorizationUrl"`
	ConsumerKey      string  `pulumi:"consumerKey"`
	ConsumerSecret   string  `pulumi:"consumerSecret"`
	// Defaults to `true`.
	Enabled        *bool   `pulumi:"enabled"`
	EnrollmentFlow string  `pulumi:"enrollmentFlow"`
	Name           *string `pulumi:"name"`
	// Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to pass objects. Generated.
	OidcJwks *string `pulumi:"oidcJwks"`
	// Automatically configure JWKS if not specified by `oidcWellKnownUrl`.
	OidcJwksUrl *string `pulumi:"oidcJwksUrl"`
	// Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with `.well-known/openid-configuration`.
	OidcWellKnownUrl *string `pulumi:"oidcWellKnownUrl"`
	// Defaults to `any`.
	PolicyEngineMode *string `pulumi:"policyEngineMode"`
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	ProfileUrl   *string `pulumi:"profileUrl"`
	ProviderType string  `pulumi:"providerType"`
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	RequestTokenUrl *string `pulumi:"requestTokenUrl"`
	Slug            string  `pulumi:"slug"`
	// Defaults to `identifier`.
	UserMatchingMode *string `pulumi:"userMatchingMode"`
	// Defaults to `goauthentik.io/sources/%(slug)s`.
	UserPathTemplate *string `pulumi:"userPathTemplate"`
	// Generated.
	Uuid *string `pulumi:"uuid"`
}

// The set of arguments for constructing a SourceOauth resource.
type SourceOauthArgs struct {
	// Only required for OAuth1.
	AccessTokenUrl     pulumi.StringPtrInput
	AdditionalScopes   pulumi.StringPtrInput
	AuthenticationFlow pulumi.StringInput
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	AuthorizationUrl pulumi.StringPtrInput
	ConsumerKey      pulumi.StringInput
	ConsumerSecret   pulumi.StringInput
	// Defaults to `true`.
	Enabled        pulumi.BoolPtrInput
	EnrollmentFlow pulumi.StringInput
	Name           pulumi.StringPtrInput
	// Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to pass objects. Generated.
	OidcJwks pulumi.StringPtrInput
	// Automatically configure JWKS if not specified by `oidcWellKnownUrl`.
	OidcJwksUrl pulumi.StringPtrInput
	// Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with `.well-known/openid-configuration`.
	OidcWellKnownUrl pulumi.StringPtrInput
	// Defaults to `any`.
	PolicyEngineMode pulumi.StringPtrInput
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	ProfileUrl   pulumi.StringPtrInput
	ProviderType pulumi.StringInput
	// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
	RequestTokenUrl pulumi.StringPtrInput
	Slug            pulumi.StringInput
	// Defaults to `identifier`.
	UserMatchingMode pulumi.StringPtrInput
	// Defaults to `goauthentik.io/sources/%(slug)s`.
	UserPathTemplate pulumi.StringPtrInput
	// Generated.
	Uuid pulumi.StringPtrInput
}

func (SourceOauthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceOauthArgs)(nil)).Elem()
}

type SourceOauthInput interface {
	pulumi.Input

	ToSourceOauthOutput() SourceOauthOutput
	ToSourceOauthOutputWithContext(ctx context.Context) SourceOauthOutput
}

func (*SourceOauth) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceOauth)(nil)).Elem()
}

func (i *SourceOauth) ToSourceOauthOutput() SourceOauthOutput {
	return i.ToSourceOauthOutputWithContext(context.Background())
}

func (i *SourceOauth) ToSourceOauthOutputWithContext(ctx context.Context) SourceOauthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOauthOutput)
}

func (i *SourceOauth) ToOutput(ctx context.Context) pulumix.Output[*SourceOauth] {
	return pulumix.Output[*SourceOauth]{
		OutputState: i.ToSourceOauthOutputWithContext(ctx).OutputState,
	}
}

// SourceOauthArrayInput is an input type that accepts SourceOauthArray and SourceOauthArrayOutput values.
// You can construct a concrete instance of `SourceOauthArrayInput` via:
//
//	SourceOauthArray{ SourceOauthArgs{...} }
type SourceOauthArrayInput interface {
	pulumi.Input

	ToSourceOauthArrayOutput() SourceOauthArrayOutput
	ToSourceOauthArrayOutputWithContext(context.Context) SourceOauthArrayOutput
}

type SourceOauthArray []SourceOauthInput

func (SourceOauthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceOauth)(nil)).Elem()
}

func (i SourceOauthArray) ToSourceOauthArrayOutput() SourceOauthArrayOutput {
	return i.ToSourceOauthArrayOutputWithContext(context.Background())
}

func (i SourceOauthArray) ToSourceOauthArrayOutputWithContext(ctx context.Context) SourceOauthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOauthArrayOutput)
}

func (i SourceOauthArray) ToOutput(ctx context.Context) pulumix.Output[[]*SourceOauth] {
	return pulumix.Output[[]*SourceOauth]{
		OutputState: i.ToSourceOauthArrayOutputWithContext(ctx).OutputState,
	}
}

// SourceOauthMapInput is an input type that accepts SourceOauthMap and SourceOauthMapOutput values.
// You can construct a concrete instance of `SourceOauthMapInput` via:
//
//	SourceOauthMap{ "key": SourceOauthArgs{...} }
type SourceOauthMapInput interface {
	pulumi.Input

	ToSourceOauthMapOutput() SourceOauthMapOutput
	ToSourceOauthMapOutputWithContext(context.Context) SourceOauthMapOutput
}

type SourceOauthMap map[string]SourceOauthInput

func (SourceOauthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceOauth)(nil)).Elem()
}

func (i SourceOauthMap) ToSourceOauthMapOutput() SourceOauthMapOutput {
	return i.ToSourceOauthMapOutputWithContext(context.Background())
}

func (i SourceOauthMap) ToSourceOauthMapOutputWithContext(ctx context.Context) SourceOauthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOauthMapOutput)
}

func (i SourceOauthMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SourceOauth] {
	return pulumix.Output[map[string]*SourceOauth]{
		OutputState: i.ToSourceOauthMapOutputWithContext(ctx).OutputState,
	}
}

type SourceOauthOutput struct{ *pulumi.OutputState }

func (SourceOauthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceOauth)(nil)).Elem()
}

func (o SourceOauthOutput) ToSourceOauthOutput() SourceOauthOutput {
	return o
}

func (o SourceOauthOutput) ToSourceOauthOutputWithContext(ctx context.Context) SourceOauthOutput {
	return o
}

func (o SourceOauthOutput) ToOutput(ctx context.Context) pulumix.Output[*SourceOauth] {
	return pulumix.Output[*SourceOauth]{
		OutputState: o.OutputState,
	}
}

// Only required for OAuth1.
func (o SourceOauthOutput) AccessTokenUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringPtrOutput { return v.AccessTokenUrl }).(pulumi.StringPtrOutput)
}

func (o SourceOauthOutput) AdditionalScopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringPtrOutput { return v.AdditionalScopes }).(pulumi.StringPtrOutput)
}

func (o SourceOauthOutput) AuthenticationFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringOutput { return v.AuthenticationFlow }).(pulumi.StringOutput)
}

// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
func (o SourceOauthOutput) AuthorizationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringPtrOutput { return v.AuthorizationUrl }).(pulumi.StringPtrOutput)
}

// Generated.
func (o SourceOauthOutput) CallbackUri() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringOutput { return v.CallbackUri }).(pulumi.StringOutput)
}

func (o SourceOauthOutput) ConsumerKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringOutput { return v.ConsumerKey }).(pulumi.StringOutput)
}

func (o SourceOauthOutput) ConsumerSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringOutput { return v.ConsumerSecret }).(pulumi.StringOutput)
}

// Defaults to `true`.
func (o SourceOauthOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o SourceOauthOutput) EnrollmentFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringOutput { return v.EnrollmentFlow }).(pulumi.StringOutput)
}

func (o SourceOauthOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to pass objects. Generated.
func (o SourceOauthOutput) OidcJwks() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringOutput { return v.OidcJwks }).(pulumi.StringOutput)
}

// Automatically configure JWKS if not specified by `oidcWellKnownUrl`.
func (o SourceOauthOutput) OidcJwksUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringPtrOutput { return v.OidcJwksUrl }).(pulumi.StringPtrOutput)
}

// Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with `.well-known/openid-configuration`.
func (o SourceOauthOutput) OidcWellKnownUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringPtrOutput { return v.OidcWellKnownUrl }).(pulumi.StringPtrOutput)
}

// Defaults to `any`.
func (o SourceOauthOutput) PolicyEngineMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringPtrOutput { return v.PolicyEngineMode }).(pulumi.StringPtrOutput)
}

// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
func (o SourceOauthOutput) ProfileUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringPtrOutput { return v.ProfileUrl }).(pulumi.StringPtrOutput)
}

func (o SourceOauthOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringOutput { return v.ProviderType }).(pulumi.StringOutput)
}

// Manually configure OAuth2 URLs when `oidcWellKnownUrl` is not set.
func (o SourceOauthOutput) RequestTokenUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringPtrOutput { return v.RequestTokenUrl }).(pulumi.StringPtrOutput)
}

func (o SourceOauthOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Defaults to `identifier`.
func (o SourceOauthOutput) UserMatchingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringPtrOutput { return v.UserMatchingMode }).(pulumi.StringPtrOutput)
}

// Defaults to `goauthentik.io/sources/%(slug)s`.
func (o SourceOauthOutput) UserPathTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringPtrOutput { return v.UserPathTemplate }).(pulumi.StringPtrOutput)
}

// Generated.
func (o SourceOauthOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceOauth) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type SourceOauthArrayOutput struct{ *pulumi.OutputState }

func (SourceOauthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceOauth)(nil)).Elem()
}

func (o SourceOauthArrayOutput) ToSourceOauthArrayOutput() SourceOauthArrayOutput {
	return o
}

func (o SourceOauthArrayOutput) ToSourceOauthArrayOutputWithContext(ctx context.Context) SourceOauthArrayOutput {
	return o
}

func (o SourceOauthArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SourceOauth] {
	return pulumix.Output[[]*SourceOauth]{
		OutputState: o.OutputState,
	}
}

func (o SourceOauthArrayOutput) Index(i pulumi.IntInput) SourceOauthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceOauth {
		return vs[0].([]*SourceOauth)[vs[1].(int)]
	}).(SourceOauthOutput)
}

type SourceOauthMapOutput struct{ *pulumi.OutputState }

func (SourceOauthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceOauth)(nil)).Elem()
}

func (o SourceOauthMapOutput) ToSourceOauthMapOutput() SourceOauthMapOutput {
	return o
}

func (o SourceOauthMapOutput) ToSourceOauthMapOutputWithContext(ctx context.Context) SourceOauthMapOutput {
	return o
}

func (o SourceOauthMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SourceOauth] {
	return pulumix.Output[map[string]*SourceOauth]{
		OutputState: o.OutputState,
	}
}

func (o SourceOauthMapOutput) MapIndex(k pulumi.StringInput) SourceOauthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceOauth {
		return vs[0].(map[string]*SourceOauth)[vs[1].(string)]
	}).(SourceOauthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceOauthInput)(nil)).Elem(), &SourceOauth{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceOauthArrayInput)(nil)).Elem(), SourceOauthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceOauthMapInput)(nil)).Elem(), SourceOauthMap{})
	pulumi.RegisterOutputType(SourceOauthOutput{})
	pulumi.RegisterOutputType(SourceOauthArrayOutput{})
	pulumi.RegisterOutputType(SourceOauthMapOutput{})
}
