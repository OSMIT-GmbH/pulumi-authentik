// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/v2024/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type RbacPermissionUser struct {
	pulumi.CustomResourceState

	// Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
	// `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
	// `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
	// - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
	//   `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
	//   `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
	//   `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
	// - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
	//   `authentik_providers_radius.radiusprovider` - `authentik_providers_radius.radiusproviderpropertymapping` -
	//   `authentik_providers_saml.samlprovider` - `authentik_providers_saml.samlpropertymapping` -
	//   `authentik_providers_scim.scimprovider` - `authentik_providers_scim.scimmapping` - `authentik_rbac.role` -
	//   `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
	//   `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
	//   `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
	//   `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
	//   `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
	//   `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
	//   `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
	//   `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
	//   `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
	//   `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
	//   `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
	//   `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
	//   `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
	// - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
	//   `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
	//   `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
	//   `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
	//   `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
	//   `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
	//   `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
	//   `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
	// - `authentik_stages_prompt.promptstage` - `authentik_stages_user_delete.userdeletestage` -
	//   `authentik_stages_user_login.userloginstage` - `authentik_stages_user_logout.userlogoutstage` -
	//   `authentik_stages_user_write.userwritestage` - `authentik_brands.brand` - `authentik_blueprints.blueprintinstance` -
	//   `authentik_core.group` - `authentik_core.user` - `authentik_core.application` - `authentik_core.token` -
	//   `authentik_enterprise.license` - `authentik_providers_google_workspace.googleworkspaceprovider` -
	//   `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
	//   `authentik_providers_microsoft_entra.microsoftentraprovider` -
	//   `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_rac.racprovider` -
	//   `authentik_providers_rac.endpoint` - `authentik_providers_rac.racpropertymapping` -
	//   `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_source.sourcestage` -
	//   `authentik_events.event` - `authentik_events.notificationtransport` - `authentik_events.notification` -
	//   `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
	Model      pulumi.StringPtrOutput `pulumi:"model"`
	ObjectId   pulumi.StringPtrOutput `pulumi:"objectId"`
	Permission pulumi.StringOutput    `pulumi:"permission"`
	User       pulumi.IntOutput       `pulumi:"user"`
}

// NewRbacPermissionUser registers a new resource with the given unique name, arguments, and options.
func NewRbacPermissionUser(ctx *pulumi.Context,
	name string, args *RbacPermissionUserArgs, opts ...pulumi.ResourceOption) (*RbacPermissionUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RbacPermissionUser
	err := ctx.RegisterResource("authentik:index/rbacPermissionUser:RbacPermissionUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRbacPermissionUser gets an existing RbacPermissionUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRbacPermissionUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RbacPermissionUserState, opts ...pulumi.ResourceOption) (*RbacPermissionUser, error) {
	var resource RbacPermissionUser
	err := ctx.ReadResource("authentik:index/rbacPermissionUser:RbacPermissionUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RbacPermissionUser resources.
type rbacPermissionUserState struct {
	// Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
	// `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
	// `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
	// - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
	//   `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
	//   `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
	//   `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
	// - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
	//   `authentik_providers_radius.radiusprovider` - `authentik_providers_radius.radiusproviderpropertymapping` -
	//   `authentik_providers_saml.samlprovider` - `authentik_providers_saml.samlpropertymapping` -
	//   `authentik_providers_scim.scimprovider` - `authentik_providers_scim.scimmapping` - `authentik_rbac.role` -
	//   `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
	//   `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
	//   `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
	//   `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
	//   `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
	//   `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
	//   `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
	//   `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
	//   `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
	//   `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
	//   `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
	//   `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
	//   `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
	// - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
	//   `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
	//   `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
	//   `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
	//   `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
	//   `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
	//   `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
	//   `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
	// - `authentik_stages_prompt.promptstage` - `authentik_stages_user_delete.userdeletestage` -
	//   `authentik_stages_user_login.userloginstage` - `authentik_stages_user_logout.userlogoutstage` -
	//   `authentik_stages_user_write.userwritestage` - `authentik_brands.brand` - `authentik_blueprints.blueprintinstance` -
	//   `authentik_core.group` - `authentik_core.user` - `authentik_core.application` - `authentik_core.token` -
	//   `authentik_enterprise.license` - `authentik_providers_google_workspace.googleworkspaceprovider` -
	//   `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
	//   `authentik_providers_microsoft_entra.microsoftentraprovider` -
	//   `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_rac.racprovider` -
	//   `authentik_providers_rac.endpoint` - `authentik_providers_rac.racpropertymapping` -
	//   `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_source.sourcestage` -
	//   `authentik_events.event` - `authentik_events.notificationtransport` - `authentik_events.notification` -
	//   `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
	Model      *string `pulumi:"model"`
	ObjectId   *string `pulumi:"objectId"`
	Permission *string `pulumi:"permission"`
	User       *int    `pulumi:"user"`
}

type RbacPermissionUserState struct {
	// Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
	// `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
	// `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
	// - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
	//   `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
	//   `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
	//   `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
	// - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
	//   `authentik_providers_radius.radiusprovider` - `authentik_providers_radius.radiusproviderpropertymapping` -
	//   `authentik_providers_saml.samlprovider` - `authentik_providers_saml.samlpropertymapping` -
	//   `authentik_providers_scim.scimprovider` - `authentik_providers_scim.scimmapping` - `authentik_rbac.role` -
	//   `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
	//   `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
	//   `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
	//   `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
	//   `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
	//   `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
	//   `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
	//   `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
	//   `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
	//   `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
	//   `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
	//   `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
	//   `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
	// - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
	//   `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
	//   `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
	//   `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
	//   `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
	//   `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
	//   `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
	//   `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
	// - `authentik_stages_prompt.promptstage` - `authentik_stages_user_delete.userdeletestage` -
	//   `authentik_stages_user_login.userloginstage` - `authentik_stages_user_logout.userlogoutstage` -
	//   `authentik_stages_user_write.userwritestage` - `authentik_brands.brand` - `authentik_blueprints.blueprintinstance` -
	//   `authentik_core.group` - `authentik_core.user` - `authentik_core.application` - `authentik_core.token` -
	//   `authentik_enterprise.license` - `authentik_providers_google_workspace.googleworkspaceprovider` -
	//   `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
	//   `authentik_providers_microsoft_entra.microsoftentraprovider` -
	//   `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_rac.racprovider` -
	//   `authentik_providers_rac.endpoint` - `authentik_providers_rac.racpropertymapping` -
	//   `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_source.sourcestage` -
	//   `authentik_events.event` - `authentik_events.notificationtransport` - `authentik_events.notification` -
	//   `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
	Model      pulumi.StringPtrInput
	ObjectId   pulumi.StringPtrInput
	Permission pulumi.StringPtrInput
	User       pulumi.IntPtrInput
}

func (RbacPermissionUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*rbacPermissionUserState)(nil)).Elem()
}

type rbacPermissionUserArgs struct {
	// Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
	// `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
	// `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
	// - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
	//   `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
	//   `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
	//   `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
	// - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
	//   `authentik_providers_radius.radiusprovider` - `authentik_providers_radius.radiusproviderpropertymapping` -
	//   `authentik_providers_saml.samlprovider` - `authentik_providers_saml.samlpropertymapping` -
	//   `authentik_providers_scim.scimprovider` - `authentik_providers_scim.scimmapping` - `authentik_rbac.role` -
	//   `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
	//   `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
	//   `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
	//   `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
	//   `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
	//   `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
	//   `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
	//   `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
	//   `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
	//   `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
	//   `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
	//   `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
	//   `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
	// - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
	//   `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
	//   `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
	//   `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
	//   `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
	//   `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
	//   `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
	//   `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
	// - `authentik_stages_prompt.promptstage` - `authentik_stages_user_delete.userdeletestage` -
	//   `authentik_stages_user_login.userloginstage` - `authentik_stages_user_logout.userlogoutstage` -
	//   `authentik_stages_user_write.userwritestage` - `authentik_brands.brand` - `authentik_blueprints.blueprintinstance` -
	//   `authentik_core.group` - `authentik_core.user` - `authentik_core.application` - `authentik_core.token` -
	//   `authentik_enterprise.license` - `authentik_providers_google_workspace.googleworkspaceprovider` -
	//   `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
	//   `authentik_providers_microsoft_entra.microsoftentraprovider` -
	//   `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_rac.racprovider` -
	//   `authentik_providers_rac.endpoint` - `authentik_providers_rac.racpropertymapping` -
	//   `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_source.sourcestage` -
	//   `authentik_events.event` - `authentik_events.notificationtransport` - `authentik_events.notification` -
	//   `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
	Model      *string `pulumi:"model"`
	ObjectId   *string `pulumi:"objectId"`
	Permission string  `pulumi:"permission"`
	User       int     `pulumi:"user"`
}

// The set of arguments for constructing a RbacPermissionUser resource.
type RbacPermissionUserArgs struct {
	// Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
	// `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
	// `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
	// - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
	//   `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
	//   `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
	//   `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
	// - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
	//   `authentik_providers_radius.radiusprovider` - `authentik_providers_radius.radiusproviderpropertymapping` -
	//   `authentik_providers_saml.samlprovider` - `authentik_providers_saml.samlpropertymapping` -
	//   `authentik_providers_scim.scimprovider` - `authentik_providers_scim.scimmapping` - `authentik_rbac.role` -
	//   `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
	//   `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
	//   `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
	//   `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
	//   `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
	//   `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
	//   `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
	//   `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
	//   `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
	//   `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
	//   `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
	//   `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
	//   `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
	// - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
	//   `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
	//   `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
	//   `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
	//   `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
	//   `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
	//   `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
	//   `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
	// - `authentik_stages_prompt.promptstage` - `authentik_stages_user_delete.userdeletestage` -
	//   `authentik_stages_user_login.userloginstage` - `authentik_stages_user_logout.userlogoutstage` -
	//   `authentik_stages_user_write.userwritestage` - `authentik_brands.brand` - `authentik_blueprints.blueprintinstance` -
	//   `authentik_core.group` - `authentik_core.user` - `authentik_core.application` - `authentik_core.token` -
	//   `authentik_enterprise.license` - `authentik_providers_google_workspace.googleworkspaceprovider` -
	//   `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
	//   `authentik_providers_microsoft_entra.microsoftentraprovider` -
	//   `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_rac.racprovider` -
	//   `authentik_providers_rac.endpoint` - `authentik_providers_rac.racpropertymapping` -
	//   `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_source.sourcestage` -
	//   `authentik_events.event` - `authentik_events.notificationtransport` - `authentik_events.notification` -
	//   `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
	Model      pulumi.StringPtrInput
	ObjectId   pulumi.StringPtrInput
	Permission pulumi.StringInput
	User       pulumi.IntInput
}

func (RbacPermissionUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rbacPermissionUserArgs)(nil)).Elem()
}

type RbacPermissionUserInput interface {
	pulumi.Input

	ToRbacPermissionUserOutput() RbacPermissionUserOutput
	ToRbacPermissionUserOutputWithContext(ctx context.Context) RbacPermissionUserOutput
}

func (*RbacPermissionUser) ElementType() reflect.Type {
	return reflect.TypeOf((**RbacPermissionUser)(nil)).Elem()
}

func (i *RbacPermissionUser) ToRbacPermissionUserOutput() RbacPermissionUserOutput {
	return i.ToRbacPermissionUserOutputWithContext(context.Background())
}

func (i *RbacPermissionUser) ToRbacPermissionUserOutputWithContext(ctx context.Context) RbacPermissionUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RbacPermissionUserOutput)
}

// RbacPermissionUserArrayInput is an input type that accepts RbacPermissionUserArray and RbacPermissionUserArrayOutput values.
// You can construct a concrete instance of `RbacPermissionUserArrayInput` via:
//
//	RbacPermissionUserArray{ RbacPermissionUserArgs{...} }
type RbacPermissionUserArrayInput interface {
	pulumi.Input

	ToRbacPermissionUserArrayOutput() RbacPermissionUserArrayOutput
	ToRbacPermissionUserArrayOutputWithContext(context.Context) RbacPermissionUserArrayOutput
}

type RbacPermissionUserArray []RbacPermissionUserInput

func (RbacPermissionUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RbacPermissionUser)(nil)).Elem()
}

func (i RbacPermissionUserArray) ToRbacPermissionUserArrayOutput() RbacPermissionUserArrayOutput {
	return i.ToRbacPermissionUserArrayOutputWithContext(context.Background())
}

func (i RbacPermissionUserArray) ToRbacPermissionUserArrayOutputWithContext(ctx context.Context) RbacPermissionUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RbacPermissionUserArrayOutput)
}

// RbacPermissionUserMapInput is an input type that accepts RbacPermissionUserMap and RbacPermissionUserMapOutput values.
// You can construct a concrete instance of `RbacPermissionUserMapInput` via:
//
//	RbacPermissionUserMap{ "key": RbacPermissionUserArgs{...} }
type RbacPermissionUserMapInput interface {
	pulumi.Input

	ToRbacPermissionUserMapOutput() RbacPermissionUserMapOutput
	ToRbacPermissionUserMapOutputWithContext(context.Context) RbacPermissionUserMapOutput
}

type RbacPermissionUserMap map[string]RbacPermissionUserInput

func (RbacPermissionUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RbacPermissionUser)(nil)).Elem()
}

func (i RbacPermissionUserMap) ToRbacPermissionUserMapOutput() RbacPermissionUserMapOutput {
	return i.ToRbacPermissionUserMapOutputWithContext(context.Background())
}

func (i RbacPermissionUserMap) ToRbacPermissionUserMapOutputWithContext(ctx context.Context) RbacPermissionUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RbacPermissionUserMapOutput)
}

type RbacPermissionUserOutput struct{ *pulumi.OutputState }

func (RbacPermissionUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RbacPermissionUser)(nil)).Elem()
}

func (o RbacPermissionUserOutput) ToRbacPermissionUserOutput() RbacPermissionUserOutput {
	return o
}

func (o RbacPermissionUserOutput) ToRbacPermissionUserOutputWithContext(ctx context.Context) RbacPermissionUserOutput {
	return o
}

// Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
// `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
// `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
//   - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
//     `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
//     `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
//     `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
//   - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
//     `authentik_providers_radius.radiusprovider` - `authentik_providers_radius.radiusproviderpropertymapping` -
//     `authentik_providers_saml.samlprovider` - `authentik_providers_saml.samlpropertymapping` -
//     `authentik_providers_scim.scimprovider` - `authentik_providers_scim.scimmapping` - `authentik_rbac.role` -
//     `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
//     `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
//     `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
//     `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
//     `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
//     `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
//     `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
//     `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
//     `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
//     `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
//     `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
//     `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
//     `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
//   - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
//     `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
//     `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
//     `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
//     `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
//     `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
//     `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
//     `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
//   - `authentik_stages_prompt.promptstage` - `authentik_stages_user_delete.userdeletestage` -
//     `authentik_stages_user_login.userloginstage` - `authentik_stages_user_logout.userlogoutstage` -
//     `authentik_stages_user_write.userwritestage` - `authentik_brands.brand` - `authentik_blueprints.blueprintinstance` -
//     `authentik_core.group` - `authentik_core.user` - `authentik_core.application` - `authentik_core.token` -
//     `authentik_enterprise.license` - `authentik_providers_google_workspace.googleworkspaceprovider` -
//     `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
//     `authentik_providers_microsoft_entra.microsoftentraprovider` -
//     `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_rac.racprovider` -
//     `authentik_providers_rac.endpoint` - `authentik_providers_rac.racpropertymapping` -
//     `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_source.sourcestage` -
//     `authentik_events.event` - `authentik_events.notificationtransport` - `authentik_events.notification` -
//     `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
func (o RbacPermissionUserOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RbacPermissionUser) pulumi.StringPtrOutput { return v.Model }).(pulumi.StringPtrOutput)
}

func (o RbacPermissionUserOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RbacPermissionUser) pulumi.StringPtrOutput { return v.ObjectId }).(pulumi.StringPtrOutput)
}

func (o RbacPermissionUserOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *RbacPermissionUser) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

func (o RbacPermissionUserOutput) User() pulumi.IntOutput {
	return o.ApplyT(func(v *RbacPermissionUser) pulumi.IntOutput { return v.User }).(pulumi.IntOutput)
}

type RbacPermissionUserArrayOutput struct{ *pulumi.OutputState }

func (RbacPermissionUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RbacPermissionUser)(nil)).Elem()
}

func (o RbacPermissionUserArrayOutput) ToRbacPermissionUserArrayOutput() RbacPermissionUserArrayOutput {
	return o
}

func (o RbacPermissionUserArrayOutput) ToRbacPermissionUserArrayOutputWithContext(ctx context.Context) RbacPermissionUserArrayOutput {
	return o
}

func (o RbacPermissionUserArrayOutput) Index(i pulumi.IntInput) RbacPermissionUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RbacPermissionUser {
		return vs[0].([]*RbacPermissionUser)[vs[1].(int)]
	}).(RbacPermissionUserOutput)
}

type RbacPermissionUserMapOutput struct{ *pulumi.OutputState }

func (RbacPermissionUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RbacPermissionUser)(nil)).Elem()
}

func (o RbacPermissionUserMapOutput) ToRbacPermissionUserMapOutput() RbacPermissionUserMapOutput {
	return o
}

func (o RbacPermissionUserMapOutput) ToRbacPermissionUserMapOutputWithContext(ctx context.Context) RbacPermissionUserMapOutput {
	return o
}

func (o RbacPermissionUserMapOutput) MapIndex(k pulumi.StringInput) RbacPermissionUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RbacPermissionUser {
		return vs[0].(map[string]*RbacPermissionUser)[vs[1].(string)]
	}).(RbacPermissionUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RbacPermissionUserInput)(nil)).Elem(), &RbacPermissionUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*RbacPermissionUserArrayInput)(nil)).Elem(), RbacPermissionUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RbacPermissionUserMapInput)(nil)).Elem(), RbacPermissionUserMap{})
	pulumi.RegisterOutputType(RbacPermissionUserOutput{})
	pulumi.RegisterOutputType(RbacPermissionUserArrayOutput{})
	pulumi.RegisterOutputType(RbacPermissionUserMapOutput{})
}
