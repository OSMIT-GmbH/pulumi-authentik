// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a user deletion stage
//			_, err := authentik.NewStageUserDelete(ctx, "name", &authentik.StageUserDeleteArgs{
//				Name: pulumi.String("user-delete"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StageUserDelete struct {
	pulumi.CustomResourceState

	Name pulumi.StringOutput `pulumi:"name"`
}

// NewStageUserDelete registers a new resource with the given unique name, arguments, and options.
func NewStageUserDelete(ctx *pulumi.Context,
	name string, args *StageUserDeleteArgs, opts ...pulumi.ResourceOption) (*StageUserDelete, error) {
	if args == nil {
		args = &StageUserDeleteArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StageUserDelete
	err := ctx.RegisterResource("authentik:index/stageUserDelete:StageUserDelete", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStageUserDelete gets an existing StageUserDelete resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStageUserDelete(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StageUserDeleteState, opts ...pulumi.ResourceOption) (*StageUserDelete, error) {
	var resource StageUserDelete
	err := ctx.ReadResource("authentik:index/stageUserDelete:StageUserDelete", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StageUserDelete resources.
type stageUserDeleteState struct {
	Name *string `pulumi:"name"`
}

type StageUserDeleteState struct {
	Name pulumi.StringPtrInput
}

func (StageUserDeleteState) ElementType() reflect.Type {
	return reflect.TypeOf((*stageUserDeleteState)(nil)).Elem()
}

type stageUserDeleteArgs struct {
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a StageUserDelete resource.
type StageUserDeleteArgs struct {
	Name pulumi.StringPtrInput
}

func (StageUserDeleteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stageUserDeleteArgs)(nil)).Elem()
}

type StageUserDeleteInput interface {
	pulumi.Input

	ToStageUserDeleteOutput() StageUserDeleteOutput
	ToStageUserDeleteOutputWithContext(ctx context.Context) StageUserDeleteOutput
}

func (*StageUserDelete) ElementType() reflect.Type {
	return reflect.TypeOf((**StageUserDelete)(nil)).Elem()
}

func (i *StageUserDelete) ToStageUserDeleteOutput() StageUserDeleteOutput {
	return i.ToStageUserDeleteOutputWithContext(context.Background())
}

func (i *StageUserDelete) ToStageUserDeleteOutputWithContext(ctx context.Context) StageUserDeleteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageUserDeleteOutput)
}

// StageUserDeleteArrayInput is an input type that accepts StageUserDeleteArray and StageUserDeleteArrayOutput values.
// You can construct a concrete instance of `StageUserDeleteArrayInput` via:
//
//	StageUserDeleteArray{ StageUserDeleteArgs{...} }
type StageUserDeleteArrayInput interface {
	pulumi.Input

	ToStageUserDeleteArrayOutput() StageUserDeleteArrayOutput
	ToStageUserDeleteArrayOutputWithContext(context.Context) StageUserDeleteArrayOutput
}

type StageUserDeleteArray []StageUserDeleteInput

func (StageUserDeleteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StageUserDelete)(nil)).Elem()
}

func (i StageUserDeleteArray) ToStageUserDeleteArrayOutput() StageUserDeleteArrayOutput {
	return i.ToStageUserDeleteArrayOutputWithContext(context.Background())
}

func (i StageUserDeleteArray) ToStageUserDeleteArrayOutputWithContext(ctx context.Context) StageUserDeleteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageUserDeleteArrayOutput)
}

// StageUserDeleteMapInput is an input type that accepts StageUserDeleteMap and StageUserDeleteMapOutput values.
// You can construct a concrete instance of `StageUserDeleteMapInput` via:
//
//	StageUserDeleteMap{ "key": StageUserDeleteArgs{...} }
type StageUserDeleteMapInput interface {
	pulumi.Input

	ToStageUserDeleteMapOutput() StageUserDeleteMapOutput
	ToStageUserDeleteMapOutputWithContext(context.Context) StageUserDeleteMapOutput
}

type StageUserDeleteMap map[string]StageUserDeleteInput

func (StageUserDeleteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StageUserDelete)(nil)).Elem()
}

func (i StageUserDeleteMap) ToStageUserDeleteMapOutput() StageUserDeleteMapOutput {
	return i.ToStageUserDeleteMapOutputWithContext(context.Background())
}

func (i StageUserDeleteMap) ToStageUserDeleteMapOutputWithContext(ctx context.Context) StageUserDeleteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageUserDeleteMapOutput)
}

type StageUserDeleteOutput struct{ *pulumi.OutputState }

func (StageUserDeleteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StageUserDelete)(nil)).Elem()
}

func (o StageUserDeleteOutput) ToStageUserDeleteOutput() StageUserDeleteOutput {
	return o
}

func (o StageUserDeleteOutput) ToStageUserDeleteOutputWithContext(ctx context.Context) StageUserDeleteOutput {
	return o
}

func (o StageUserDeleteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StageUserDelete) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type StageUserDeleteArrayOutput struct{ *pulumi.OutputState }

func (StageUserDeleteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StageUserDelete)(nil)).Elem()
}

func (o StageUserDeleteArrayOutput) ToStageUserDeleteArrayOutput() StageUserDeleteArrayOutput {
	return o
}

func (o StageUserDeleteArrayOutput) ToStageUserDeleteArrayOutputWithContext(ctx context.Context) StageUserDeleteArrayOutput {
	return o
}

func (o StageUserDeleteArrayOutput) Index(i pulumi.IntInput) StageUserDeleteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StageUserDelete {
		return vs[0].([]*StageUserDelete)[vs[1].(int)]
	}).(StageUserDeleteOutput)
}

type StageUserDeleteMapOutput struct{ *pulumi.OutputState }

func (StageUserDeleteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StageUserDelete)(nil)).Elem()
}

func (o StageUserDeleteMapOutput) ToStageUserDeleteMapOutput() StageUserDeleteMapOutput {
	return o
}

func (o StageUserDeleteMapOutput) ToStageUserDeleteMapOutputWithContext(ctx context.Context) StageUserDeleteMapOutput {
	return o
}

func (o StageUserDeleteMapOutput) MapIndex(k pulumi.StringInput) StageUserDeleteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StageUserDelete {
		return vs[0].(map[string]*StageUserDelete)[vs[1].(string)]
	}).(StageUserDeleteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StageUserDeleteInput)(nil)).Elem(), &StageUserDelete{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageUserDeleteArrayInput)(nil)).Elem(), StageUserDeleteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageUserDeleteMapInput)(nil)).Elem(), StageUserDeleteMap{})
	pulumi.RegisterOutputType(StageUserDeleteOutput{})
	pulumi.RegisterOutputType(StageUserDeleteArrayOutput{})
	pulumi.RegisterOutputType(StageUserDeleteMapOutput{})
}
