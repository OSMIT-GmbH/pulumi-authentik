// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/v2024/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create OAuth Source using an existing provider
//			default_authorization_flow, err := authentik.LookupFlow(ctx, &authentik.LookupFlowArgs{
//				Slug: pulumi.StringRef("default-provider-authorization-implicit-consent"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			name, err := authentik.NewSourceOauth(ctx, "name", &authentik.SourceOauthArgs{
//				Name:               pulumi.String("discord"),
//				Slug:               pulumi.String("discord"),
//				AuthenticationFlow: pulumi.String(default_authorization_flow.Id),
//				EnrollmentFlow:     pulumi.String(default_authorization_flow.Id),
//				ProviderType:       pulumi.String("discord"),
//				ConsumerKey:        pulumi.String("foo"),
//				ConsumerSecret:     pulumi.String("bar"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a source stage using the source defined above
//			_, err = authentik.NewStageSource(ctx, "name", &authentik.StageSourceArgs{
//				Name:   pulumi.String("source-stage"),
//				Source: name.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StageSource struct {
	pulumi.CustomResourceState

	Name pulumi.StringOutput `pulumi:"name"`
	// Defaults to `minutes=10`.
	ResumeTimeout pulumi.StringPtrOutput `pulumi:"resumeTimeout"`
	Source        pulumi.StringPtrOutput `pulumi:"source"`
}

// NewStageSource registers a new resource with the given unique name, arguments, and options.
func NewStageSource(ctx *pulumi.Context,
	name string, args *StageSourceArgs, opts ...pulumi.ResourceOption) (*StageSource, error) {
	if args == nil {
		args = &StageSourceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StageSource
	err := ctx.RegisterResource("authentik:index/stageSource:StageSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStageSource gets an existing StageSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStageSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StageSourceState, opts ...pulumi.ResourceOption) (*StageSource, error) {
	var resource StageSource
	err := ctx.ReadResource("authentik:index/stageSource:StageSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StageSource resources.
type stageSourceState struct {
	Name *string `pulumi:"name"`
	// Defaults to `minutes=10`.
	ResumeTimeout *string `pulumi:"resumeTimeout"`
	Source        *string `pulumi:"source"`
}

type StageSourceState struct {
	Name pulumi.StringPtrInput
	// Defaults to `minutes=10`.
	ResumeTimeout pulumi.StringPtrInput
	Source        pulumi.StringPtrInput
}

func (StageSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*stageSourceState)(nil)).Elem()
}

type stageSourceArgs struct {
	Name *string `pulumi:"name"`
	// Defaults to `minutes=10`.
	ResumeTimeout *string `pulumi:"resumeTimeout"`
	Source        *string `pulumi:"source"`
}

// The set of arguments for constructing a StageSource resource.
type StageSourceArgs struct {
	Name pulumi.StringPtrInput
	// Defaults to `minutes=10`.
	ResumeTimeout pulumi.StringPtrInput
	Source        pulumi.StringPtrInput
}

func (StageSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stageSourceArgs)(nil)).Elem()
}

type StageSourceInput interface {
	pulumi.Input

	ToStageSourceOutput() StageSourceOutput
	ToStageSourceOutputWithContext(ctx context.Context) StageSourceOutput
}

func (*StageSource) ElementType() reflect.Type {
	return reflect.TypeOf((**StageSource)(nil)).Elem()
}

func (i *StageSource) ToStageSourceOutput() StageSourceOutput {
	return i.ToStageSourceOutputWithContext(context.Background())
}

func (i *StageSource) ToStageSourceOutputWithContext(ctx context.Context) StageSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageSourceOutput)
}

// StageSourceArrayInput is an input type that accepts StageSourceArray and StageSourceArrayOutput values.
// You can construct a concrete instance of `StageSourceArrayInput` via:
//
//	StageSourceArray{ StageSourceArgs{...} }
type StageSourceArrayInput interface {
	pulumi.Input

	ToStageSourceArrayOutput() StageSourceArrayOutput
	ToStageSourceArrayOutputWithContext(context.Context) StageSourceArrayOutput
}

type StageSourceArray []StageSourceInput

func (StageSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StageSource)(nil)).Elem()
}

func (i StageSourceArray) ToStageSourceArrayOutput() StageSourceArrayOutput {
	return i.ToStageSourceArrayOutputWithContext(context.Background())
}

func (i StageSourceArray) ToStageSourceArrayOutputWithContext(ctx context.Context) StageSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageSourceArrayOutput)
}

// StageSourceMapInput is an input type that accepts StageSourceMap and StageSourceMapOutput values.
// You can construct a concrete instance of `StageSourceMapInput` via:
//
//	StageSourceMap{ "key": StageSourceArgs{...} }
type StageSourceMapInput interface {
	pulumi.Input

	ToStageSourceMapOutput() StageSourceMapOutput
	ToStageSourceMapOutputWithContext(context.Context) StageSourceMapOutput
}

type StageSourceMap map[string]StageSourceInput

func (StageSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StageSource)(nil)).Elem()
}

func (i StageSourceMap) ToStageSourceMapOutput() StageSourceMapOutput {
	return i.ToStageSourceMapOutputWithContext(context.Background())
}

func (i StageSourceMap) ToStageSourceMapOutputWithContext(ctx context.Context) StageSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageSourceMapOutput)
}

type StageSourceOutput struct{ *pulumi.OutputState }

func (StageSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StageSource)(nil)).Elem()
}

func (o StageSourceOutput) ToStageSourceOutput() StageSourceOutput {
	return o
}

func (o StageSourceOutput) ToStageSourceOutputWithContext(ctx context.Context) StageSourceOutput {
	return o
}

func (o StageSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StageSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Defaults to `minutes=10`.
func (o StageSourceOutput) ResumeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StageSource) pulumi.StringPtrOutput { return v.ResumeTimeout }).(pulumi.StringPtrOutput)
}

func (o StageSourceOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StageSource) pulumi.StringPtrOutput { return v.Source }).(pulumi.StringPtrOutput)
}

type StageSourceArrayOutput struct{ *pulumi.OutputState }

func (StageSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StageSource)(nil)).Elem()
}

func (o StageSourceArrayOutput) ToStageSourceArrayOutput() StageSourceArrayOutput {
	return o
}

func (o StageSourceArrayOutput) ToStageSourceArrayOutputWithContext(ctx context.Context) StageSourceArrayOutput {
	return o
}

func (o StageSourceArrayOutput) Index(i pulumi.IntInput) StageSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StageSource {
		return vs[0].([]*StageSource)[vs[1].(int)]
	}).(StageSourceOutput)
}

type StageSourceMapOutput struct{ *pulumi.OutputState }

func (StageSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StageSource)(nil)).Elem()
}

func (o StageSourceMapOutput) ToStageSourceMapOutput() StageSourceMapOutput {
	return o
}

func (o StageSourceMapOutput) ToStageSourceMapOutputWithContext(ctx context.Context) StageSourceMapOutput {
	return o
}

func (o StageSourceMapOutput) MapIndex(k pulumi.StringInput) StageSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StageSource {
		return vs[0].(map[string]*StageSource)[vs[1].(string)]
	}).(StageSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StageSourceInput)(nil)).Elem(), &StageSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageSourceArrayInput)(nil)).Elem(), StageSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageSourceMapInput)(nil)).Elem(), StageSourceMap{})
	pulumi.RegisterOutputType(StageSourceOutput{})
	pulumi.RegisterOutputType(StageSourceArrayOutput{})
	pulumi.RegisterOutputType(StageSourceMapOutput{})
}
