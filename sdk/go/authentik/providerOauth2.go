// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentik

import (
	"context"
	"reflect"

	"errors"
	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/OSMIT-GmbH/pulumi-authentik/sdk/go/authentik"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			nameProviderOauth2, err := authentik.NewProviderOauth2(ctx, "nameProviderOauth2", &authentik.ProviderOauth2Args{
//				ClientId: pulumi.String("grafana"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authentik.NewApplication(ctx, "nameApplication", &authentik.ApplicationArgs{
//				Slug:             pulumi.String("test-app"),
//				ProtocolProvider: nameProviderOauth2.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ProviderOauth2 struct {
	pulumi.CustomResourceState

	// Defaults to `minutes=1`.
	AccessCodeValidity pulumi.StringPtrOutput `pulumi:"accessCodeValidity"`
	// Defaults to `minutes=10`.
	AccessTokenValidity pulumi.StringPtrOutput `pulumi:"accessTokenValidity"`
	AuthenticationFlow  pulumi.StringPtrOutput `pulumi:"authenticationFlow"`
	AuthorizationFlow   pulumi.StringOutput    `pulumi:"authorizationFlow"`
	ClientId            pulumi.StringOutput    `pulumi:"clientId"`
	// Generated.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// Defaults to `confidential`.
	ClientType pulumi.StringPtrOutput `pulumi:"clientType"`
	// Defaults to `true`.
	IncludeClaimsInIdToken pulumi.BoolPtrOutput `pulumi:"includeClaimsInIdToken"`
	// Defaults to `perProvider`.
	IssuerMode pulumi.StringPtrOutput `pulumi:"issuerMode"`
	// JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
	JwksSources      pulumi.StringArrayOutput `pulumi:"jwksSources"`
	Name             pulumi.StringOutput      `pulumi:"name"`
	PropertyMappings pulumi.StringArrayOutput `pulumi:"propertyMappings"`
	RedirectUris     pulumi.StringArrayOutput `pulumi:"redirectUris"`
	// Defaults to `days=30`.
	RefreshTokenValidity pulumi.StringPtrOutput `pulumi:"refreshTokenValidity"`
	SigningKey           pulumi.StringPtrOutput `pulumi:"signingKey"`
	// Defaults to `hashedUserId`.
	SubMode pulumi.StringPtrOutput `pulumi:"subMode"`
}

// NewProviderOauth2 registers a new resource with the given unique name, arguments, and options.
func NewProviderOauth2(ctx *pulumi.Context,
	name string, args *ProviderOauth2Args, opts ...pulumi.ResourceOption) (*ProviderOauth2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizationFlow == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationFlow'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProviderOauth2
	err := ctx.RegisterResource("authentik:index/providerOauth2:ProviderOauth2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProviderOauth2 gets an existing ProviderOauth2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProviderOauth2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProviderOauth2State, opts ...pulumi.ResourceOption) (*ProviderOauth2, error) {
	var resource ProviderOauth2
	err := ctx.ReadResource("authentik:index/providerOauth2:ProviderOauth2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProviderOauth2 resources.
type providerOauth2State struct {
	// Defaults to `minutes=1`.
	AccessCodeValidity *string `pulumi:"accessCodeValidity"`
	// Defaults to `minutes=10`.
	AccessTokenValidity *string `pulumi:"accessTokenValidity"`
	AuthenticationFlow  *string `pulumi:"authenticationFlow"`
	AuthorizationFlow   *string `pulumi:"authorizationFlow"`
	ClientId            *string `pulumi:"clientId"`
	// Generated.
	ClientSecret *string `pulumi:"clientSecret"`
	// Defaults to `confidential`.
	ClientType *string `pulumi:"clientType"`
	// Defaults to `true`.
	IncludeClaimsInIdToken *bool `pulumi:"includeClaimsInIdToken"`
	// Defaults to `perProvider`.
	IssuerMode *string `pulumi:"issuerMode"`
	// JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
	JwksSources      []string `pulumi:"jwksSources"`
	Name             *string  `pulumi:"name"`
	PropertyMappings []string `pulumi:"propertyMappings"`
	RedirectUris     []string `pulumi:"redirectUris"`
	// Defaults to `days=30`.
	RefreshTokenValidity *string `pulumi:"refreshTokenValidity"`
	SigningKey           *string `pulumi:"signingKey"`
	// Defaults to `hashedUserId`.
	SubMode *string `pulumi:"subMode"`
}

type ProviderOauth2State struct {
	// Defaults to `minutes=1`.
	AccessCodeValidity pulumi.StringPtrInput
	// Defaults to `minutes=10`.
	AccessTokenValidity pulumi.StringPtrInput
	AuthenticationFlow  pulumi.StringPtrInput
	AuthorizationFlow   pulumi.StringPtrInput
	ClientId            pulumi.StringPtrInput
	// Generated.
	ClientSecret pulumi.StringPtrInput
	// Defaults to `confidential`.
	ClientType pulumi.StringPtrInput
	// Defaults to `true`.
	IncludeClaimsInIdToken pulumi.BoolPtrInput
	// Defaults to `perProvider`.
	IssuerMode pulumi.StringPtrInput
	// JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
	JwksSources      pulumi.StringArrayInput
	Name             pulumi.StringPtrInput
	PropertyMappings pulumi.StringArrayInput
	RedirectUris     pulumi.StringArrayInput
	// Defaults to `days=30`.
	RefreshTokenValidity pulumi.StringPtrInput
	SigningKey           pulumi.StringPtrInput
	// Defaults to `hashedUserId`.
	SubMode pulumi.StringPtrInput
}

func (ProviderOauth2State) ElementType() reflect.Type {
	return reflect.TypeOf((*providerOauth2State)(nil)).Elem()
}

type providerOauth2Args struct {
	// Defaults to `minutes=1`.
	AccessCodeValidity *string `pulumi:"accessCodeValidity"`
	// Defaults to `minutes=10`.
	AccessTokenValidity *string `pulumi:"accessTokenValidity"`
	AuthenticationFlow  *string `pulumi:"authenticationFlow"`
	AuthorizationFlow   string  `pulumi:"authorizationFlow"`
	ClientId            string  `pulumi:"clientId"`
	// Generated.
	ClientSecret *string `pulumi:"clientSecret"`
	// Defaults to `confidential`.
	ClientType *string `pulumi:"clientType"`
	// Defaults to `true`.
	IncludeClaimsInIdToken *bool `pulumi:"includeClaimsInIdToken"`
	// Defaults to `perProvider`.
	IssuerMode *string `pulumi:"issuerMode"`
	// JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
	JwksSources      []string `pulumi:"jwksSources"`
	Name             *string  `pulumi:"name"`
	PropertyMappings []string `pulumi:"propertyMappings"`
	RedirectUris     []string `pulumi:"redirectUris"`
	// Defaults to `days=30`.
	RefreshTokenValidity *string `pulumi:"refreshTokenValidity"`
	SigningKey           *string `pulumi:"signingKey"`
	// Defaults to `hashedUserId`.
	SubMode *string `pulumi:"subMode"`
}

// The set of arguments for constructing a ProviderOauth2 resource.
type ProviderOauth2Args struct {
	// Defaults to `minutes=1`.
	AccessCodeValidity pulumi.StringPtrInput
	// Defaults to `minutes=10`.
	AccessTokenValidity pulumi.StringPtrInput
	AuthenticationFlow  pulumi.StringPtrInput
	AuthorizationFlow   pulumi.StringInput
	ClientId            pulumi.StringInput
	// Generated.
	ClientSecret pulumi.StringPtrInput
	// Defaults to `confidential`.
	ClientType pulumi.StringPtrInput
	// Defaults to `true`.
	IncludeClaimsInIdToken pulumi.BoolPtrInput
	// Defaults to `perProvider`.
	IssuerMode pulumi.StringPtrInput
	// JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
	JwksSources      pulumi.StringArrayInput
	Name             pulumi.StringPtrInput
	PropertyMappings pulumi.StringArrayInput
	RedirectUris     pulumi.StringArrayInput
	// Defaults to `days=30`.
	RefreshTokenValidity pulumi.StringPtrInput
	SigningKey           pulumi.StringPtrInput
	// Defaults to `hashedUserId`.
	SubMode pulumi.StringPtrInput
}

func (ProviderOauth2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*providerOauth2Args)(nil)).Elem()
}

type ProviderOauth2Input interface {
	pulumi.Input

	ToProviderOauth2Output() ProviderOauth2Output
	ToProviderOauth2OutputWithContext(ctx context.Context) ProviderOauth2Output
}

func (*ProviderOauth2) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderOauth2)(nil)).Elem()
}

func (i *ProviderOauth2) ToProviderOauth2Output() ProviderOauth2Output {
	return i.ToProviderOauth2OutputWithContext(context.Background())
}

func (i *ProviderOauth2) ToProviderOauth2OutputWithContext(ctx context.Context) ProviderOauth2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOauth2Output)
}

func (i *ProviderOauth2) ToOutput(ctx context.Context) pulumix.Output[*ProviderOauth2] {
	return pulumix.Output[*ProviderOauth2]{
		OutputState: i.ToProviderOauth2OutputWithContext(ctx).OutputState,
	}
}

// ProviderOauth2ArrayInput is an input type that accepts ProviderOauth2Array and ProviderOauth2ArrayOutput values.
// You can construct a concrete instance of `ProviderOauth2ArrayInput` via:
//
//	ProviderOauth2Array{ ProviderOauth2Args{...} }
type ProviderOauth2ArrayInput interface {
	pulumi.Input

	ToProviderOauth2ArrayOutput() ProviderOauth2ArrayOutput
	ToProviderOauth2ArrayOutputWithContext(context.Context) ProviderOauth2ArrayOutput
}

type ProviderOauth2Array []ProviderOauth2Input

func (ProviderOauth2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProviderOauth2)(nil)).Elem()
}

func (i ProviderOauth2Array) ToProviderOauth2ArrayOutput() ProviderOauth2ArrayOutput {
	return i.ToProviderOauth2ArrayOutputWithContext(context.Background())
}

func (i ProviderOauth2Array) ToProviderOauth2ArrayOutputWithContext(ctx context.Context) ProviderOauth2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOauth2ArrayOutput)
}

func (i ProviderOauth2Array) ToOutput(ctx context.Context) pulumix.Output[[]*ProviderOauth2] {
	return pulumix.Output[[]*ProviderOauth2]{
		OutputState: i.ToProviderOauth2ArrayOutputWithContext(ctx).OutputState,
	}
}

// ProviderOauth2MapInput is an input type that accepts ProviderOauth2Map and ProviderOauth2MapOutput values.
// You can construct a concrete instance of `ProviderOauth2MapInput` via:
//
//	ProviderOauth2Map{ "key": ProviderOauth2Args{...} }
type ProviderOauth2MapInput interface {
	pulumi.Input

	ToProviderOauth2MapOutput() ProviderOauth2MapOutput
	ToProviderOauth2MapOutputWithContext(context.Context) ProviderOauth2MapOutput
}

type ProviderOauth2Map map[string]ProviderOauth2Input

func (ProviderOauth2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProviderOauth2)(nil)).Elem()
}

func (i ProviderOauth2Map) ToProviderOauth2MapOutput() ProviderOauth2MapOutput {
	return i.ToProviderOauth2MapOutputWithContext(context.Background())
}

func (i ProviderOauth2Map) ToProviderOauth2MapOutputWithContext(ctx context.Context) ProviderOauth2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOauth2MapOutput)
}

func (i ProviderOauth2Map) ToOutput(ctx context.Context) pulumix.Output[map[string]*ProviderOauth2] {
	return pulumix.Output[map[string]*ProviderOauth2]{
		OutputState: i.ToProviderOauth2MapOutputWithContext(ctx).OutputState,
	}
}

type ProviderOauth2Output struct{ *pulumi.OutputState }

func (ProviderOauth2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderOauth2)(nil)).Elem()
}

func (o ProviderOauth2Output) ToProviderOauth2Output() ProviderOauth2Output {
	return o
}

func (o ProviderOauth2Output) ToProviderOauth2OutputWithContext(ctx context.Context) ProviderOauth2Output {
	return o
}

func (o ProviderOauth2Output) ToOutput(ctx context.Context) pulumix.Output[*ProviderOauth2] {
	return pulumix.Output[*ProviderOauth2]{
		OutputState: o.OutputState,
	}
}

// Defaults to `minutes=1`.
func (o ProviderOauth2Output) AccessCodeValidity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringPtrOutput { return v.AccessCodeValidity }).(pulumi.StringPtrOutput)
}

// Defaults to `minutes=10`.
func (o ProviderOauth2Output) AccessTokenValidity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringPtrOutput { return v.AccessTokenValidity }).(pulumi.StringPtrOutput)
}

func (o ProviderOauth2Output) AuthenticationFlow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringPtrOutput { return v.AuthenticationFlow }).(pulumi.StringPtrOutput)
}

func (o ProviderOauth2Output) AuthorizationFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringOutput { return v.AuthorizationFlow }).(pulumi.StringOutput)
}

func (o ProviderOauth2Output) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// Generated.
func (o ProviderOauth2Output) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// Defaults to `confidential`.
func (o ProviderOauth2Output) ClientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringPtrOutput { return v.ClientType }).(pulumi.StringPtrOutput)
}

// Defaults to `true`.
func (o ProviderOauth2Output) IncludeClaimsInIdToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.BoolPtrOutput { return v.IncludeClaimsInIdToken }).(pulumi.BoolPtrOutput)
}

// Defaults to `perProvider`.
func (o ProviderOauth2Output) IssuerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringPtrOutput { return v.IssuerMode }).(pulumi.StringPtrOutput)
}

// JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
func (o ProviderOauth2Output) JwksSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringArrayOutput { return v.JwksSources }).(pulumi.StringArrayOutput)
}

func (o ProviderOauth2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ProviderOauth2Output) PropertyMappings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringArrayOutput { return v.PropertyMappings }).(pulumi.StringArrayOutput)
}

func (o ProviderOauth2Output) RedirectUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringArrayOutput { return v.RedirectUris }).(pulumi.StringArrayOutput)
}

// Defaults to `days=30`.
func (o ProviderOauth2Output) RefreshTokenValidity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringPtrOutput { return v.RefreshTokenValidity }).(pulumi.StringPtrOutput)
}

func (o ProviderOauth2Output) SigningKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringPtrOutput { return v.SigningKey }).(pulumi.StringPtrOutput)
}

// Defaults to `hashedUserId`.
func (o ProviderOauth2Output) SubMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderOauth2) pulumi.StringPtrOutput { return v.SubMode }).(pulumi.StringPtrOutput)
}

type ProviderOauth2ArrayOutput struct{ *pulumi.OutputState }

func (ProviderOauth2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProviderOauth2)(nil)).Elem()
}

func (o ProviderOauth2ArrayOutput) ToProviderOauth2ArrayOutput() ProviderOauth2ArrayOutput {
	return o
}

func (o ProviderOauth2ArrayOutput) ToProviderOauth2ArrayOutputWithContext(ctx context.Context) ProviderOauth2ArrayOutput {
	return o
}

func (o ProviderOauth2ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ProviderOauth2] {
	return pulumix.Output[[]*ProviderOauth2]{
		OutputState: o.OutputState,
	}
}

func (o ProviderOauth2ArrayOutput) Index(i pulumi.IntInput) ProviderOauth2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProviderOauth2 {
		return vs[0].([]*ProviderOauth2)[vs[1].(int)]
	}).(ProviderOauth2Output)
}

type ProviderOauth2MapOutput struct{ *pulumi.OutputState }

func (ProviderOauth2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProviderOauth2)(nil)).Elem()
}

func (o ProviderOauth2MapOutput) ToProviderOauth2MapOutput() ProviderOauth2MapOutput {
	return o
}

func (o ProviderOauth2MapOutput) ToProviderOauth2MapOutputWithContext(ctx context.Context) ProviderOauth2MapOutput {
	return o
}

func (o ProviderOauth2MapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ProviderOauth2] {
	return pulumix.Output[map[string]*ProviderOauth2]{
		OutputState: o.OutputState,
	}
}

func (o ProviderOauth2MapOutput) MapIndex(k pulumi.StringInput) ProviderOauth2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProviderOauth2 {
		return vs[0].(map[string]*ProviderOauth2)[vs[1].(string)]
	}).(ProviderOauth2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderOauth2Input)(nil)).Elem(), &ProviderOauth2{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderOauth2ArrayInput)(nil)).Elem(), ProviderOauth2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderOauth2MapInput)(nil)).Elem(), ProviderOauth2Map{})
	pulumi.RegisterOutputType(ProviderOauth2Output{})
	pulumi.RegisterOutputType(ProviderOauth2ArrayOutput{})
	pulumi.RegisterOutputType(ProviderOauth2MapOutput{})
}
